{
  "enabled": true,
  "name": "Component Integration Checker",
  "description": "Checks if React components are properly integrated when saved. Validates imports, routing, API connections, and ensures components follow project patterns.",
  "version": "1",
  "when": {
    "type": "fileSaved",
    "patterns": [
      "client/src/components/**/*.tsx",
      "client/src/pages/**/*.tsx"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "A React component was just saved. Verify it's properly integrated and follows project standards.\n\n**QUICK INTEGRATION CHECK:**\n\n## 1. Component Usage\n- **Is this component imported anywhere?**\n  - Search for imports of this component\n  - If it's a page, check `App.tsx` for routing\n  - If it's reusable, check if other components use it\n  - If unused, suggest where it should be integrated\n\n## 2. API Integration (if component makes API calls)\n- [ ] Uses `apiRequest` from `@/lib/queryClient`\n- [ ] Uses TanStack Query (`useQuery` or `useMutation`)\n- [ ] Has loading state: `isLoading` check\n- [ ] Has error handling: `error` check\n- [ ] Shows loading skeleton or spinner\n- [ ] Shows error message to user\n- [ ] Invalidates queries after mutations\n\n## 3. Authentication & Authorization\n- [ ] Uses `useAuth` hook if auth required\n- [ ] Checks `user?.tier` for tier-gated features\n- [ ] Shows upgrade prompt for locked features\n- [ ] Redirects to login if not authenticated\n\n## 4. UI/UX Standards\n- [ ] Uses shadcn/ui components (Card, Button, Badge, etc.)\n- [ ] Responsive design (works on mobile)\n- [ ] Proper spacing (p-4, gap-4, space-y-4)\n- [ ] Loading states for async operations\n- [ ] Empty states when no data\n- [ ] Error states with retry options\n\n## 5. TypeScript Quality\n- [ ] No `any` types\n- [ ] Props interface defined\n- [ ] Return type explicit\n- [ ] No TypeScript errors (run getDiagnostics)\n\n---\n\n**OUTPUT FORMAT:**\n\n```markdown\n# Component Integration Status\n\n## Component: [ComponentName]\n**File:** [path]\n**Type:** [Page/Reusable Component/Widget]\n\n## ‚úÖ Integration Status\n\n### Used In:\n- ‚úÖ `client/src/App.tsx` (route: /path)\n- ‚úÖ `client/src/pages/dashboard.tsx` (imported)\n\n### API Connections:\n- ‚úÖ `GET /api/analytics/data` (with useQuery)\n- ‚úÖ Loading state implemented\n- ‚úÖ Error handling implemented\n\n### Authentication:\n- ‚úÖ Uses useAuth hook\n- ‚úÖ Tier check: Pro/Premium required\n- ‚úÖ Upgrade prompt shown\n\n## ‚ö†Ô∏è Issues Found\n\n### Missing Integration:\n1. **Component not used anywhere**\n   - This component exists but isn't imported\n   - Suggested integration: Add to `client/src/pages/analytics-dashboard.tsx`\n   - Code to add:\n   ```tsx\n   import { ComponentName } from '@/components/ComponentName';\n   // Then use: <ComponentName />\n   ```\n\n### API Issues:\n1. **Missing error handling**\n   - Line 45: useQuery has no error state\n   - Add:\n   ```tsx\n   if (error) {\n     return <Alert variant=\"destructive\">{error.message}</Alert>;\n   }\n   ```\n\n### TypeScript Issues:\n1. **Missing return type**\n   - Function at line 23 needs explicit return type\n   - Fix: `function handleSubmit(): Promise<void> {`\n\n## üéØ Action Items\n\n**Priority 1 (Critical):**\n- [ ] Fix TypeScript errors\n- [ ] Add error handling for API calls\n\n**Priority 2 (Important):**\n- [ ] Integrate component into parent page\n- [ ] Add loading states\n\n**Priority 3 (Nice to have):**\n- [ ] Add JSDoc comments\n- [ ] Add empty state\n\n## ‚úÖ Status: [READY/NEEDS FIXES]\n```\n\n---\n\n**COMMON INTEGRATION PATTERNS:**\n\n### Pattern 1: New Analytics Widget\n```tsx\n// 1. Create widget in client/src/components/analytics/\n// 2. Import in analytics-dashboard.tsx:\nimport { NewWidget } from '@/components/analytics/NewWidget';\n\n// 3. Add to dashboard:\n<div className=\"grid gap-4 md:grid-cols-2\">\n  <ExistingWidget />\n  <NewWidget />  {/* Add here */}\n</div>\n```\n\n### Pattern 2: New Page with API\n```tsx\n// Component should have:\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport function NewPage() {\n  const { user } = useAuth();\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['/api/endpoint'],\n    enabled: !!user,\n  });\n\n  if (isLoading) return <LoadingSkeleton />;\n  if (error) return <ErrorAlert error={error} />;\n  if (!data) return <EmptyState />;\n\n  return <div>{/* content */}</div>;\n}\n```\n\n### Pattern 3: Tier-Gated Feature\n```tsx\nconst { user } = useAuth();\nconst hasAccess = user?.tier && ['pro', 'premium'].includes(user.tier);\n\nif (!hasAccess) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Feature Locked</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p>This feature requires Pro or Premium tier</p>\n        <Button>Upgrade Now</Button>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n---\n\n**Be concise but thorough. Focus on:**\n1. Is it integrated? (most important)\n2. Does it work? (API, auth, errors)\n3. Does it follow patterns? (UI, TypeScript)\n4. What needs to be fixed? (specific code)\n\n**If everything is good:**\n‚úÖ **Component is properly integrated and follows all patterns!**"
  }
}
