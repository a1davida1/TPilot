{
  "enabled": true,
  "name": "New File Integration Validator",
  "description": "Validates new files for completeness, proper integration, and ensures they follow project patterns. Checks imports, exports, component registration, routing, and API integration.",
  "version": "1",
  "when": {
    "type": "fileCreated",
    "patterns": [
      "client/src/**/*.tsx",
      "client/src/**/*.ts",
      "server/**/*.ts",
      "shared/**/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "A new file was just created. Validate it for completeness and proper integration into the application.\n\n**CRITICAL VALIDATION CHECKLIST:**\n\n## 1. TypeScript Compliance\n- [ ] No `any` types (use explicit types or `unknown`)\n- [ ] No non-null assertions `!` (use optional chaining)\n- [ ] All functions have explicit return types\n- [ ] All parameters are typed\n- [ ] Imports are correct and use path aliases (@/, @shared/, @server/)\n- [ ] Exports are properly defined\n\n## 2. Frontend Component Integration (if .tsx file in client/src/)\n\n### Component Structure:\n- [ ] Component follows naming convention (PascalCase)\n- [ ] Component has proper TypeScript interface for props\n- [ ] Component uses shadcn/ui components (not raw HTML)\n- [ ] Component has proper error boundaries\n- [ ] Component has loading states\n\n### Integration Points:\n- [ ] **Is component imported anywhere?** Check:\n  - `client/src/App.tsx` (for routes)\n  - `client/src/pages/*.tsx` (for page components)\n  - Other components that should use it\n- [ ] **If it's a page component:**\n  - Is it added to routing in `App.tsx`?\n  - Does it have proper route path?\n  - Is it in the correct directory (`client/src/pages/`)?\n- [ ] **If it's a reusable component:**\n  - Is it exported from `client/src/components/`?\n  - Is it documented with JSDoc comments?\n  - Does it have example usage?\n- [ ] **If it uses API calls:**\n  - Uses `apiRequest` from `@/lib/queryClient`\n  - Uses TanStack Query (useQuery/useMutation)\n  - Has proper error handling\n  - Has loading states\n- [ ] **If it requires authentication:**\n  - Uses `useAuth` hook\n  - Checks user tier if needed\n  - Shows upgrade prompt for locked features\n\n### UI/UX Standards:\n- [ ] Uses Tailwind CSS (no inline styles)\n- [ ] Responsive design (mobile-first)\n- [ ] Accessible (ARIA labels, keyboard navigation)\n- [ ] Consistent with existing UI patterns\n- [ ] Uses proper spacing (p-4, gap-4, space-y-4)\n- [ ] Uses proper typography (text-sm, font-medium, etc.)\n\n## 3. Backend Service/Route Integration (if .ts file in server/)\n\n### Service Layer:\n- [ ] **If it's a service file:**\n  - Exports singleton instance\n  - Has proper error handling with logger\n  - Uses database connection from `../db.js`\n  - Returns typed responses\n  - Has JSDoc comments\n\n### API Routes:\n- [ ] **If it's a route file:**\n  - Exports router instance\n  - Is registered in `server/routes.ts`\n  - Uses `authenticateToken` middleware\n  - Has tier-based access control if needed\n  - Returns consistent response format: `{ data: T }` or `{ error: string }`\n  - Has proper error handling\n  - Logs errors with `logger.error()`\n\n### Database Integration:\n- [ ] Uses Drizzle ORM (not raw SQL)\n- [ ] Imports schema from `@shared/schema`\n- [ ] Has proper indexes for queries\n- [ ] Uses transactions for multi-step operations\n\n## 4. Shared Types/Schema (if .ts file in shared/)\n- [ ] Exports types properly\n- [ ] Uses Zod for validation schemas\n- [ ] Compatible with both frontend and backend\n- [ ] No Node.js-specific imports\n- [ ] No browser-specific imports\n\n## 5. Testing & Quality\n- [ ] File has no TypeScript errors (run getDiagnostics)\n- [ ] Follows project naming conventions\n- [ ] Has proper file location\n- [ ] No console.log statements (use logger)\n- [ ] No hardcoded values (use env vars or constants)\n\n## 6. Documentation\n- [ ] File has header comment explaining purpose\n- [ ] Complex functions have JSDoc comments\n- [ ] If it's a new feature, is it documented in:\n  - `.kiro/steering/platform guide.md`?\n  - Relevant spec files?\n  - README.md if user-facing?\n\n---\n\n**VALIDATION OUTPUT FORMAT:**\n\n```markdown\n# New File Integration Report\n\n## File: [filename]\n**Type:** [Component/Service/Route/Schema]\n**Location:** [path]\n\n## ‚úÖ Passed Checks (X/Y)\n- ‚úÖ TypeScript compliance\n- ‚úÖ Proper imports/exports\n- ‚úÖ [other passed checks]\n\n## ‚ùå Failed Checks (X issues found)\n\n### CRITICAL Issues (must fix immediately):\n1. **Missing Route Registration**\n   - File: `client/src/pages/new-page.tsx`\n   - Issue: Page component not added to routing in `App.tsx`\n   - Fix: Add route in `client/src/App.tsx`:\n   ```tsx\n   <Route path=\"/new-page\" component={NewPage} />\n   ```\n\n2. **Missing API Endpoint Registration**\n   - File: `server/routes/new-feature.ts`\n   - Issue: Router not registered in `server/routes.ts`\n   - Fix: Add to `server/routes.ts`:\n   ```typescript\n   import { newFeatureRouter } from './routes/new-feature.js';\n   app.use('/api/new-feature', newFeatureRouter);\n   ```\n\n### ‚ö†Ô∏è Warnings (should fix):\n1. **Missing JSDoc Comments**\n   - Add documentation for exported functions\n\n2. **No Error Boundary**\n   - Component should handle errors gracefully\n\n## üîß Integration Steps Required\n\n### Step 1: Register Component/Route\n[Specific instructions]\n\n### Step 2: Update Documentation\n[Specific files to update]\n\n### Step 3: Test Integration\n[How to verify it works]\n\n## üìù Suggested Improvements\n- Consider adding loading skeleton\n- Add unit tests\n- Add E2E test coverage\n\n## ‚úÖ Ready for Use?\n**Status:** [YES/NO - needs fixes]\n\n**If NO, complete these tasks first:**\n1. [Task 1]\n2. [Task 2]\n```\n\n---\n\n**IMPORTANT INTEGRATION PATTERNS:**\n\n### New Page Component Pattern:\n```typescript\n// 1. Create component in client/src/pages/\n// 2. Add to App.tsx routing:\nimport { NewPage } from '@/pages/new-page';\n<Route path=\"/new-page\" component={NewPage} />\n\n// 3. Add navigation link if needed:\n// In sidebar/nav component\n```\n\n### New API Endpoint Pattern:\n```typescript\n// 1. Create route in server/routes/\n// 2. Register in server/routes.ts:\nimport { newRouter } from './routes/new-feature.js';\napp.use('/api/new-feature', newRouter);\n\n// 3. Add to API documentation\n```\n\n### New Reusable Component Pattern:\n```typescript\n// 1. Create in client/src/components/\n// 2. Export from index.ts if needed\n// 3. Import and use in parent components\n// 4. Document props with TypeScript interface\n```\n\n### New Service Pattern:\n```typescript\n// 1. Create in server/services/\n// 2. Export singleton instance\n// 3. Import in routes that need it\n// 4. Add to platform guide.md\n```\n\n---\n\n**After validation, provide:**\n1. Clear list of what needs to be fixed\n2. Exact code snippets for integration\n3. Files that need to be modified\n4. Order of operations (what to do first)\n5. How to test the integration works\n\n**If everything is perfect, say:**\n‚úÖ **File is complete and properly integrated!** No action needed."
  }
}
