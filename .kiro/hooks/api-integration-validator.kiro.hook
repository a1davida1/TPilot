{
  "enabled": true,
  "name": "API Integration Validator",
  "description": "Validates that API endpoints are properly connected between frontend and backend. Checks route registration, type safety, error handling, and authentication.",
  "version": "1",
  "when": {
    "type": "fileSaved",
    "patterns": [
      "server/routes/**/*.ts",
      "server/services/**/*.ts",
      "client/src/hooks/**/*.ts",
      "client/src/lib/api*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "An API-related file was saved. Validate the frontend-backend integration.\n\n**FULL-STACK INTEGRATION CHECK:**\n\n## 1. Backend Route Registration (if server/routes/*.ts)\n\n### Route File Checklist:\n- [ ] Exports router instance: `export { router as nameRouter }`\n- [ ] Uses `authenticateToken` middleware\n- [ ] Has tier-based access control if needed\n- [ ] Returns consistent format: `{ data: T }` or `{ error: string }`\n- [ ] Logs errors with `logger.error()`\n- [ ] Has try-catch blocks\n\n### Registration Check:\n- [ ] **Is router registered in `server/routes.ts`?**\n  - Search for import statement\n  - Search for `app.use()` registration\n  - If missing, provide exact code to add\n\n### Example Registration:\n```typescript\n// In server/routes.ts\nimport { newFeatureRouter } from './routes/new-feature.js';\napp.use('/api/new-feature', newFeatureRouter);\n```\n\n## 2. Service Layer Integration (if server/services/*.ts)\n\n### Service Checklist:\n- [ ] Exports singleton instance\n- [ ] Uses database from `../db.js`\n- [ ] Uses Drizzle ORM (not raw SQL)\n- [ ] Has proper error handling\n- [ ] Returns typed responses\n- [ ] Has JSDoc comments\n\n### Service Usage:\n- [ ] **Is service imported in routes?**\n  - Search for imports of this service\n  - If unused, suggest where to use it\n\n## 3. Frontend API Integration\n\n### Check for Frontend Usage:\n- [ ] **Is this endpoint called from frontend?**\n  - Search for API calls to this endpoint\n  - Check `client/src/` for `apiRequest` calls\n  - Check for `useQuery` or `useMutation` hooks\n\n### Frontend Pattern Check:\n```typescript\n// Should use this pattern:\nconst { data, isLoading, error } = useQuery({\n  queryKey: ['/api/endpoint'],\n  queryFn: async () => {\n    return apiRequest<ResponseType>('GET', '/api/endpoint');\n  },\n});\n```\n\n## 4. Type Safety\n\n### Shared Types:\n- [ ] Response types defined in `shared/`?\n- [ ] Frontend uses correct types?\n- [ ] Backend returns correct types?\n- [ ] No `any` types in API calls?\n\n### Type Consistency:\n```typescript\n// Backend (server/routes/feature.ts)\ninterface FeatureResponse {\n  data: Feature[];\n}\nres.json({ data: features });\n\n// Frontend (client/src/pages/feature.tsx)\nconst { data } = useQuery<FeatureResponse>(...);\n```\n\n## 5. Authentication & Authorization\n\n### Backend Auth:\n- [ ] Uses `authenticateToken(true)` for protected routes\n- [ ] Checks `req.user?.id` for user context\n- [ ] Validates tier access if needed:\n```typescript\nif (!['pro', 'premium'].includes(user.tier)) {\n  return res.status(403).json({ \n    error: 'Feature requires Pro tier',\n    requiredTier: 'pro'\n  });\n}\n```\n\n### Frontend Auth:\n- [ ] Uses `useAuth` hook\n- [ ] Checks authentication before API call\n- [ ] Shows upgrade prompt for tier-locked features\n\n## 6. Error Handling\n\n### Backend Errors:\n- [ ] Try-catch blocks around async operations\n- [ ] Logs errors with context\n- [ ] Returns user-friendly error messages\n- [ ] Uses proper HTTP status codes\n\n### Frontend Errors:\n- [ ] Checks `error` from useQuery\n- [ ] Displays error to user\n- [ ] Provides retry mechanism\n- [ ] Logs errors for debugging\n\n---\n\n**VALIDATION OUTPUT:**\n\n```markdown\n# API Integration Report\n\n## File: [filename]\n**Type:** [Route/Service/Hook]\n**Endpoints:** [list of endpoints]\n\n## ✅ Backend Status\n\n### Route Registration:\n- ✅ Router exported correctly\n- ✅ Registered in `server/routes.ts`\n- ✅ Path: `/api/feature`\n\n### Authentication:\n- ✅ Uses `authenticateToken(true)`\n- ✅ Tier check: Pro/Premium\n- ✅ Returns 403 for unauthorized\n\n### Error Handling:\n- ✅ Try-catch blocks present\n- ✅ Logs errors with logger\n- ✅ Returns consistent error format\n\n## ✅ Frontend Integration\n\n### API Calls Found:\n1. **`client/src/pages/feature.tsx`**\n   - Uses: `useQuery` with `/api/feature`\n   - Type: `FeatureResponse`\n   - Error handling: ✅\n   - Loading state: ✅\n\n2. **`client/src/components/FeatureWidget.tsx`**\n   - Uses: `useMutation` for POST\n   - Invalidates queries: ✅\n   - Shows toast on success: ✅\n\n## ❌ Issues Found\n\n### CRITICAL:\n1. **Route Not Registered**\n   - File: `server/routes/new-feature.ts`\n   - Issue: Router not added to `server/routes.ts`\n   - Fix:\n   ```typescript\n   // Add to server/routes.ts:\n   import { newFeatureRouter } from './routes/new-feature.js';\n   app.use('/api/new-feature', newFeatureRouter);\n   ```\n\n2. **Missing Frontend Integration**\n   - Endpoint: `GET /api/feature/stats`\n   - Issue: No frontend component calls this endpoint\n   - Suggestion: Add to analytics dashboard\n\n### WARNINGS:\n1. **Missing Type Safety**\n   - Line 45: Response not typed\n   - Add interface in `shared/types.ts`\n\n2. **No Error Handling**\n   - Line 67: No try-catch block\n   - Could crash server on error\n\n## 🔧 Integration Steps\n\n### Step 1: Register Backend Route\n```typescript\n// In server/routes.ts, add:\nimport { featureRouter } from './routes/feature.js';\napp.use('/api/feature', featureRouter);\n```\n\n### Step 2: Create Frontend Hook (if needed)\n```typescript\n// In client/src/hooks/useFeature.ts:\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function useFeature() {\n  return useQuery({\n    queryKey: ['/api/feature'],\n    queryFn: async () => {\n      return apiRequest<FeatureResponse>('GET', '/api/feature');\n    },\n  });\n}\n```\n\n### Step 3: Use in Component\n```typescript\n// In client/src/pages/feature-page.tsx:\nimport { useFeature } from '@/hooks/useFeature';\n\nexport function FeaturePage() {\n  const { data, isLoading, error } = useFeature();\n  \n  if (isLoading) return <LoadingSkeleton />;\n  if (error) return <ErrorAlert error={error} />;\n  \n  return <div>{/* Use data */}</div>;\n}\n```\n\n## 📊 Integration Map\n\n```\nBackend                    Frontend\n─────────────────────────────────────────\nGET /api/feature      →   useFeature() hook\n  ↓                         ↓\nfeatureService        →   FeaturePage.tsx\n  ↓                         ↓\nDatabase (Drizzle)    →   Display data\n```\n\n## ✅ Status: [COMPLETE/NEEDS FIXES]\n\n**If NEEDS FIXES:**\n1. [Fix 1 with code]\n2. [Fix 2 with code]\n3. [Fix 3 with code]\n\n**Test Integration:**\n1. Start server: `npm run dev`\n2. Check endpoint: `curl http://localhost:5000/api/feature`\n3. Check frontend: Navigate to feature page\n4. Verify data loads correctly\n```\n\n---\n\n**COMMON INTEGRATION ISSUES:**\n\n### Issue 1: Route Not Registered\n**Symptom:** 404 error when calling endpoint  \n**Fix:** Add to `server/routes.ts`\n\n### Issue 2: CORS Error\n**Symptom:** Frontend can't call API  \n**Fix:** Check CORS config in `server/app.ts`\n\n### Issue 3: Type Mismatch\n**Symptom:** TypeScript errors in frontend  \n**Fix:** Ensure shared types match backend response\n\n### Issue 4: Missing Auth\n**Symptom:** Unauthorized errors  \n**Fix:** Add `authenticateToken` middleware\n\n### Issue 5: No Error Handling\n**Symptom:** Server crashes on error  \n**Fix:** Add try-catch blocks\n\n---\n\n**Be specific and actionable:**\n1. Show exact code to add\n2. Show exact files to modify\n3. Show how to test it works\n4. Explain why it's needed\n\n**If everything is perfect:**\n✅ **API is fully integrated and working correctly!**"
  }
}
