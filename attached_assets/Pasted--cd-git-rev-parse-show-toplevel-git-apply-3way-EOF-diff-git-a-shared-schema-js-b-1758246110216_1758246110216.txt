 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/shared/schema.js b/shared/schema.js
index 497de8317bdeb79eefeb9feec82b28d6608516e7..d9be272fe94d1976e1819aa4cc79eb38a3a14361 100644
--- a/shared/schema.js
+++ b/shared/schema.js
@@ -1,44 +1,63 @@
 import { pgTable, serial, varchar, text, integer, timestamp, jsonb, boolean, unique } from "drizzle-orm/pg-core";
 import { createInsertSchema } from "drizzle-zod";
 export const users = pgTable("users", {
     id: serial("id").primaryKey(),
     username: varchar("username", { length: 255 }).unique().notNull(),
-    password: varchar("password", { length: 255 }).notNull().default(''),
-    email: varchar("email", { length: 255 }),
+    password: varchar("password", { length: 255 }).notNull().default(""),
+    email: varchar("email", { length: 255 }).unique(),
+    role: varchar("role", { length: 50 }).default("user"),
+    isAdmin: boolean("is_admin").default(false),
     emailVerified: boolean("email_verified").default(false).notNull(),
     firstName: varchar("first_name", { length: 255 }), // Added missing column
     lastName: varchar("last_name", { length: 255 }), // Added missing column
     tier: varchar("tier", { length: 50 }).default("free").notNull(), // free, pro, premium, pro_plus
-    subscriptionStatus: varchar("subscription_status", { length: 50 }).default("free").notNull(), // Added missing column
+    mustChangePassword: boolean("must_change_password").default(false).notNull(),
+    subscriptionStatus: varchar("subscription_status", { length: 50 }).default("inactive").notNull(), // Added missing column
     trialEndsAt: timestamp("trial_ends_at"), // For trial management
     provider: varchar("provider", { length: 50 }), // google, facebook, reddit
     providerId: varchar("provider_id", { length: 255 }),
-    avatar: varchar("avatar", { length: 500 }),
+    avatar: text("avatar"),
+    bio: text("bio"),
     referralCodeId: integer("referral_code_id"), // Will reference referralCodes.id
     referredBy: integer("referred_by"), // Added missing column
+    redditUsername: varchar("reddit_username", { length: 255 }),
+    redditAccessToken: text("reddit_access_token"),
+    redditRefreshToken: text("reddit_refresh_token"),
+    redditId: varchar("reddit_id", { length: 255 }),
+    stripeCustomerId: varchar("stripe_customer_id", { length: 255 }),
+    stripeSubscriptionId: varchar("stripe_subscription_id", { length: 255 }),
+    bannedAt: timestamp("banned_at"),
+    suspendedUntil: timestamp("suspended_until"),
+    banReason: text("ban_reason"),
+    suspensionReason: text("suspension_reason"),
     createdAt: timestamp("created_at").defaultNow(),
+    updatedAt: timestamp("updated_at").defaultNow(),
+    lastLogin: timestamp("last_login"),
+    passwordResetAt: timestamp("password_reset_at"),
+    deletedAt: timestamp("deleted_at"),
+    isDeleted: boolean("is_deleted").default(false),
 });
 export const contentGenerations = pgTable("content_generations", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id),
     platform: varchar("platform", { length: 50 }).notNull(),
     style: varchar("style", { length: 50 }).notNull(),
     theme: varchar("theme", { length: 50 }).notNull(),
     titles: jsonb("titles").$type().notNull(),
     content: text("content").notNull(),
     photoInstructions: jsonb("photo_instructions").$type().notNull(),
     prompt: text("prompt"),
     subreddit: varchar("subreddit", { length: 100 }),
     allowsPromotion: boolean("allows_promotion").default(false),
     generationType: varchar("generation_type", { length: 50 }).default("ai").notNull(),
     createdAt: timestamp("created_at").defaultNow(),
 });
 export const userSamples = pgTable("user_samples", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id).notNull(),
     title: varchar("title", { length: 255 }).notNull(),
     content: text("content").notNull(),
     platform: varchar("platform", { length: 50 }).notNull(),
     style: varchar("style", { length: 50 }),
     performanceScore: integer("performance_score"), // 0-100 score
     tags: jsonb("tags"),
diff --git a/shared/schema.js b/shared/schema.js
index 497de8317bdeb79eefeb9feec82b28d6608516e7..d9be272fe94d1976e1819aa4cc79eb38a3a14361 100644
--- a/shared/schema.js
+++ b/shared/schema.js
@@ -52,50 +71,56 @@ export const userPreferences = pgTable("user_preferences", {
     userId: integer("user_id").references(() => users.id).unique().notNull(),
     writingStyle: jsonb("writing_style"), // tone, voice, formality level
     contentPreferences: jsonb("content_preferences"), // preferred themes, topics
     prohibitedWords: jsonb("prohibited_words"), // words to avoid
     photoStyle: jsonb("photo_style"), // preferred photo instructions
     platformSettings: jsonb("platform_settings"), // platform-specific preferences
     fineTuningEnabled: boolean("fine_tuning_enabled").default(false),
     createdAt: timestamp("created_at").defaultNow(),
     updatedAt: timestamp("updated_at").defaultNow(),
 });
 // Lead model for waitlist functionality
 export const leads = pgTable("leads", {
     id: varchar("id", { length: 25 }).primaryKey(),
     email: varchar("email", { length: 255 }).unique().notNull(),
     platformTags: jsonb("platform_tags").$type().notNull(), // ["reddit","x","onlyfans","fansly"]
     painPoint: text("pain_point"),
     utmSource: varchar("utm_source", { length: 255 }),
     utmMedium: varchar("utm_medium", { length: 255 }),
     utmCampaign: varchar("utm_campaign", { length: 255 }),
     utmContent: varchar("utm_content", { length: 255 }),
     utmTerm: varchar("utm_term", { length: 255 }),
     referrer: varchar("referrer", { length: 500 }),
     confirmedAt: timestamp("confirmed_at"),
     createdAt: timestamp("created_at").defaultNow(),
 });
+export const verificationTokens = pgTable("verification_tokens", {
+    id: serial("id").primaryKey(),
+    userId: integer("user_id").references(() => users.id).notNull(),
+    token: varchar("token", { length: 255 }).unique().notNull(),
+    expiresAt: timestamp("expires_at").notNull(),
+});
 export const userImages = pgTable("user_images", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id).notNull(),
     filename: varchar("filename", { length: 255 }).notNull(),
     originalName: varchar("original_name", { length: 255 }).notNull(),
     url: varchar("url", { length: 500 }).notNull(),
     mimeType: varchar("mime_type", { length: 100 }).notNull(),
     size: integer("size").notNull(),
     isProtected: boolean("is_protected").default(false),
     protectionLevel: varchar("protection_level", { length: 50 }).default("none"),
     tags: jsonb("tags"),
     metadata: jsonb("metadata"),
     createdAt: timestamp("created_at").defaultNow(),
     updatedAt: timestamp("updated_at").defaultNow(),
 });
 // New tables for Phase 1 expansion
 export const creatorAccounts = pgTable("creator_accounts", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id).notNull(),
     platform: varchar("platform", { length: 50 }).notNull(), // "reddit"
     handle: varchar("handle", { length: 100 }).notNull(),
     platformUsername: varchar("platform_username", { length: 255 }), // Added missing column
     oauthToken: text("oauth_token").notNull(),
     oauthRefresh: text("oauth_refresh").notNull(),
     status: varchar("status", { length: 20 }).default("ok").notNull(), // "ok" | "limited" | "banned"
diff --git a/shared/schema.js b/shared/schema.js
index 497de8317bdeb79eefeb9feec82b28d6608516e7..d9be272fe94d1976e1819aa4cc79eb38a3a14361 100644
--- a/shared/schema.js
+++ b/shared/schema.js
@@ -122,50 +147,70 @@ export const postTemplates = pgTable("post_templates", {
     updatedAt: timestamp("updated_at").defaultNow().notNull(),
 });
 export const postPreviews = pgTable("post_previews", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id).notNull(),
     subreddit: varchar("subreddit", { length: 100 }).notNull(),
     titlePreview: text("title_preview").notNull(),
     bodyPreview: text("body_preview").notNull(),
     policyState: varchar("policy_state", { length: 10 }).notNull(), // "ok" | "warn" | "block"
     warnings: jsonb("warnings").notNull(),
     createdAt: timestamp("created_at").defaultNow().notNull(),
 });
 export const postJobs = pgTable("post_jobs", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id).notNull(),
     subreddit: varchar("subreddit", { length: 100 }).notNull(),
     titleFinal: text("title_final").notNull(),
     bodyFinal: text("body_final").notNull(),
     mediaKey: varchar("media_key", { length: 255 }),
     scheduledAt: timestamp("scheduled_at").notNull(),
     status: varchar("status", { length: 20 }).default("queued").notNull(), // "queued" | "sent" | "failed" | "paused"
     resultJson: jsonb("result_json"),
     createdAt: timestamp("created_at").defaultNow().notNull(),
     updatedAt: timestamp("updated_at").defaultNow().notNull(),
 });
+export const redditCommunities = pgTable("reddit_communities", {
+    id: varchar("id", { length: 100 }).primaryKey(),
+    name: varchar("name", { length: 255 }).notNull(),
+    displayName: varchar("display_name", { length: 255 }).notNull(),
+    members: integer("members").notNull(),
+    engagementRate: integer("engagement_rate").notNull(),
+    category: varchar("category", { length: 50 }).notNull(),
+    verificationRequired: boolean("verification_required").default(false).notNull(),
+    promotionAllowed: varchar("promotion_allowed", { length: 20 }).default("no").notNull(),
+    postingLimits: jsonb("posting_limits"),
+    rules: jsonb("rules"),
+    bestPostingTimes: jsonb("best_posting_times").$type(),
+    averageUpvotes: integer("average_upvotes"),
+    successProbability: integer("success_probability"),
+    growthTrend: varchar("growth_trend", { length: 20 }),
+    modActivity: varchar("mod_activity", { length: 20 }),
+    description: text("description"),
+    tags: jsonb("tags").$type(),
+    competitionLevel: varchar("competition_level", { length: 20 })
+});
 export const subscriptions = pgTable("subscriptions", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id).unique().notNull(),
     status: varchar("status", { length: 20 }).notNull(), // "active" | "past_due" | "canceled"
     plan: varchar("plan", { length: 20 }).notNull(), // "free" | "pro"
     priceCents: integer("price_cents").notNull(),
     processor: varchar("processor", { length: 20 }).notNull(), // "ccbill" | "segpay" | "epoch" | "crypto"
     processorSubId: varchar("processor_sub_id", { length: 255 }),
     currentPeriodEnd: timestamp("current_period_end"),
     createdAt: timestamp("created_at").defaultNow().notNull(),
     updatedAt: timestamp("updated_at").defaultNow().notNull(),
 });
 export const invoices = pgTable("invoices", {
     id: serial("id").primaryKey(),
     subscriptionId: integer("subscription_id").references(() => subscriptions.id).notNull(),
     amountCents: integer("amount_cents").notNull(),
     status: varchar("status", { length: 20 }).notNull(), // "paid" | "failed" | "refunded"
     processor: varchar("processor", { length: 20 }).notNull(),
     processorRef: varchar("processor_ref", { length: 255 }),
     referralCodeId: integer("referral_code_id").references(() => referralCodes.id), // Phase 5: Referral simplification
     createdAt: timestamp("created_at").defaultNow().notNull(),
 });
 export const referralCodes = pgTable("referral_codes", {
     id: serial("id").primaryKey(),
     code: varchar("code", { length: 50 }).unique().notNull(),
diff --git a/shared/schema.js b/shared/schema.js
index 497de8317bdeb79eefeb9feec82b28d6608516e7..d9be272fe94d1976e1819aa4cc79eb38a3a14361 100644
--- a/shared/schema.js
+++ b/shared/schema.js
@@ -248,45 +293,47 @@ export const postRateLimits = pgTable("post_rate_limits", {
     userId: integer("user_id").references(() => users.id).notNull(),
     subreddit: varchar("subreddit", { length: 100 }).notNull(),
     lastPostAt: timestamp("last_post_at").notNull(),
     postCount24h: integer("post_count_24h").default(0).notNull(),
     createdAt: timestamp("created_at").defaultNow().notNull(),
     updatedAt: timestamp("updated_at").defaultNow().notNull(),
 }, (table) => ({
     userSubredditIdx: unique("post_rate_limits_user_subreddit_idx").on(table.userId, table.subreddit),
 }));
 // Phase 5: Near-duplicate detection
 export const postDuplicates = pgTable("post_duplicates", {
     id: serial("id").primaryKey(),
     userId: integer("user_id").references(() => users.id).notNull(),
     contentHash: varchar("content_hash", { length: 64 }).notNull(), // MinHash or Levenshtein-based hash
     title: text("title").notNull(),
     body: text("body").notNull(),
     subreddit: varchar("subreddit", { length: 100 }).notNull(),
     createdAt: timestamp("created_at").defaultNow().notNull(),
 });
 // Insert schemas for new tables  
 export const insertCreatorAccountSchema = createInsertSchema(creatorAccounts);
 export const insertSubredditRuleSchema = createInsertSchema(subredditRules);
 export const insertPostTemplateSchema = createInsertSchema(postTemplates);
 export const insertPostPreviewSchema = createInsertSchema(postPreviews);
 export const insertPostJobSchema = createInsertSchema(postJobs);
+export const insertRedditCommunitySchema = createInsertSchema(redditCommunities);
 export const insertSubscriptionSchema = createInsertSchema(subscriptions);
 export const insertInvoiceSchema = createInsertSchema(invoices);
 export const insertReferralCodeSchema = createInsertSchema(referralCodes);
 export const insertReferralSchema = createInsertSchema(referrals);
 export const insertEventLogSchema = createInsertSchema(eventLogs);
 export const insertFeatureFlagSchema = createInsertSchema(featureFlags);
 export const insertMediaAssetSchema = createInsertSchema(mediaAssets);
 export const insertMediaUsageSchema = createInsertSchema(mediaUsages);
 export const insertAiGenerationSchema = createInsertSchema(aiGenerations);
 export const insertQueueJobSchema = createInsertSchema(queueJobs);
 export const insertPostRateLimitSchema = createInsertSchema(postRateLimits);
 export const insertPostDuplicateSchema = createInsertSchema(postDuplicates);
 // Phase 5 schemas already included above
 // Insert schemas for existing tables
 export const insertUserSchema = createInsertSchema(users);
 export const insertContentGenerationSchema = createInsertSchema(contentGenerations);
 export const insertUserSampleSchema = createInsertSchema(userSamples);
 export const insertUserPreferenceSchema = createInsertSchema(userPreferences);
 export const insertUserImageSchema = createInsertSchema(userImages);
 export const insertLeadSchema = createInsertSchema(leads);
+export const insertVerificationTokenSchema = createInsertSchema(verificationTokens);
 
EOF
)