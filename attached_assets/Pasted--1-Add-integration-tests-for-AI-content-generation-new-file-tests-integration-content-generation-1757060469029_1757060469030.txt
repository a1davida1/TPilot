# 1. Add integration tests for AI content generation
new file: tests/integration/content-generation.test.ts
@@
+import request from 'supertest';
+import app from '../../server/index';
+// ...mock OpenAI/Gemini and verify fallback/ratelimit logic…

# 2. Upload/ImageShield integration tests
new file: tests/integration/upload.test.ts
@@
+it('scans, protects and watermarks uploaded image', async () => {
+  const res = await request(app)
+    .post('/api/upload/image')
+    .attach('file', '__tests__/fixtures/safe.png');
+  expect(res.status).toBe(200);
+});

# 3. Strict typing + typed Sentry import
edit: server/index.ts
@@
-import type { Express } from 'express';
-let Sentry: any | undefined;
+import type { Express } from 'express';
+import type * as SentryNode from '@sentry/node';
+let Sentry: typeof SentryNode | undefined;
@@
-  registerRoutes(app, Sentry as any);
+  registerRoutes(app, Sentry);

# 4. Refactor bootstrap
new file: server/bootstrap/logger.ts
+export const logger = winston.createLogger({ /* existing setup */ });
new file: server/bootstrap/queue.ts
+export function startQueue() { /* worker init */ }
edit: server/index.ts
@@
-import './queue';
+import { logger } from './bootstrap/logger';
+import { startQueue } from './bootstrap/queue';
+startQueue();

# 5. Replace console.log
find server -name '*.ts' -exec sed -i '' 's/console.log/logger.debug/g' {} +

# 6. Remove obsolete routes backup
git rm server/routes.ts.backup

# 7. Expand env validation
edit: server/middleware/security.ts
@@
-const required = ['NODE_ENV', 'JWT_SECRET', 'DATABASE_URL'];
+const required = ['NODE_ENV','JWT_SECRET','DATABASE_URL','REDIS_URL','STRIPE_SECRET_KEY','SENTRY_DSN'];

# 8. Validate upload protection level with Zod
edit: server/routes/upload.ts
@@
-import { Router } from 'express';
+import { Router } from 'express';
+import { z } from 'zod';
@@
-const { protectionLevel } = req.body;
+const body = z.object({ protectionLevel: z.enum(['light','standard','heavy']).default('standard') }).parse(req.body);
+const { protectionLevel } = body;

# 9. Enable CSRF
edit: server/routes.ts
@@
-import csrf from 'csurf';
+import csrf from 'csurf';
+const csrfProtection = csrf();
@@
-app.use(router);
+app.use(csrfProtection, router);

#10. Real MIME sniffing
edit: server/routes/upload.ts
@@
-import fileType from 'file-type';
-const type = await fileType.fromBuffer(fileBuffer);
-if (!type || !['image/png','image/jpeg'].includes(type.mime)) throw new Error('Unsupported type');
+import { fileTypeFromBuffer } from 'file-type';
+const type = await fileTypeFromBuffer(fileBuffer);
+if (!type || !['image/png','image/jpeg'].includes(type.mime)) throw new Error('Unsupported type');

#11. Apply authLimiter
edit: server/auth.ts
@@
-router.post('/login', authLimiter, loginHandler);
-router.post('/signup', authLimiter, signupHandler);

#12. Centralized validation
new file: server/middleware/validation.ts
+export const validate = schema => (req,res,next)=>{ schema.parse({ body:req.body }); next(); };
edit routes to use `validate(schema)`.

#13. Stream uploads
edit: server/routes/upload.ts
@@
-const buffer = await fs.promises.readFile(tmpPath);
-applyImageShieldProtection(buffer);
+const stream = fs.createReadStream(tmpPath);
+await applyImageShieldProtection(stream);

#14. Winston log rotation
edit: server/bootstrap/logger.ts
@@
+import 'winston-daily-rotate-file';
+logger.add(new DailyRotateFile({ filename:'logs/%DATE%-combined.log', maxSize:'10m', maxFiles:'14d' }));

#15. Validate SENTRY_DSN
edit: server/bootstrap/logger.ts (or index)
@@
-if (process.env.SENTRY_DSN) Sentry.init({ dsn: process.env.SENTRY_DSN });
+if (process.env.SENTRY_DSN?.startsWith('http')) Sentry.init({ dsn: process.env.SENTRY_DSN });

#16. Catch‑all 404
edit: server/index.ts
@@
-registerRoutes(app);
+registerRoutes(app);
+app.use('*',(req,res)=>res.status(404).json({message:'Not found'}));

#17. Portable build script
remove: build-production.sh
new file: scripts/build.js
+import { execSync } from 'child_process';
+execSync('npm run build && cp -r public dist', { stdio:'inherit' });
edit package.json: `"build": "node scripts/build.js"`

#18. Lint script
edit: package.json
@@
+"lint": "eslint . --ext .ts,.tsx",

#19. GitHub Actions CI
new file: .github/workflows/ci.yml
+name: CI
+on: [push, pull_request]
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    steps: [ { uses: actions/checkout@v3 }, { uses: actions/setup-node@v3, with:{ node-version:18 } }, { run:'npm ci' }, { run:'npm run lint' }, { run:'npm test' } ]

#20. .env.example
new file: .env.example
+DATABASE_URL=
+JWT_SECRET=
+REDIS_URL=
+STRIPE_SECRET_KEY=
+SENTRY_DSN=
