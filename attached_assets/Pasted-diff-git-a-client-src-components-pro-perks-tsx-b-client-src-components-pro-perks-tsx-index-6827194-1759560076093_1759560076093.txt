diff --git a/client/src/components/pro-perks.tsx b/client/src/components/pro-perks.tsx
index 682719453e362a8106a5763bc4d68618ee4e99bc..ddc9bef9104bc1543786e87d3895edfc79431bd8 100644
--- a/client/src/components/pro-perks.tsx
+++ b/client/src/components/pro-perks.tsx
@@ -1,42 +1,42 @@
 import React from "react";
 import { useState, useCallback, useMemo } from "react";
+import Link from "next/link";
 import { useQuery } from "@tanstack/react-query";
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
 import { Button } from "@/components/ui/button";
 import { Badge } from "@/components/ui/badge";
 import { Input } from "@/components/ui/input";
 import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
 import { 
   Gift,
   Search,
   Sparkles,
   CheckCircle,
   Users,
   ExternalLink,
   Shield,
-  Copy,
   Clock,
   Eye,
   Info,
   Loader2,
   Globe,
   BookOpen,
   Percent,
   Star,
   DollarSign
 } from "lucide-react";
 import { useToast } from "@/hooks/use-toast";
 import type { LucideIcon } from "lucide-react";
 
 interface ProPerk {
   id: string;
   name: string;
   category: "affiliate" | "integration" | "tools" | "community" | "pro";
   tier: "starter" | "pro";
   description: string;
   commissionRate?: string;
   requirements?: string[];
   signupProcess: string;
   estimatedEarnings: string;
   status: "available" | "application-required" | "coming-soon";
   officialLink?: string;
diff --git a/client/src/components/pro-perks.tsx b/client/src/components/pro-perks.tsx
index 682719453e362a8106a5763bc4d68618ee4e99bc..ddc9bef9104bc1543786e87d3895edfc79431bd8 100644
--- a/client/src/components/pro-perks.tsx
+++ b/client/src/components/pro-perks.tsx
@@ -97,53 +97,51 @@ const categoryMetadata: Record<ProPerk["category"], {
     icon: Gift,
     gradient: "from-rose-500/20 to-red-500/20"
   }
 };
 
 const statusStyles: Record<ProPerk["status"], { label: string; className: string }> = {
   available: {
     label: "Available",
     className: "bg-emerald-500/20 text-emerald-300 border-emerald-500/30"
   },
   "application-required": {
     label: "Application Required",
     className: "bg-yellow-500/20 text-yellow-300 border-yellow-500/30"
   },
   "coming-soon": {
     label: "Coming Soon",
     className: "bg-slate-500/20 text-slate-300 border-slate-500/30"
   }
 };
 
 export function ProPerks({ userTier: _userTier = "pro" }: ProPerksProps) {
   const [searchTerm, setSearchTerm] = useState("");
   const [activeCategory, setActiveCategory] = useState<CategoryFilter>("all");
   const [selectedPerk, setSelectedPerk] = useState<ProPerk | null>(null);
   const [instructionsByPerk, setInstructionsByPerk] = useState<Record<string, SignupInstructions>>({});
-  const [referralCodes, setReferralCodes] = useState<Record<string, string>>({});
   const [_instructionsLoading, setInstructionsLoading] = useState<string | null>(null);
-  const [referralLoading, setReferralLoading] = useState<string | null>(null);
   const { toast } = useToast();
 
   const sessionFetch = useCallback(
     async (input: RequestInfo | URL, init?: RequestInit) => {
       const response = await fetch(input, { ...init, credentials: "include" });
       return response;
     },
     []
   );
 
   // Fetch real resources from API
   const { data, isLoading, isError: _isError } = useQuery<ProResourcesResult>({
     queryKey: ["pro-resources"],
     queryFn: async () => {
       if (typeof window === "undefined") {
         return { perks: [], accessGranted: false } satisfies ProResourcesResult;
       }
 
       try {
         const response = await sessionFetch("/api/pro-resources");
 
         if (response.status === 401 || response.status === 403) {
           return { perks: [], accessGranted: false } satisfies ProResourcesResult;
         }
 
diff --git a/client/src/components/pro-perks.tsx b/client/src/components/pro-perks.tsx
index 682719453e362a8106a5763bc4d68618ee4e99bc..ddc9bef9104bc1543786e87d3895edfc79431bd8 100644
--- a/client/src/components/pro-perks.tsx
+++ b/client/src/components/pro-perks.tsx
@@ -246,102 +244,50 @@ export function ProPerks({ userTier: _userTier = "pro" }: ProPerksProps) {
       if (!response.ok) {
         throw new Error("Failed to load signup instructions");
       }
 
       const payload = await response.json() as { instructions: SignupInstructions };
       setInstructionsByPerk((previous) => ({
         ...previous,
         [perk.id]: payload.instructions
       }));
     } catch (error) {
       toast({
         title: "Unable to load instructions",
         description: error instanceof Error ? error.message : "Unexpected error loading perk guidance.",
         variant: "destructive"
       });
     } finally {
       setInstructionsLoading(null);
     }
   }, [instructionsByPerk, sessionFetch, toast]);
 
   const handleOpenPerk = useCallback((perk: ProPerk) => {
     setSelectedPerk(perk);
     void ensureInstructions(perk);
   }, [ensureInstructions]);
 
-  const handleGenerateReferral = useCallback(async (perk: ProPerk) => {
-    if (typeof window === "undefined") {
-      return;
-    }
-
-    try {
-      setReferralLoading(perk.id);
-      const response = await sessionFetch(`/api/pro-resources/${perk.id}/referral-code`, {
-        method: "POST"
-      });
-
-      if (response.status === 401 || response.status === 403) {
-        toast({
-          title: "Sign in required",
-          description: "Log in with your Pro account to generate referral codes.",
-          variant: "destructive"
-        });
-        return;
-      }
-
-      if (!response.ok) {
-        throw new Error("Failed to generate referral code");
-      }
-
-      const payload = await response.json() as { referralCode: string };
-      setReferralCodes((previous) => ({
-        ...previous,
-        [perk.id]: payload.referralCode
-      }));
-
-      if (window.navigator && window.navigator.clipboard) {
-        await window.navigator.clipboard.writeText(payload.referralCode);
-        toast({
-          title: "Referral Code Generated",
-          description: `Code "${payload.referralCode}" copied to clipboard!`,
-        });
-      } else {
-        toast({
-          title: "Referral Code Generated",
-          description: `Your code: ${payload.referralCode}`,
-        });
-      }
-    } catch (error) {
-      toast({
-        title: "Unable to generate referral",
-        description: error instanceof Error ? error.message : "Unexpected error generating referral code.",
-        variant: "destructive"
-      });
-    } finally {
-      setReferralLoading(null);
-    }
-  }, [sessionFetch, toast]);
 
   // Show empty state when no resources available or no access
   if (!isLoading && (!hasAccess || perks.length === 0)) {
     return (
       <Card className="bg-gray-900/50 backdrop-blur-xl border-white/10">
         <CardHeader>
           <CardTitle className="flex items-center gap-2">
             <Gift className="h-5 w-5 text-purple-400" />
             Pro Perks & Resources
           </CardTitle>
           <CardDescription>
             {!hasAccess 
               ? "Upgrade to Pro to access exclusive affiliate programs and monetization tools"
               : "Exclusive resources and discounts for Pro users"
             }
           </CardDescription>
         </CardHeader>
         <CardContent>
           <div className="text-center py-8">
             <Gift className="h-12 w-12 text-gray-400 mx-auto mb-4" />
             <p className="text-gray-400">
               {!hasAccess ? "Pro subscription required" : "Resources coming soon!"}
             </p>
             <p className="text-sm text-gray-500 mt-2">
               {!hasAccess 
diff --git a/client/src/components/pro-perks.tsx b/client/src/components/pro-perks.tsx
index 682719453e362a8106a5763bc4d68618ee4e99bc..ddc9bef9104bc1543786e87d3895edfc79431bd8 100644
--- a/client/src/components/pro-perks.tsx
+++ b/client/src/components/pro-perks.tsx
@@ -643,61 +589,47 @@ export function ProPerks({ userTier: _userTier = "pro" }: ProPerksProps) {
                               <li key={index}>{step}</li>
                             ))}
                           </ol>
                         </div>
                         <div>
                           <h4 className="font-medium text-purple-300 mb-2">Timeline:</h4>
                           <p className="text-sm text-gray-300">{instructionsByPerk[selectedPerk.id].timeline}</p>
                         </div>
                       </div>
                     </div>
                   )}
 
                   {/* Action Buttons */}
                   <div className="space-y-3">
                     {selectedPerk.officialLink && (
                       <Button 
                         className="w-full bg-gradient-to-r from-blue-500 to-cyan-500"
                         onClick={() => window.open(selectedPerk.officialLink, '_blank')}
                         data-testid={`visit-official-${selectedPerk.id}`}
                       >
                         <ExternalLink className="h-4 w-4 mr-2" />
                         Visit Official Site
                       </Button>
                     )}
 
-                    <Button 
-                      className="w-full bg-gradient-to-r from-purple-500 to-pink-500"
-                      onClick={() => handleGenerateReferral(selectedPerk)}
-                      disabled={referralLoading === selectedPerk.id}
-                      data-testid={`generate-referral-${selectedPerk.id}`}
-                    >
-                      {referralLoading === selectedPerk.id ? (
-                        <>
-                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
-                          Generating...
-                        </>
-                      ) : (
-                        <>
-                          <Copy className="h-4 w-4 mr-2" />
-                          Generate Referral Code
-                        </>
-                      )}
-                    </Button>
-
-                    {referralCodes[selectedPerk.id] && (
-                      <div className="p-3 bg-green-500/10 border border-green-500/20 rounded-lg">
-                        <p className="text-green-400 font-mono text-sm text-center">
-                          {referralCodes[selectedPerk.id]}
-                        </p>
-                      </div>
-                    )}
+                    <div className="space-y-2">
+                      <Button
+                        asChild
+                        className="w-full bg-gradient-to-r from-purple-500 to-pink-500"
+                        data-testid={`manage-referral-${selectedPerk.id}`}
+                      >
+                        <Link href="/referral">Manage your referral program</Link>
+                      </Button>
+                      <p className="text-xs text-gray-400 text-center">
+                        Create and share referral codes from your dedicated referral dashboard.
+                      </p>
+                    </div>
                   </div>
                 </div>
               </div>
             </>
           )}
         </DialogContent>
       </Dialog>
     </div>
   );
-}
+}
