 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/tests/unit/expenses/expense-operations.test.ts b/tests/unit/expenses/expense-operations.test.ts
index 6da2e702b4a216c2efb392659cb30afe51e5bdd1..9d0c54ef04090b2613f6c658109584729b6e5eb0 100644
--- a/tests/unit/expenses/expense-operations.test.ts
+++ b/tests/unit/expenses/expense-operations.test.ts
@@ -1,28 +1,32 @@
 /* eslint-env node, jest */
 import { describe, it, expect, vi, beforeEach, beforeAll } from 'vitest';
-import type { InsertExpense } from '../../../shared/schema.js';
+import type {
+  InsertExpense,
+  Expense,
+  ExpenseCategory
+} from '../../../shared/schema.js';
 import type { IStorage } from '../../../server/storage';
 import { buildStorageMock } from '../../_helpers/buildStorageMock.js';
 
 // Mock the storage module
 const mockStorage = buildStorageMock();
 
 vi.mock('../../../server/storage.ts', () => ({
   storage: mockStorage
 }));
 
 describe('Expense Operations Unit Tests', () => {
   const userId = 123;
   const categoryId = 1;
   let storage: IStorage;
 
   beforeAll(async () => {
     vi.resetModules();
     // Import storage dynamically after mocks are set up
     const storageModule = await import('../../../server/storage.ts');
     storage = storageModule.storage;
   });
 
   beforeEach(() => {
     vi.clearAllMocks();
   });
diff --git a/tests/unit/expenses/expense-operations.test.ts b/tests/unit/expenses/expense-operations.test.ts
index 6da2e702b4a216c2efb392659cb30afe51e5bdd1..9d0c54ef04090b2613f6c658109584729b6e5eb0 100644
--- a/tests/unit/expenses/expense-operations.test.ts
+++ b/tests/unit/expenses/expense-operations.test.ts
@@ -267,71 +271,154 @@ describe('Expense Operations Unit Tests', () => {
       };
 
       mockStorage.updateExpense.mockResolvedValueOnce(updatedExpense);
 
       const result = await storage.updateExpense(expenseId, userId, updates);
 
       expect(result.amount).toBe(12000);
       expect(result.description).toBe('Updated description');
       expect(mockStorage.updateExpense).toHaveBeenCalledWith(expenseId, userId, updates);
     });
 
     test('should handle update error', async () => {
       const expenseId = 4;
       const updates = { amount: 15000 };
 
       mockStorage.updateExpense.mockRejectedValueOnce(new Error('Update failed'));
 
       await expect(storage.updateExpense(expenseId, userId, updates)).rejects.toThrow('Update failed');
     });
   });
 
   describe('getUserExpenses', () => {
     test('should fetch user expenses with category information', async () => {
       const mockExpensesWithCategories = [
         {
-          expense: {
-            id: 1,
-            userId,
-            categoryId: 1,
-            description: 'Camera lens',
-            amount: 75000,
-            expenseDate: new Date('2024-01-15'),
-            taxYear: 2024
-          },
+          id: 1,
+          userId,
+          categoryId: 1,
+          amount: 75000,
+          description: 'Camera lens',
+          vendor: null,
+          expenseDate: new Date('2024-01-15'),
+          receiptUrl: null,
+          receiptFileName: null,
+          businessPurpose: null,
+          deductionPercentage: 100,
+          tags: null,
+          isRecurring: false,
+          recurringPeriod: null,
+          taxYear: 2024,
+          notes: null,
+          createdAt: new Date('2024-01-20'),
+          updatedAt: new Date('2024-01-20'),
           category: {
             id: 1,
             name: 'Technology',
-            deductionPercentage: 100
+            description: 'Equipment and technology purchases',
+            legalExplanation: 'Equipment deduction',
+            deductionPercentage: 100,
+            itsDeductionCode: null,
+            examples: [],
+            icon: 'tech',
+            color: '#000000',
+            isActive: true,
+            sortOrder: 1,
+            defaultBusinessPurpose: null,
+            createdAt: new Date('2024-01-01')
           }
         }
-      ];
+      ] satisfies Array<Expense & { category: ExpenseCategory | null }>;
 
       mockStorage.getUserExpenses.mockResolvedValueOnce(mockExpensesWithCategories);
 
       const result = await storage.getUserExpenses(userId, 2024);
 
       expect(result).toEqual(mockExpensesWithCategories);
+      expect(result[0]?.category?.name).toBe('Technology');
       expect(mockStorage.getUserExpenses).toHaveBeenCalledWith(userId, 2024);
     });
 
     test('should fetch expenses without tax year filter', async () => {
       const mockAllExpenses = [
         {
-          expense: { id: 1, userId, description: 'Expense 1', taxYear: 2023 },
-          category: { name: 'Category 1' }
+          id: 1,
+          userId,
+          categoryId: 2,
+          amount: 12000,
+          description: 'Expense 1',
+          vendor: null,
+          expenseDate: new Date('2023-03-10'),
+          receiptUrl: null,
+          receiptFileName: null,
+          businessPurpose: null,
+          deductionPercentage: 80,
+          tags: null,
+          isRecurring: false,
+          recurringPeriod: null,
+          taxYear: 2023,
+          notes: null,
+          createdAt: new Date('2023-03-11'),
+          updatedAt: new Date('2023-03-11'),
+          category: {
+            id: 2,
+            name: 'Education',
+            description: 'Courses and learning materials',
+            legalExplanation: 'Education deduction',
+            deductionPercentage: 80,
+            itsDeductionCode: null,
+            examples: ['Online courses'],
+            icon: 'book',
+            color: '#FFAA00',
+            isActive: true,
+            sortOrder: 2,
+            defaultBusinessPurpose: null,
+            createdAt: new Date('2023-01-01')
+          }
         },
         {
-          expense: { id: 2, userId, description: 'Expense 2', taxYear: 2024 },
-          category: { name: 'Category 2' }
+          id: 2,
+          userId,
+          categoryId: 3,
+          amount: 8500,
+          description: 'Expense 2',
+          vendor: null,
+          expenseDate: new Date('2024-02-05'),
+          receiptUrl: null,
+          receiptFileName: null,
+          businessPurpose: null,
+          deductionPercentage: 100,
+          tags: null,
+          isRecurring: false,
+          recurringPeriod: null,
+          taxYear: 2024,
+          notes: null,
+          createdAt: new Date('2024-02-06'),
+          updatedAt: new Date('2024-02-06'),
+          category: {
+            id: 3,
+            name: 'Travel',
+            description: 'Business travel expenses',
+            legalExplanation: 'Travel deduction',
+            deductionPercentage: 100,
+            itsDeductionCode: null,
+            examples: ['Flights', 'Hotels'],
+            icon: 'plane',
+            color: '#3366FF',
+            isActive: true,
+            sortOrder: 3,
+            defaultBusinessPurpose: null,
+            createdAt: new Date('2024-01-05')
+          }
         }
-      ];
+      ] satisfies Array<Expense & { category: ExpenseCategory | null }>;
 
       mockStorage.getUserExpenses.mockResolvedValueOnce(mockAllExpenses);
 
       const result = await storage.getUserExpenses(userId);
 
       expect(result).toEqual(mockAllExpenses);
+      expect(result).toHaveLength(2);
       expect(mockStorage.getUserExpenses).toHaveBeenCalledWith(userId);
     });
   });
 });
 
EOF
)