In server/auth.ts, find the /api/auth/reset-password endpoint:

ENSURE it properly decodes the token:
typescriptapp.post('/api/auth/reset-password', authLimiter, async (req, res) => {
  try {
    const { token, newPassword } = req.body;
    
    if (!token || !newPassword) {
      return res.status(400).json({ message: 'Token and new password are required' });
    }

    // Decode the token (it might be URL encoded)
    const decodedToken = decodeURIComponent(token);
    
    // Verify token with SAME secret used to create it
    let decoded;
    try {
      decoded = jwt.verify(decodedToken, JWT_SECRET_VALIDATED) as any;
    } catch (err) {
      if (err instanceof jwt.TokenExpiredError) {
        return res.status(400).json({ message: 'Reset link has expired' });
      }
      return res.status(400).json({ message: 'Invalid reset token' });
    }
    
    if (decoded.type !== 'password-reset') {
      return res.status(400).json({ message: 'Invalid reset token type' });
    }

    // Find user and update password
    const user = await storage.getUserByEmail(decoded.email);
    
    if (!user) {
      return res.status(400).json({ message: 'User not found' });
    }

    // Hash new password
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    // Update user password
    await storage.updateUserPassword(user.id, hashedPassword);

    res.json({ message: 'Password reset successfully' });
  } catch (error) {
    console.error('Password reset error:', error);
    res.status(500).json({ message: 'Error resetting password' });
  }
});

In client/src/App.tsx, ensure the route exists:

ADD this to UnauthenticatedRoutes if missing:
typescriptimport ResetPasswordPage from "@/pages/reset-password";

// In UnauthenticatedRoutes function
<Route path="/reset-password" component={ResetPasswordPage} />

Debug: Add logging to see what's happening:

In server/auth.ts reset-password endpoint, add:
typescriptconsole.log('Reset password attempt:', {
  tokenReceived: !!token,
  tokenLength: token?.length,
  tokenFirstChars: token?.substring(0, 20) + '...'
});