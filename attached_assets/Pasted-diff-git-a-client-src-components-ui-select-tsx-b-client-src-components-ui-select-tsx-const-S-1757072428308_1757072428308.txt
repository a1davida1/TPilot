diff --git a/client/src/components/ui/select.tsx b/client/src/components/ui/select.tsx
@@
 const SelectTrigger = React.forwardRef<
   React.ElementRef<typeof SelectPrimitive.Trigger>,
   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
 >(({ className, children, ...props }, ref) => (
   <SelectPrimitive.Trigger
     ref={ref}
-    className={cn(
-      className
-    )}
+    className={cn(
+      "flex h-10 w-full items-center justify-between rounded-md border border-input " +
+      "bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground " +
+      "focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
+      className
+    )}
     {...props}
   >
     {children}
     <SelectPrimitive.Icon asChild>
       <ChevronDown className="h-4 w-4 opacity-50" />
@@
diff --git a/client/src/pages/tax-tracker.tsx b/client/src/pages/tax-tracker.tsx
@@
               <div>
                 <Label htmlFor="category">Category</Label>
                 <Select
                   value={expenseForm.category}
                   onValueChange={(value) => setExpenseForm({ ...expenseForm, category: value })}
                 >
-                  <SelectTrigger data-testid="select-expense-category">
-                  </SelectTrigger>
+                  <SelectTrigger className="w-full" data-testid="select-expense-category">
+                    <SelectValue placeholder="Select category" />
+                  </SelectTrigger>
                   <SelectContent>
                     {expenseCategories.map(category => (
                       <SelectItem key={category.id} value={category.id.toString()}>
                         {category.name}
                       </SelectItem>
@@
             <div className="space-y-4">
-              <Select value={receiptExpenseId} onValueChange={setReceiptExpenseId}>
-                <SelectTrigger>
-                </SelectTrigger>
+              <Select value={receiptExpenseId} onValueChange={setReceiptExpenseId}>
+                <SelectTrigger className="w-full">
+                  <SelectValue placeholder="Select expense" />
+                </SelectTrigger>
                 <SelectContent>
                   {recentExpenses.map((exp: unknown) => (
                     <SelectItem key={exp.id} value={String(exp.id)}>
                       {exp.description}
                     </SelectItem>
                 </SelectContent>
               </Select>
