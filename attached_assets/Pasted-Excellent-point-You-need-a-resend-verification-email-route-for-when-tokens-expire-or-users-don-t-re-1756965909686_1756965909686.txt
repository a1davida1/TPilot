Excellent point! You need a resend verification email route for when tokens expire or users don't receive the email. Here's how to fix that:
Add a Resend Verification Route
Add this to your server/routes/auth.ts:
typescript// Resend verification email route
router.post("/resend-verification", authLimiter, async (req, res) => {
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ message: 'Email required' });
    }

    // Find user
    const user = await storage.getUserByEmail(email);
    
    if (!user) {
      // Don't reveal if email exists or not for security
      return res.json({ message: 'If that email exists, we sent a verification link' });
    }

    // Check if already verified
    if (user.emailVerified) {
      return res.status(400).json({ message: 'Email already verified' });
    }

    // Generate new verification token
    const verificationToken = createToken({
      email: user.email,
      userId: user.id,
      type: 'email-verification'
    });

    // Send verification email
    const { emailService } = await import('../lib/email-service.js');
    await emailService.sendVerificationEmail(user.email, user.username, verificationToken);

    res.json({ 
      message: 'Verification email sent. Please check your inbox.' 
    });

  } catch (error) {
    logger.error('Resend verification error:', error);
    res.status(500).json({ message: 'Error sending verification email' });
  }
});
Update Login Route to Handle Unverified Users Better
Modify your login route in server/auth.ts to be more helpful:
typescript// In your login handler, when you check emailVerified:
if (!user.emailVerified) {
  return res.status(403).json({ 
    message: 'Email not verified',
    code: 'EMAIL_NOT_VERIFIED', // Add error code for frontend
    email: user.email // Include email so frontend can offer resend
  });
}
Add Frontend Support for Resending
In your login component, handle the unverified email case:
tsx// In your login component
const handleLogin = async () => {
  try {
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      if (data.code === 'EMAIL_NOT_VERIFIED') {
        // Show resend verification option
        setShowResendVerification(true);
        setUnverifiedEmail(data.email);
        toast({
          title: "Email not verified",
          description: "Please verify your email to continue. Click below to resend.",
          action: (
            <Button onClick={() => resendVerification(data.email)}>
              Resend Email
            </Button>
          )
        });
      } else {
        toast({ title: "Login failed", description: data.message });
      }
      return;
    }
    
    // Success - continue with login
  } catch (error) {
    // Handle error
  }
};

const resendVerification = async (email: string) => {
  try {
    const response = await fetch('/api/auth/resend-verification', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email })
    });
    
    const data = await response.json();
    toast({
      title: "Verification email sent",
      description: "Please check your inbox and spam folder"
    });
  } catch (error) {
    toast({
      title: "Error",
      description: "Failed to resend verification email"
    });
  }
};
Optional: Auto-cleanup Old Unverified Accounts
Add a cleanup job to remove unverified accounts after 30 days:
typescript// In a cron job or scheduled task
async function cleanupUnverifiedAccounts() {
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  
  await db.user.deleteMany({
    where: {
      emailVerified: false,
      createdAt: {
        lt: thirtyDaysAgo
      }
    }
  });
}