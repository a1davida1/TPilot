diff --git a/server/auth.ts b/server/auth.ts
@@
   if (!user || !(await bcrypt.compare(password, user.password))) {
     return res.status(401).json({ message: 'Invalid credentials' });
   }
 
   const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET!, { expiresIn: '1h' });
-  res.json({ token });
+  res.cookie('auth_token', token, {
+    httpOnly: true,
+    sameSite: 'lax',
+  });
+  res.json({ token });
 }
 
 export function setupAuth(app: Express) {
   // existing routes...
 }
diff --git a/server/payments/payment-providers.ts b/server/payments/payment-providers.ts
@@
 export function makePaxum(): PaymentProvider {
   const key = process.env.PAXUM_API_KEY;
   const baseUrl = FRONTEND_URL;
-  if (!key) return disabled("paxum");
+  if (!key) return disabled("paxum");
+  if (!baseUrl) throw new Error('APP_BASE_URL environment variable is required');
@@
-      } catch (error) {
-        console.error('Coinbase Commerce checkout creation failed:', error);
-        if (error.message === 'Invalid response from Coinbase Commerce API') {
-          throw error;
-        }
-        throw new Error('Failed to create Coinbase Commerce checkout session');
-      }
+      } catch (error) {
+        console.error('Coinbase Commerce checkout creation failed:', error);
+        if (error instanceof Error) throw error;
+        throw new Error('Failed to create Coinbase Commerce checkout session');
+      }
     },
   };
 }
diff --git a/server/services/email-service.ts b/server/services/email-service.ts
new file mode 100644
+import sgMail from '@sendgrid/mail';
+
+const apiKey = process.env.SENDGRID_API_KEY;
+if (apiKey) sgMail.setApiKey(apiKey);
+
+export const emailService = {
+  async sendMail(msg: sgMail.MailDataRequired) {
+    if (!apiKey) return { skipped: true };
+    return sgMail.send(msg);
+  },
+};
diff --git a/server/storage.ts b/server/storage.ts
@@
-class PostgreSQLStorage implements IStorage {
+export class DatabaseStorage implements IStorage {
@@
-// Create and export the storage instance
-export const storage = new PostgreSQLStorage();
+// Create and export the storage instance
+export const storage = new DatabaseStorage();
diff --git a/tests/integration/upload.test.ts b/tests/integration/upload.test.ts
@@
-      } catch (_error) {
-        res.status(500).json({ message: 'Upload failed', error: error.message });
-      }
+      } catch (error) {
+        const errorMessage =
+          error instanceof Error ? error.message : 'Unknown error';
+        res.status(500).json({ message: 'Upload failed', error: errorMessage });
+      }
@@
-      } catch (_error) {
-        res.status(500).json({ message: 'Scan failed' });
-      }
+      } catch (error) {
+        res.status(500).json({ message: 'Scan failed' });
+      }
@@
-      } catch (_error) {
-        res.status(500).json({ message: 'Failed to retrieve image' });
-      }
+      } catch (error) {
+        res.status(500).json({ message: 'Failed to retrieve image' });
+      }
diff --git a/tests/integration/workflow.test.ts b/tests/integration/workflow.test.ts
@@
-      expect(result.final.safety_level).toBe('normal');
+      expect(result.final.safety_level).toBe('spicy_safe'); // NSFW content expected
diff --git a/tests/theme-system.test.ts b/tests/theme-system.test.ts
@@
     Object.defineProperty(global, 'document', {
       value: {
         documentElement: mockDocumentElement,
       },
       writable: true,
     });
+
+    Object.defineProperty(global, 'window', {
+      value: {},
+      writable: true,
+    });
   });
@@
   afterEach(() => {
     vi.clearAllMocks();
     delete (global as any).window;
     delete (global as any).document;
   });
diff --git a/tests/unit/auth/login-identifier.test.ts b/tests/unit/auth/login-identifier.test.ts
@@
-import { describe, it, expect, beforeEach, afterEach } from 'vitest';
+import { describe, it, expect, beforeEach, afterEach, beforeAll, afterAll } from 'vitest';
 import request from 'supertest';
 import express from 'express';
 import cookieParser from 'cookie-parser';
 import { setupAuth } from '../../../server/auth.js';
+import bcrypt from 'bcrypt';
+import { db } from '../../../server/db';
+import { users } from '@shared/schema';
+import { eq } from 'drizzle-orm';
@@
 setupAuth(app);
 
 describe('Login Identifier and Cookie Auth', () => {
-  beforeEach(() => {
-    // Reset any state before each test
-  });
-
-  afterEach(() => {
-    // Clean up after each test
-  });
+  let testUserId: number;
+
+  beforeAll(async () => {
+    const hashed = await bcrypt.hash('TestPassword123', 10);
+    const [user] = await db.insert(users).values({
+      username: 'testuser',
+      email: 'test@example.com',
+      password: hashed,
+      tier: 'free'
+    }).returning();
+    testUserId = user.id;
+  });
+
+  afterAll(async () => {
+    await db.delete(users).where(eq(users.id, testUserId));
+  });
diff --git a/tests/unit/email-service.test.ts b/tests/unit/email-service.test.ts
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
@@
-      delete require.cache[require.resolve('../../server/services/email-service')];
-      const { emailService } = require('../../server/services/email-service');
+      vi.resetModules();
+      const { emailService } = await import('../../server/services/email-service.ts');
diff --git a/tests/unit/payment-providers-fixed.test.ts b/tests/unit/payment-providers-fixed.test.ts
@@
-      const { makeCoinbase } = require('../../server/payments/payment-providers');
-      const provider = makeCoinbase();
+      vi.resetModules();
+      const { makeCoinbase } = await import('../../server/payments/payment-providers.ts');
+      const provider = makeCoinbase();
@@
-      const { makeCoinbase } = require('../../server/payments/payment-providers');
-      const provider = makeCoinbase();
+      vi.resetModules();
+      const { makeCoinbase } = await import('../../server/payments/payment-providers.ts');
+      const provider = makeCoinbase();
@@
-      const { makeCoinbase } = require('../../server/payments/payment-providers');
-      const provider = makeCoinbase();
+      vi.resetModules();
+      const { makeCoinbase } = await import('../../server/payments/payment-providers.ts');
+      const provider = makeCoinbase();
@@
-      const { makePaxum } = require('../../server/payments/payment-providers');
-      const makePaxumFn = makePaxum;
+      vi.resetModules();
+      const { makePaxum } = await import('../../server/payments/payment-providers.ts');
+      const makePaxumFn = makePaxum;
diff --git a/tests/unit/payment-providers.test.ts b/tests/unit/payment-providers.test.ts
@@
-import { makePaxum, makeCoinbase, makeStripe } from '../../server/payments/payment-providers';
+import { makePaxum, makeCoinbase, makeStripe } from '../../server/payments/payment-providers';
@@
-      const { providers } = require('../../server/payments/payment-providers');
-      expect(providers).toHaveLength(0);
+      vi.resetModules();
+      const { providers } = await import('../../server/payments/payment-providers.ts');
+      expect(providers).toHaveLength(0);
@@
-      const { providers } = require('../../server/payments/payment-providers');
-      expect(providers.length).toBeGreaterThan(0);
+      vi.resetModules();
+      const { providers } = await import('../../server/payments/payment-providers.ts');
+      expect(providers.length).toBeGreaterThan(0);
diff --git a/tests/unit/policy-linter.test.ts b/tests/unit/policy-linter.test.ts
@@
 import { lintCaption } from '../../server/lib/policy-linter';
 import { db } from '../../server/db';
 import { subredditRules } from '@shared/schema';
+import { eq } from 'drizzle-orm';
diff --git a/tests/unit/preview-gate.test.ts b/tests/unit/preview-gate.test.ts
@@
 import { getPreviewStats, canQueuePosts, checkPreviewGate } from '../../server/lib/preview-gate';
 import { db } from '../../server/db';
 import { postPreviews, users } from '@shared/schema';
+import { eq } from 'drizzle-orm';
