*** Begin Patch
*** Update File: server/social-media/social-media-manager.ts
@@
-import type { SocialMediaAccount, SocialMediaPost, InsertSocialMediaPost } from '@shared/schema.js';
+// Removed unused schema imports
@@
-  private apis: Map<Platform, any> = new Map();
+  private apis: Map<Platform, InstagramAPI | TwitterAPI | TikTokAPI | YouTubeAPI> = new Map();
@@
-  registerAPI(platform: Platform, api: unknown) {
+  registerAPI(
+    platform: Platform,
+    api: InstagramAPI | TwitterAPI | TikTokAPI | YouTubeAPI
+  ) {
     this.apis.set(platform, api);
   }
 
-  getAPI(platform: Platform): unknown {
-    return this.apis.get(platform);
+  getAPI(
+    platform: Platform
+  ): InstagramAPI | TwitterAPI | TikTokAPI | YouTubeAPI | undefined {
+    return this.apis.get(platform);
   }
@@
-        case 'twitter':
-          let mediaIds: string[] = [];
+        case 'twitter': {
+          const mediaIds: string[] = [];
           if (content.mediaUrls?.length) {
@@
-          return await api.createTweet({
+          return await api.createTweet({
             text: content.hashtags
               ? `${content.text}\n\n${content.hashtags.map(tag => `#${tag}`).join(' ')}`
               : content.text,
             mediaIds: mediaIds.length > 0 ? mediaIds : undefined,
           });
-        case 'tiktok':
+        }
+        case 'tiktok':
@@
-            likes: metrics.find((m: unknown) => m.name === 'likes')?.values[0]?.value || 0,
-            comments: metrics.find((m: unknown) => m.name === 'comments')?.values[0]?.value || 0,
-            shares: metrics.find((m: unknown) => m.name === 'shares')?.values[0]?.value || 0,
-            views: metrics.find((m: unknown) => m.name === 'impressions')?.values[0]?.value || 0,
+            likes: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'likes')?.values[0]?.value || 0,
+            comments: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'comments')?.values[0]?.value || 0,
+            shares: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'shares')?.values[0]?.value || 0,
+            views: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'impressions')?.values[0]?.value || 0,
@@
-  async getAccountMetrics(platform: Platform): Promise<any> {
-    const api = this.apis.get(platform);
-    return await api.getMetrics();
+  async getAccountMetrics(platform: Platform): Promise<unknown> {
+    const api = this.apis.get(platform);
+    return api?.getMetrics();
   }
 }
*** End Patch
*** Update File: server/social-media/twitter-api.ts
@@
-  private generateAuthHeader(method: string, url: string, params: Record<string, string> = {}) {
+  private generateAuthHeader(
+    method: string,
+    url: string,
+    _params: Record<string, string> = {}
+  ) {
*** End Patch
*** Update File: server/start-production.js
@@
-// Use tsx to run TypeScript directly in production
-import('tsx').then(tsx => {
+// Use tsx to run TypeScript directly in production
+import('tsx').then(() => {
   require('./index.ts');
*** End Patch
*** Update File: server/storage.ts
@@
-import { safeLog, redactUserData } from './lib/logger-utils.js';
+import { safeLog } from './lib/logger-utils.js';
@@
-      const result = await db.select().from(users).where(eq(users.id, id)).limit(1);
-      const user = result[0];
-      if (user) {
-      } else {
-      }
-      return user;
+      const [user] = await db.select().from(users).where(eq(users.id, id)).limit(1);
+      return user ?? undefined;
@@
-      {
-      }
-      {
-      }
+      // removed empty blocks
@@
-        const today = new Date().toISOString().split('T')[0];
         let streak = 0;
         let currentDate = new Date();
@@
-        })) as any;
+        })) as (Expense & { category: ExpenseCategory | null })[];
*** End Patch
*** Update File: server/test-deployment.ts
@@
-interface DeploymentTestResult {
-  name: string;
-  status: 'PASSED' | 'FAILED' | 'WARNING';
-  duration?: number;
-  error?: unknown;
-}
+interface DeploymentTestResult {
+  name: string;
+  status: 'PASSED' | 'FAILED' | 'WARNING';
+  duration?: number;
+  error?: unknown;
+}
@@
-  const results = {
-    passed: 0,
-    failed: 0,
-    warnings: 0,
-    tests: [] as any[]
-  };
+  const results: { passed: number; failed: number; warnings: number; tests: DeploymentTestResult[] } = {
+    passed: 0,
+    failed: 0,
+    warnings: 0,
+    tests: []
+  };
@@
-      const errorContent = await generateEnhancedContent({
-        mode: 'text',
-        platform: 'invalid_platform' as any,
-        style: 'invalid_style' as any
-      });
+      const errorContent = await generateEnhancedContent({
+        mode: 'text',
+        platform: 'invalid_platform' as unknown as never,
+        style: 'invalid_style' as unknown as never
+      });
*** End Patch
*** Update File: server/test-endpoints.cjs
@@
-// Test Suite for ThottoPilot Critical Endpoints
+/* eslint-env node */
+// Test Suite for ThottoPilot Critical Endpoints
*** End Patch
*** Update File: server/types/passport-reddit.d.ts
@@
-    _json: unknown;
+    _json: Record<string, unknown>;
@@
-  export type VerifyCallback = (error: unknown, user?: unknown, info?: unknown) => void;
-  export type VerifyFunction = (accessToken: string, refreshToken: string, profile: Profile, done: VerifyCallback) => void;
+  export type VerifyCallback = (error: Error | null, user?: unknown, info?: unknown) => void;
+  export type VerifyFunction = (
+    accessToken: string,
+    refreshToken: string,
+    profile: Profile,
+    done: VerifyCallback
+  ) => void;
*** End Patch
*** Update File: server/visitor-analytics.ts
@@
-import type { Request } from 'express';
+import type { Request } from 'express';
@@
-  private sessions: Map<string, any> = new Map();
+  private sessions: Map<string, { views: number; lastSeen: number }> = new Map();
@@
-  private generateSessionId(req: unknown): string {
+  private generateSessionId(req: Request): string {
@@
-  trackPageView(req: unknown, path: string) {
-    const sessionId = this.generateSessionId(req);
-    const currentDate = new Date().toISOString().split('T')[0];
-    const session = (this.sessions.get(sessionId) || { views: 0, lastSeen: Date.now() }) as { views: number; lastSeen: number };
-    session.views++;
-    session.lastSeen = Date.now();
-    this.sessions.set(sessionId, session);
+  trackPageView(req: Request, _path: string) {
+    const sessionId = this.generateSessionId(req);
+    const session = this.sessions.get(sessionId) ?? { views: 0, lastSeen: Date.now() };
+    session.views++;
+    session.lastSeen = Date.now();
+    this.sessions.set(sessionId, session);
   }
*** End Patch
*** Update File: server/vite-stub.ts
@@
-export function setupVite(app: unknown, server: unknown) {
-  return Promise.resolve();
-}
+export function setupVite(_app: unknown, _server: unknown) {
+  return Promise.resolve();
+}
*** End Patch
*** Update File: shared/schema.ts
@@
-import { pgTable, serial, varchar, text, integer, timestamp, jsonb, boolean, uuid, unique } from "drizzle-orm/pg-core";
+import { pgTable, serial, varchar, text, integer, timestamp, jsonb, boolean, unique } from "drizzle-orm/pg-core";
*** End Patch
*** Update File: tests/auth/signup.test.ts
@@
+/* eslint-env node, jest */
 import request from 'supertest';
@@
-const users: unknown[] = [];
-const tokens: unknown[] = [];
+const users: Array<Record<string, unknown>> = [];
+const tokens: Array<Record<string, unknown>> = [];
@@
-      createUser: vi.fn().mockImplementation(async (data: unknown) => {
+      createUser: vi.fn().mockImplementation(async (data: Record<string, unknown>) => {
@@
-      createVerificationToken: vi.fn().mockImplementation(async (data: unknown) => {
+      createVerificationToken: vi.fn().mockImplementation(async (data: Record<string, unknown>) => {
*** End Patch
*** Update File: tests/integration/auth-flow.test.ts
@@
-  const requestBody: unknown = { username, password: pw };
+  const requestBody: { username: string; password: string } = { username, password: pw };
@@
-  const response: unknown = await app.inject({ method: 'POST', url: '/auth/login', payload: requestBody });
+  const response = await app.inject({ method: 'POST', url: '/auth/login', payload: requestBody });
@@
-  let _pw = pw;
+  const _pw = pw;
@@
-  } catch (e) {
-    // ...
+  } catch (_e) {
+    // ...
   }
@@
-  const result: unknown = await app.inject({ method: 'POST', url: '/auth/reset', payload: requestBody });
+  const result = await app.inject({ method: 'POST', url: '/auth/reset', payload: requestBody });
*** End Patch
*** End Patch
