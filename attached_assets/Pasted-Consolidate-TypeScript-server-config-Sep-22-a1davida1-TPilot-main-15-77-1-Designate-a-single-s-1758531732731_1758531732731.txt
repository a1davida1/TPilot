Consolidate TypeScript server config
Sep 22 · a1davida1/TPilot · main
+15-77
1. Designate a single server config (e.g. keep `tsconfig.server.json`) that contains the definitive compiler options for the Node build, including `moduleResolution`, `rootDir`, `outDir`, and `paths`.
2. Update `server/tsconfig.json` (or replace it with an `extends`) so it simply references the canonical config without overriding core options; adjust `build.sh` to invoke `npx tsc -p ../tsconfig.server.json` to keep both build scripts in sync.
3. Delete or repurpose `tsconfig.build.json`, and ensure IDE tooling points at the shared config (update `references` or editor settings if needed). Verify that `npm run typecheck`, `npm run build:server`, and any custom build scripts produce the same `dist/server` layout.

Summary

    Centralized the server TypeScript compiler options—module resolution, root/out directories, shared path aliases, and supporting interop flags—inside tsconfig.server.json so the Node build has a single canonical source of truth for production-ready settings.

Simplified server/tsconfig.json to extend the canonical config and updated build.sh to compile (and run tsc-alias) against that shared configuration, eliminating the temporary shared build step and keeping all server scripts aligned.

Removed the redundant tsconfig.build.json to avoid conflicting editor/tooling targets and ensure everything resolves against the shared server configuration.

Testing

    ❌ npm run typecheck *(fails: long-standing client/server TypeScript errors in the repo)*

❌ npm run build:server *(fails: existing perk-tier type mismatch in server/routes.ts)*

❌ bash build.sh *(fails during the TypeScript phase with the same server/routes.ts issue, though the script completes)*

❌ npm run lint *(fails: pre-existing lint errors and hundreds of warnings tracked in the repository)*

❌ npm test *(fails/aborted: extensive pre-existing integration/unit/E2E failures and external API calls)*


build.sh
+5-30
#!/bin/bash

echo "Building frontend assets..."
npx vite build

echo "Frontend build complete!"

# Create dist directories
# Create dist directories used by the Node build
mkdir -p dist/server dist/shared

echo "Building shared TypeScript files..."
# Create a temporary tsconfig for shared files
cat > temp-shared-tsconfig.json << EOF
{
  "compilerOptions": {
    "module": "ESNext",
    "target": "ES2022",
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "outDir": "dist/shared",
    "declaration": false,
    "sourceMap": false
  },
  "include": ["shared/**/*"]
}
EOF

# Compile shared files
npx tsc --project temp-shared-tsconfig.json

# Clean up temporary config
rm temp-shared-tsconfig.json

echo "Building server TypeScript files..."
# Compile server TypeScript files with shared dependencies
# Compile server and shared TypeScript files with the canonical config
cd server
npx tsc --project tsconfig.json
npx tsc -p ../tsconfig.server.json
cd ..

echo "Resolving path mappings in compiled server files..."
# Use tsc-alias to resolve @shared/* imports to proper relative paths
npx tsc-alias -p server/tsconfig.json
npx tsc-alias -p tsconfig.server.json

echo "Build complete!"
echo "Build complete!"
server/tsconfig.json
+2-27
{
  "extends": "../tsconfig.json",
  "include": ["**/*", "../shared/**/*"],
  "exclude": ["node_modules", "dist"],
  "compilerOptions": {
    "module": "ESNext",
    "target": "ES2022",
    "moduleResolution": "Node",
    "resolvePackageJsonExports": false,
    "resolvePackageJsonImports": false,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": false,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "outDir": "../dist/server",
    "rootDir": "../",
    "baseUrl": "../",
    "paths": {
      "@shared/*": ["shared/*"]
    },
    "types": ["node"],
    "declaration": false,
    "sourceMap": false
  }
}
  "extends": "../tsconfig.server.json"
}
tsconfig.build.json
Deleted
+0-16
tsconfig.server.json
+8-4
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "Node",
    "target": "ES2022",
    "outDir": "dist",
    "rootDir": ".",
    "outDir": "dist",
    "baseUrl": ".",
    "paths": {
      "@shared/*": ["shared/*"],
      "@server/*": ["server/*"]
    },
    "resolvePackageJsonExports": false,
    "resolvePackageJsonImports": false,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "noEmit": false,
    "composite": false,
    "declaration": false,
    "sourceMap": false,
    "types": ["node"],
    "strict": false,
    "noImplicitAny": false,
    "strictNullChecks": false,
    "strictFunctionTypes": false,
    "strictBindCallApply": false
    "strictBindCallApply": false,
    "composite": false
  },
  "include": ["server/**/*.ts", "shared/**/*.ts"],
  "exclude": ["node_modules", "client/**", "dist/**", "**/*.test.ts", "**/*.spec.ts", "moderation"]
}
