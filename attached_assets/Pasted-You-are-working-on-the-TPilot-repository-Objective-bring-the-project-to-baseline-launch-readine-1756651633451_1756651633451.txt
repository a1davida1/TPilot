You are working on the “TPilot” repository.

Objective: bring the project to baseline launch readiness by resolving config mismatches, cleaning up debug code, standardizing logging, removing stale files, improving safety-level handling, adding docs, and expanding tests. Follow the steps exactly, commit in logical chunks, and run validation commands after each major change.

---
1. Align config fallback with env schema
   - File: server/lib/config.ts
   - In the fallback config block (~lines 118‑150):
     • Remove PLAN_STORAGE_BYTES_PRO_PLUS.
     • Add PLAN_STORAGE_BYTES_STARTER with a default (≈10 GB) that matches envSchema.
     • Confirm PLAN_STORAGE_BYTES_PRO remains ~50 GB.
   - Run: npm run typecheck

2. Clean up server entry
   - File: server/index.ts
   - Remove “ADD THIS LINE” comments and any leftover debug markers.
   - Replace the Sentry section with a typed import:
       import * as Sentry from "@sentry/node";
     Initialize Sentry only when process.env.SENTRY_DSN is truthy.
   - Ensure the file compiles without @ts-ignore.
   - Run: npm run typecheck

3. Remove backup and obsolete files
   - Delete all *.bak and *.old files in server/, migrations_quarantine/, scripts/, and client/.
   - Verify no code references them.
   - Run: git status (should show only deletions), then commit.

4. Standardize worker logging
   - Files: server/lib/workers/*
   - Import the centralized logger (or create a shared logger if needed).
   - Replace all console.log/console.error with logger.info/logger.warn/logger.error.
   - Ensure no unused imports.
   - Run: npm run typecheck

5. Fix safety-level normalization
   - Files: server/caption/geminiPipeline.ts, textOnlyPipeline.ts, rewritePipeline.ts
   - In the “Fix safety_level variations” block, map "suggestive" → "spicy_safe" before validation.
   - Keep z.enum(["normal", "spicy_safe", "needs_review"]) in server/caption/schema.ts unchanged.
   - Run: npm run typecheck

6. Documentation and environment template
   - Create README.md at repository root: outline prerequisites, installation, local dev, testing, and deployment (reference DEPLOYMENT.md and replit.md).
   - Create .env.example listing all variables defined in server/lib/config.ts.
   - Commit both files.

7. Expand automated tests
   - For each route in server/routes/ and major modules in server/lib/, add Vitest suites under tests/.
   - Include integration tests for signup, billing, caption generation, and storage quotas.
   - Ensure CI runs npm test by default.
   - Run: npm test

8. Final checks
   - Ensure git status is clean.
   - Summarize changes in commit messages.
   - Provide a brief summary of test results and remaining TODOs.

Remember: run `npm run typecheck` and `npm test` after significant changes. Keep commits focused and descriptive. Do not create new branches.

Provide a summary of the work and any blockers once finished.
