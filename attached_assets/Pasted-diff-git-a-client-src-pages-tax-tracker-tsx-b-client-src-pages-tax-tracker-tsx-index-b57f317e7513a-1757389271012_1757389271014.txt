diff --git a/client/src/pages/tax-tracker.tsx b/client/src/pages/tax-tracker.tsx
index b57f317e7513a55ec552b522d79213943dd329c3..50045084a2d8ea808e53a625ef4418746fd37f2b 100644
--- a/client/src/pages/tax-tracker.tsx
+++ b/client/src/pages/tax-tracker.tsx
@@ -18,188 +18,239 @@ import { Badge } from '@/components/ui/badge';
 import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
 import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
 import { Input } from '@/components/ui/input';
 import { Label } from '@/components/ui/label';
 import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
 import { Textarea } from '@/components/ui/textarea';
 import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
 import { apiRequest } from '@/lib/queryClient';
 // Temporarily disabled framer-motion to fix runtime errors
 // import { motion, AnimatePresence } from 'framer-motion';
 import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO } from 'date-fns';
 
 const iconMap: Record<string, React.ComponentType<{ className?: string }>> = {
   Sparkles,
   Receipt,
   Calculator,
   TrendingUp,
   FileText,
   DollarSign
 };
 
 interface TaxTrackerProps {
   userTier?: 'guest' | 'free' | 'pro' | 'premium';
 }
 
+interface ExpenseCategory {
+  id: number;
+  name: string;
+  deductionPercentage: number;
+  icon: string;
+  color?: string;
+  description?: string;
+  examples: string[];
+  legalExplanation?: string;
+}
+
+interface Expense {
+  id: number;
+  description: string;
+  amount: number;
+  categoryId: number;
+  expenseDate: string;
+  receiptUrl?: string;
+  receiptFileName?: string;
+  notes?: string;
+  category?: string;
+  date?: string;
+}
+
 const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
-  const [selectedCategory, setSelectedCategory] = useState<unknown>(null);
+  const [selectedCategory, setSelectedCategory] = useState<ExpenseCategory | null>(null);
   const [activeTab, setActiveTab] = useState('overview');
   const [showExpenseModal, setShowExpenseModal] = useState(false);
   const [showReceiptModal, setShowReceiptModal] = useState(false);
   const [calendarDate, setCalendarDate] = useState<Date>(new Date());
   const [expenseForm, setExpenseForm] = useState({
     description: '',
     amount: '',
     category: '',
     date: format(new Date(), 'yyyy-MM-dd'),
     notes: ''
   });
   const [receiptFile, setReceiptFile] = useState<File | null>(null);
   const [receiptExpenseId, setReceiptExpenseId] = useState('');
   
   const queryClient = useQueryClient();
 
-  const { data: expenseCategories = [], isLoading: categoriesLoading } = useQuery({
+  const {
+    data: expenseCategories = [],
+    isLoading: categoriesLoading,
+    error: categoriesError
+  } = useQuery<ExpenseCategory[]>({
     queryKey: ['/api/expense-categories'],
     queryFn: async () => {
       const res = await apiRequest('GET', '/api/expense-categories');
       return res.json();
     }
   });
 
   useEffect(() => {
     if (!selectedCategory && expenseCategories.length > 0) {
       setSelectedCategory(expenseCategories[0]);
     }
   }, [expenseCategories, selectedCategory]);
 
 
   // Fetch expense totals
-  const { data: expenseTotals = { total: 0, deductible: 0, byCategory: {} } } = useQuery({
+  const {
+    data: expenseTotals = { total: 0, deductible: 0, byCategory: {} },
+    isLoading: totalsLoading,
+    error: totalsError
+  } = useQuery({
     queryKey: ['/api/expenses/totals'],
     queryFn: async () => {
       const res = await apiRequest('GET', '/api/expenses/totals');
       return res.json();
     }
   });
 
   const estimatedSavings = Math.round((expenseTotals?.deductible || 0) * 0.22);
 
   // Fetch recent expenses
-  const { data: recentExpenses = [] } = useQuery({
+  const {
+    data: recentExpenses = [],
+    isLoading: recentLoading,
+    error: recentError
+  } = useQuery<Expense[]>({
     queryKey: ['/api/expenses'],
     queryFn: async () => {
       const res = await apiRequest('GET', '/api/expenses');
       return res.json();
     }
   });
 
   // Fetch calendar expenses
-  const { data: calendarExpenses = [] } = useQuery({
-    queryKey: ['/api/expenses/range', format(startOfMonth(calendarDate), 'yyyy-MM-dd'), format(endOfMonth(calendarDate), 'yyyy-MM-dd')],
+  const {
+    data: calendarExpenses = [],
+    isLoading: calendarLoading,
+    error: calendarError
+  } = useQuery<Expense[]>({
+    queryKey: [
+      '/api/expenses/range',
+      format(startOfMonth(calendarDate), 'yyyy-MM-dd'),
+      format(endOfMonth(calendarDate), 'yyyy-MM-dd')
+    ],
     enabled: activeTab === 'calendar',
     queryFn: async () => {
       const params = new URLSearchParams({
         startDate: format(startOfMonth(calendarDate), 'yyyy-MM-dd'),
         endDate: format(endOfMonth(calendarDate), 'yyyy-MM-dd')
       });
       const res = await apiRequest('GET', `/api/expenses/range?${params.toString()}`);
       return res.json();
     }
   });
 
   // Create expense mutation
   const createExpenseMutation = useMutation({
-    mutationFn: async (expenseData: unknown) => {
+    mutationFn: async (expenseData: Omit<Expense, 'id'>) => {
       const response = await apiRequest('POST', '/api/expenses', expenseData);
       return response.json();
     },
     onSuccess: () => {
       queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });
       queryClient.invalidateQueries({ queryKey: ['/api/expenses/totals'] });
       setShowExpenseModal(false);
       setExpenseForm({ description: '', amount: '', category: '', date: format(new Date(), 'yyyy-MM-dd'), notes: '' });
     }
   });
 
   const uploadReceiptMutation = useMutation({
     mutationFn: async ({ expenseId, file }: { expenseId: string; file: File }) => {
       const formData = new FormData();
       formData.append('receipt', file);
       const res = await apiRequest('POST', `/api/expenses/${expenseId}/receipt`, formData);
       return res.json();
     },
     onSuccess: (updatedExpense) => {
-      queryClient.setQueryData(['/api/expenses'], (old: unknown[] = []) =>
+      queryClient.setQueryData<Expense[]>(['/api/expenses'], (old = []) =>
         old.map(exp => (exp.id === updatedExpense.id ? updatedExpense : exp))
       );
       queryClient.invalidateQueries({ queryKey: ['/api/expenses/range'] });
       setShowReceiptModal(false);
       setReceiptFile(null);
       setReceiptExpenseId('');
     }
   });
 
   const handleCreateExpense = () => {
     if (!expenseForm.description || !expenseForm.amount || !expenseForm.category) return;
 
     createExpenseMutation.mutate({
       description: expenseForm.description,
       amount: Math.round(parseFloat(expenseForm.amount) * 100),
       categoryId: parseInt(expenseForm.category),
       expenseDate: expenseForm.date,
       notes: expenseForm.notes
     });
   };
 
   const handleReceiptUpload = () => {
     if (!receiptFile || !receiptExpenseId) return;
     uploadReceiptMutation.mutate({ expenseId: receiptExpenseId, file: receiptFile });
   };
 
   const getDaysWithExpenses = () => {
     const daysInMonth = eachDayOfInterval({
       start: startOfMonth(calendarDate),
       end: endOfMonth(calendarDate)
     });
     
     return daysInMonth.map(day => {
-      const dayExpenses = calendarExpenses.filter((expense: unknown) => 
+      const dayExpenses = calendarExpenses.filter(expense =>
         isSameDay(parseISO(expense.expenseDate), day)
       );
-      const totalAmount = dayExpenses.reduce((sum: number, expense: unknown) => sum + expense.amount, 0);
-      const hasReceipt = dayExpenses.some((expense: unknown) => expense.receiptUrl);
+      const totalAmount = dayExpenses.reduce((sum, expense) => sum + expense.amount, 0);
+      const hasReceipt = dayExpenses.some(expense => expense.receiptUrl);
 
       return {
         date: day,
         expenses: dayExpenses,
         totalAmount,
         hasReceipt
       };
     });
   };
 
+  if (categoriesLoading || totalsLoading || recentLoading || calendarLoading) {
+    return <div>Loading...</div>;
+  }
+  if (categoriesError || totalsError || recentError || calendarError) {
+    return <div>Error loading tax data.</div>;
+  }
+
   return (
     <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-purple-50">
       <div className="max-w-7xl mx-auto p-6 space-y-8">
         
         {/* Header */}
         <div className="text-center space-y-4">
           <div className="flex items-center justify-center space-x-3">
             <div className="p-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl shadow-lg">
               <Calculator className="h-8 w-8 text-white" />
             </div>
             <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
               Tax Tracker
             </h1>
           </div>
           <p className="text-lg text-gray-600 max-w-2xl mx-auto">
             Almost everything in your life as a content creator is tax deductible. 
             Track your expenses and maximize your savings with confidence.
           </p>
         </div>
 
         {/* Quick Stats */}
         <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
           <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300">
             <CardContent className="p-6">
               <div className="flex items-center space-x-4">
diff --git a/client/src/pages/tax-tracker.tsx b/client/src/pages/tax-tracker.tsx
index b57f317e7513a55ec552b522d79213943dd329c3..50045084a2d8ea808e53a625ef4418746fd37f2b 100644
--- a/client/src/pages/tax-tracker.tsx
+++ b/client/src/pages/tax-tracker.tsx
@@ -299,51 +350,51 @@ const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
                     <Calendar className="mr-2 h-4 w-4" />
                     View Calendar
                   </Button>
                 </CardContent>
               </Card>
 
               {/* Recent Expenses */}
               <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
                 <CardHeader>
                   <CardTitle>Recent Expenses</CardTitle>
                 </CardHeader>
                 <CardContent className="space-y-3">
                   {recentExpenses.length === 0 ? (
                     <div className="text-center py-8">
                       <Receipt className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                       <p className="text-gray-500 mb-4">No expenses tracked yet</p>
                       <Button 
                         onClick={() => setShowExpenseModal(true)}
                         size="sm"
                         className="bg-gradient-to-r from-purple-500 to-pink-500"
                       >
                         Add Your First Expense
                       </Button>
                     </div>
                   ) : (
-                    recentExpenses.slice(0, 3).map((expense: unknown, index: number) => (
+                    recentExpenses.slice(0, 3).map((expense, index) => (
                       <div 
                         key={expense.id}
                         className="flex items-center justify-between p-3 rounded-xl bg-gray-50 hover:bg-gray-100 transition-colors"
                       >
                         <div>
                           <p className="font-medium text-gray-900">{expense.description}</p>
                           <p className="text-sm text-gray-500">{expense.category} • {format(parseISO(expense.date), 'MMM d, yyyy')}</p>
                         </div>
                         <div className="text-right">
                           <p className="font-bold text-gray-900">${expense.amount}</p>
                           <Badge variant="secondary" className="bg-green-100 text-green-700">
                             100% Deductible
                           </Badge>
                         </div>
                       </div>
                     ))
                   )}
                 </CardContent>
               </Card>
             </div>
           </TabsContent>
 
           <TabsContent value="categories" className="space-y-6">
             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
               {categoriesLoading ? (
diff --git a/client/src/pages/tax-tracker.tsx b/client/src/pages/tax-tracker.tsx
index b57f317e7513a55ec552b522d79213943dd329c3..50045084a2d8ea808e53a625ef4418746fd37f2b 100644
--- a/client/src/pages/tax-tracker.tsx
+++ b/client/src/pages/tax-tracker.tsx
@@ -652,51 +703,51 @@ const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
                   className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500"
                   data-testid="button-create-expense"
                 >
                   {createExpenseMutation.isPending ? 'Adding...' : 'Add Expense'}
                 </Button>
               </div>
             </div>
           </DialogContent>
         </Dialog>
 
         {/* Upload Receipt Modal */}
         <Dialog open={showReceiptModal} onOpenChange={setShowReceiptModal}>
           <DialogContent className="max-w-md">
             <DialogHeader>
               <DialogTitle className="flex items-center space-x-2">
                 <Upload className="h-5 w-5 text-purple-600" />
                 <span>Upload Receipt</span>
               </DialogTitle>
             </DialogHeader>
             <div className="space-y-4">
               <Select value={receiptExpenseId} onValueChange={setReceiptExpenseId}>
                 <SelectTrigger className="w-full">
                   <SelectValue placeholder="Select expense" />
                 </SelectTrigger>
                 <SelectContent>
-                  {recentExpenses.map((exp: unknown) => (
+                  {recentExpenses.map(exp => (
                     <SelectItem key={exp.id} value={String(exp.id)}>
                       {exp.description}
                     </SelectItem>
                   ))}
                 </SelectContent>
               </Select>
               <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                 {receiptFile ? (
                   <div className="space-y-2">
                     <Receipt className="h-12 w-12 text-green-600 mx-auto" />
                     <p className="text-sm font-medium text-gray-900">{receiptFile.name}</p>
                     <p className="text-xs text-gray-500">{(receiptFile.size / 1024 / 1024).toFixed(2)} MB</p>
                     <Button 
                       variant="outline" 
                       size="sm"
                       onClick={() => setReceiptFile(null)}
                       data-testid="button-remove-receipt"
                     >
                       <X className="h-4 w-4 mr-1" />
                       Remove
                     </Button>
                   </div>
                 ) : (
                   <div className="space-y-2">
                     <Upload className="h-12 w-12 text-gray-400 mx-auto" />
