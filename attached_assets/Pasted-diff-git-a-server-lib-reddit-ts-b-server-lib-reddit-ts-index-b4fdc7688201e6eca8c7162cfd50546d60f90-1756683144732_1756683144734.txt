diff --git a/server/lib/reddit.ts b/server/lib/reddit.ts
index b4fdc7688201e6eca8c7162cfd50546d60f90011..c463faac7c1621746fe097ddae5303118d2ddc48 100644
--- a/server/lib/reddit.ts
+++ b/server/lib/reddit.ts
@@ -75,84 +75,93 @@ export class RedditManager {
       console.error('Failed to create Reddit manager for user:', error);
       return null;
     }
   }
 
   /**
    * Submit a post to Reddit
    */
   async submitPost(options: RedditPostOptions): Promise<RedditPostResult> {
     try {
       console.log(`Submitting post to r/${options.subreddit}: "${options.title}"`);
 
       // Check if we can post to this subreddit
       const permission = await RedditManager.canPostToSubreddit(this.userId, options.subreddit);
       if (!permission.canPost) {
         return {
           success: false,
           error: permission.reason || 'Cannot post to this subreddit'
         };
       }
 
       let submission;
 
       if (options.url) {
         // Link post
-        submission = (this.reddit as any)
+        submission = await (this.reddit as any)
           .getSubreddit(options.subreddit)
           .submitLink({
             subredditName: options.subreddit,
             title: options.title,
             url: options.url,
             nsfw: options.nsfw || false,
             spoiler: options.spoiler || false,
           });
       } else {
         // Text post
-        submission = (this.reddit as any)
+        submission = await (this.reddit as any)
           .getSubreddit(options.subreddit)
           .submitSelfpost({
             subredditName: options.subreddit,
             title: options.title,
             text: options.body || '',
             nsfw: options.nsfw || false,
             spoiler: options.spoiler || false,
           });
       }
 
       // Update rate limiting
       await this.updateRateLimit(options.subreddit);
 
+      console.log('Reddit submission succeeded:', {
+        userId: this.userId,
+        subreddit: options.subreddit,
+        postId: submission.id,
+      });
+
       return {
         success: true,
         postId: submission.id,
         url: `https://www.reddit.com${submission.permalink}`,
       };
 
     } catch (error: any) {
-      console.error('Reddit submission failed:', error);
-      
+      console.error('Reddit submission failed:', {
+        message: error?.message,
+        stack: error?.stack,
+      });
+
       let errorMessage = 'Failed to submit post';
       
       // Parse common Reddit API errors
       if (error.message?.includes('RATELIMIT')) {
         errorMessage = 'Rate limited by Reddit. Please try again later.';
       } else if (error.message?.includes('SUBREDDIT_NOTALLOWED')) {
         errorMessage = 'Not allowed to post in this subreddit';
       } else if (error.message?.includes('NO_TEXT')) {
         errorMessage = 'Post content cannot be empty';
       } else if (error.message?.includes('TOO_LONG')) {
         errorMessage = 'Post title or content is too long';
       }
 
       return {
         success: false,
         error: errorMessage
       };
     }
   }
 
   /**
    * Check if user can post to a specific subreddit (rate limiting)
    */
   static async canPostToSubreddit(userId: number, subreddit: string): Promise<PostingPermission> {
     try {
diff --git a/server/lib/reddit.ts b/server/lib/reddit.ts
index b4fdc7688201e6eca8c7162cfd50546d60f90011..c463faac7c1621746fe097ddae5303118d2ddc48 100644
--- a/server/lib/reddit.ts
+++ b/server/lib/reddit.ts
@@ -277,51 +286,66 @@ export function getRedditAuthUrl(state: string): string {
 
 /**
  * Exchange authorization code for access token
  */
 export async function exchangeRedditCode(code: string): Promise<{
   accessToken: string;
   refreshToken: string;
   expiresIn: number;
 }> {
   if (!process.env.REDDIT_CLIENT_ID || !process.env.REDDIT_CLIENT_SECRET) {
     throw new Error('Reddit OAuth credentials not configured');
   }
 
   // Always use a consistent redirect URI (must match exactly)
   let redirectUri = process.env.REDDIT_REDIRECT_URI;
   
   if (!redirectUri) {
     // Use the primary domain from REPLIT_DOMAINS for consistency
     const domain = process.env.REPLIT_DOMAINS?.split(',')[0] || 'thottopilot.com';
     const protocol = domain.includes('localhost') ? 'http' : 'https';
     redirectUri = `${protocol}://${domain}/api/reddit/callback`;
   }
   
   console.log('Reddit OAuth redirect URI (exchange):', redirectUri);
 
-  const response = await fetch('https://www.reddit.com/api/v1/access_token', {
-    method: 'POST',
-    headers: {
-      'Authorization': `Basic ${Buffer.from(`${process.env.REDDIT_CLIENT_ID}:${process.env.REDDIT_CLIENT_SECRET}`).toString('base64')}`,
-      'Content-Type': 'application/x-www-form-urlencoded',
-      'User-Agent': 'ThottoPilot/1.0',
-    },
-    body: new URLSearchParams({
-      grant_type: 'authorization_code',
-      code,
-      redirect_uri: redirectUri,
-    }),
-  });
+  try {
+    const response = await fetch('https://www.reddit.com/api/v1/access_token', {
+      method: 'POST',
+      headers: {
+        'Authorization': `Basic ${Buffer.from(`${process.env.REDDIT_CLIENT_ID}:${process.env.REDDIT_CLIENT_SECRET}`).toString('base64')}`,
+        'Content-Type': 'application/x-www-form-urlencoded',
+        'User-Agent': 'ThottoPilot/1.0',
+      },
+      body: new URLSearchParams({
+        grant_type: 'authorization_code',
+        code,
+        redirect_uri: redirectUri,
+      }),
+    });
 
-  if (!response.ok) {
-    throw new Error(`Reddit token exchange failed: ${response.statusText}`);
-  }
+    if (!response.ok) {
+      const body = await response.text();
+      console.error('Reddit token exchange failed:', {
+        status: response.status,
+        statusText: response.statusText,
+        body,
+      });
+      throw new Error(`Reddit token exchange failed: ${response.statusText}`);
+    }
 
-  const data = await response.json();
-  
-  return {
-    accessToken: data.access_token,
-    refreshToken: data.refresh_token,
-    expiresIn: data.expires_in,
-  };
+    const data = await response.json();
+
+    if (!data.refresh_token) {
+      console.warn('No refresh token returned from Reddit');
+    }
+
+    return {
+      accessToken: data.access_token,
+      refreshToken: data.refresh_token,
+      expiresIn: data.expires_in,
+    };
+  } catch (error) {
+    console.error('Reddit code exchange error:', error);
+    throw error;
+  }
 }
