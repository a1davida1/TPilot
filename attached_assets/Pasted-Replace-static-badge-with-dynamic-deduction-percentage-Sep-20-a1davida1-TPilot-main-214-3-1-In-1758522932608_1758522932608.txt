Replace static badge with dynamic deduction percentage
Sep 20 · a1davida1/TPilot · main
+214-3
1. In `client/src/pages/tax-tracker.tsx`, replace the literal “100% Deductible” badge with a value derived from `expense.category?.deductionPercentage`, falling back to “—% Deductible” when data is missing.
2. Add formatting helpers to display both percentage and any partial-deduction messaging (e.g., “50% Deductible (Home Office)”).
3. Extend unit/UI tests (or add new ones) to assert the badge reflects categories at 100% and <100%.

Summary

    Added shared deduction-formatting helpers to the tax tracker page so badges draw from each category’s percentage, append context for partial deductions, and fall back to “—% Deductible” when data is missing.

Swapped the recent-expense badge to use the helper (with a test identifier) and reused it in the category grid so partial tiers now surface messaging like “50% Deductible (Home Office)”.

Introduced a dedicated unit test that mocks React Query to confirm badges display 100%, partial, and missing-percentage states in the rendered UI.

Testing

    ✅ npm run lint

⚠️ npm test *(fails because numerous pre-existing suites require external services such as Postgres/Neon, Coinbase APIs, Sharp image processing, and email sending that aren’t available in this environment; new tax-tracker test passes within the run)*

✅ npx vitest run client/src/pages/__tests__/tax-tracker.test.tsx


client/src/pages/__tests__/tax-tracker.test.tsx
New
+172-0
import React from 'react';
import { act } from 'react';
import { createRoot } from 'react-dom/client';
import { describe, expect, it, beforeEach, afterEach, vi } from 'vitest';

type MockQueryOptions = {
  queryKey: unknown;
  enabled?: boolean;
};

type MockQueryResult = {
  data: unknown;
  isLoading: boolean;
  error: unknown;
};

interface MockMutationResult {
  mutate: (variables?: unknown) => void;
  mutateAsync: (variables?: unknown) => Promise<unknown>;
  isPending: boolean;
  reset: () => void;
}

const mockUseQuery = vi.fn<MockQueryResult, [MockQueryOptions]>();
const mockUseMutation = vi.fn<MockMutationResult, [unknown]>();
const mockInvalidateQueries = vi.fn();
const mockSetQueryData = vi.fn();

vi.mock('@tanstack/react-query', async () => {
  const actual = await vi.importActual<typeof import('@tanstack/react-query')>(
    '@tanstack/react-query'
  );

  return {
    ...actual,
    useQuery: (options: MockQueryOptions) => mockUseQuery(options),
    useMutation: (options: unknown) => mockUseMutation(options),
    useQueryClient: () => ({
      invalidateQueries: mockInvalidateQueries,
      setQueryData: mockSetQueryData,
    }),
  };
});

const globalScope = globalThis as typeof globalThis & {
  React?: typeof React;
  IS_REACT_ACT_ENVIRONMENT?: boolean;
};

globalScope.React = React;

globalScope.IS_REACT_ACT_ENVIRONMENT = true;

const flushPromises = () => new Promise<void>((resolve) => {
  setTimeout(resolve, 0);
});

describe('TaxTracker deduction badges', () => {
  beforeEach(() => {
    vi.resetModules();
    mockUseQuery.mockReset();
    mockUseMutation.mockReset();
    mockInvalidateQueries.mockReset();
    mockSetQueryData.mockReset();
  });

  afterEach(() => {
    document.body.innerHTML = '';
  });

  it('renders deduction badges for full, partial, and unknown categories', async () => {
    const categories = [
      {
        id: 1,
        name: 'Beauty & Wellness',
        deductionPercentage: 100,
        icon: 'Sparkles',
        color: '#f0f0f0',
        description: 'Cosmetic and wellness expenses related to content creation.',
        examples: ['Facials', 'Makeup'],
        legalExplanation: 'Fully deductible when directly tied to business activities.'
      },
      {
        id: 2,
        name: 'Home Office',
        deductionPercentage: 50,
        icon: 'Calculator',
        color: '#e0e0ff',
        description: 'Shared personal and business expenses for the home office.',
        examples: ['Rent', 'Utilities'],
        legalExplanation: 'Partially deductible based on dedicated workspace usage.'
      }
    ] as const;

    const recentExpenses = [
      {
        id: 101,
        description: 'Professional Photoshoot',
        amount: 25000,
        categoryId: 1,
        expenseDate: '2024-01-10',
        category: categories[0]
      },
      {
        id: 102,
        description: 'Home Office Internet',
        amount: 8000,
        categoryId: 2,
        expenseDate: '2024-02-15',
        category: categories[1]
      },
      {
        id: 103,
        description: 'Miscellaneous Supplies',
        amount: 5000,
        categoryId: 999,
        expenseDate: '2024-03-05',
        category: null
      }
    ] as const;

    const totals = { total: 0, deductible: 0, byCategory: {} } as const;

    mockUseQuery.mockImplementation((options: MockQueryOptions): MockQueryResult => {
      const key = Array.isArray(options.queryKey) ? options.queryKey[0] : options.queryKey;
      switch (key) {
        case '/api/expense-categories':
          return { data: categories, isLoading: false, error: null };
        case '/api/expenses/totals':
          return { data: totals, isLoading: false, error: null };
        case '/api/expenses':
          return { data: recentExpenses, isLoading: false, error: null };
        case '/api/expenses/range':
          return { data: [], isLoading: false, error: null };
        default:
          return { data: undefined, isLoading: false, error: null };
      }
    });

    mockUseMutation.mockImplementation((): MockMutationResult => ({
      mutate: () => undefined,
      mutateAsync: async () => undefined,
      isPending: false,
      reset: () => undefined,
    }));

    const { default: TaxTracker } = await import('../tax-tracker');

    const container = document.createElement('div');
    document.body.appendChild(container);
    const root = createRoot(container);

    await act(async () => {
      root.render(<TaxTracker />);
      await flushPromises();
    });

    const badges = Array.from(
      container.querySelectorAll('[data-testid="recent-expense-deduction-badge"]')
    );

    expect(badges).toHaveLength(3);
    expect(badges[0]?.textContent).toBe('100% Deductible');
    expect(badges[1]?.textContent).toBe('50% Deductible (Home Office)');
    expect(badges[2]?.textContent).toBe('—% Deductible');

    await act(async () => {
      root.unmount();
    });
    container.remove();
  });
});
client/src/pages/tax-tracker.tsx
+42-3
@@ -52,50 +52,85 @@ interface ExpenseCategory {
}

interface Expense {
  id: number;
  description: string;
  amount: number;
  categoryId: number;
  expenseDate: string;
  receiptUrl?: string;
  receiptFileName?: string;
  notes?: string;
  category: ExpenseCategory | null;
  date?: string;
}

const usdFormatter = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2
});

const formatCurrency = (amountInCents: number | null | undefined) =>
  usdFormatter.format((amountInCents ?? 0) / 100);

const DEDUCTION_FALLBACK_TEXT = '—% Deductible';

const formatDeductionPercentage = (deductionPercentage: number | null | undefined): string => {
  if (typeof deductionPercentage !== 'number' || Number.isNaN(deductionPercentage)) {
    return '—%';
  }

  return `${deductionPercentage}%`;
};

const formatDeductionBadgeText = (
  deductionPercentage: number | null | undefined,
  label?: string | null
): string => {
  const percentageText = formatDeductionPercentage(deductionPercentage);

  if (percentageText === '—%') {
    return DEDUCTION_FALLBACK_TEXT;
  }

  const trimmedLabel = label?.trim();
  const shouldShowLabel =
    typeof deductionPercentage === 'number' &&
    deductionPercentage < 100 &&
    Boolean(trimmedLabel);

  const labelSuffix = shouldShowLabel ? ` (${trimmedLabel})` : '';

  return `${percentageText} Deductible${labelSuffix}`;
};

const formatCategoryDeduction = (
  category: Pick<ExpenseCategory, 'deductionPercentage' | 'name'> | null | undefined
): string => formatDeductionBadgeText(category?.deductionPercentage, category?.name);

const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
  const [selectedCategory, setSelectedCategory] = useState<ExpenseCategory | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [showExpenseModal, setShowExpenseModal] = useState(false);
  const [showReceiptModal, setShowReceiptModal] = useState(false);
  const [calendarDate, setCalendarDate] = useState<Date>(new Date());
  const [expenseForm, setExpenseForm] = useState({
    description: '',
    amount: '',
    category: '',
    date: format(new Date(), 'yyyy-MM-dd'),
    notes: ''
  });
  const [receiptFile, setReceiptFile] = useState<File | null>(null);
  const [receiptExpenseId, setReceiptExpenseId] = useState('');
  const [expenseError, setExpenseError] = useState<string | null>(null);
  
  const queryClient = useQueryClient();

  const { data: expenseCategories = [], isLoading: categoriesLoading, error: categoriesError } = useQuery<ExpenseCategory[]>({
    queryKey: ['/api/expense-categories'],
    queryFn: async () => {
      const res = await apiRequest('GET', '/api/expense-categories');
      return res.json();
    }
@@ -359,88 +394,92 @@ const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
                <CardContent className="space-y-3">
                  {recentExpenses.length === 0 ? (
                    <div className="text-center py-8">
                      <Receipt className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                      <p className="text-gray-500 mb-4">No expenses tracked yet</p>
                      <Button 
                        onClick={() => setShowExpenseModal(true)}
                        size="sm"
                        className="bg-gradient-to-r from-purple-500 to-pink-500"
                      >
                        Add Your First Expense
                      </Button>
                    </div>
                  ) : (
                    recentExpenses.slice(0, 3).map((expense, index) => (
                      <div 
                        key={expense.id}
                        className="flex items-center justify-between p-3 rounded-xl bg-gray-50 hover:bg-gray-100 transition-colors"
                      >
                        <div>
                          <p className="font-medium text-gray-900">{expense.description}</p>
                          <p className="text-sm text-gray-500">{expense.category?.name ?? 'Uncategorized'} • {format(parseISO(expense.date || expense.expenseDate), 'MMM d, yyyy')}</p>
                        </div>
                        <div className="text-right">
                          <p className="font-bold text-gray-900">{formatCurrency(expense.amount)}</p>
                          <Badge variant="secondary" className="bg-green-100 text-green-700">
                            100% Deductible
                          <Badge
                            variant="secondary"
                            className="bg-green-100 text-green-700"
                            data-testid="recent-expense-deduction-badge"
                          >
                            {formatCategoryDeduction(expense.category)}
                          </Badge>
                        </div>
                      </div>
                    ))
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="categories" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {categoriesLoading ? (
                <div className="text-center py-8">
                  <p className="text-gray-500">Loading categories...</p>
                </div>
              ) : (
                expenseCategories.map((category, index) => {
                  const IconComponent = iconMap[category.icon] || Sparkles;
                  return (
                    <div key={category.id}>
                      <Card 
                        className="bg-white/80 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 cursor-pointer group"
                        onClick={() => setSelectedCategory(category)}
                      >
                        <CardContent className="p-6">
                          <div className="space-y-4">
                            <div className="flex items-center justify-between">
                              <div 
                                className="p-3 rounded-xl text-white shadow-lg"
                                style={{ backgroundColor: category.color }}
                              >
                                <IconComponent className="h-6 w-6" />
                              </div>
                              <Badge className="bg-green-100 text-green-700">
                                {category.deductionPercentage}% Deductible
                                {formatCategoryDeduction(category)}
                              </Badge>
                            </div>
                          
                          <div>
                            <h3 className="font-bold text-lg text-gray-900 group-hover:text-purple-600 transition-colors">
                              {category.name}
                            </h3>
                            <p className="text-sm text-gray-600 mt-1">
                              {category.description}
                            </p>
                          </div>

                          <div className="pt-2 border-t border-gray-100">
                            <p className="text-xs text-gray-500 mb-2">Examples:</p>
                            <div className="flex flex-wrap gap-1">
                              {category.examples.slice(0, 3).map((example, idx) => (
                                <Badge key={idx} variant="outline" className="text-xs">
                                  {example}
                                </Badge>
                              ))}
                              {category.examples.length > 3 && (
                                <Badge variant="outline" className="text-xs">
                                  +{category.examples.length - 3} more
                                </Badge>
                              )}
