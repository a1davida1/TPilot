diff --git a/server/routes.ts.old b/server/routes.ts.old
index c7cb31414be8f336aee099fb58d009196fa0eaf8..5b28d2cf201fe61fd9cb20c0f99c8f65982b3172 100644
--- a/server/routes.ts.old
+++ b/server/routes.ts.old
@@ -1,45 +1,46 @@
-import type { Express } from "express";
+import type { Express, Response, NextFunction } from "express";
 import express from "express";
 import { createServer, type Server } from "http";
 import session from 'express-session';
 import path from 'path';
 
 // Security and middleware
 import { validateEnvironment, securityMiddleware, ipLoggingMiddleware, errorHandler, logger } from "./middleware/security.js";
 import { authenticateToken } from "./middleware/auth.js";
 
 // Route modules
 import { authRoutes } from "./routes/auth.js";
 import { uploadRoutes } from "./routes/upload.js";
 
 // Existing imports
 import { storage } from "./storage.js";
 import { setupAuth } from "./auth.js";
 import { setupAdminRoutes } from "./admin-routes.js";
 import { configureSocialAuth, socialAuthRoutes } from "./social-auth-config.js";
 import { visitorAnalytics } from "./visitor-analytics.js";
+import type { AnalyticsRequest } from "./visitor-analytics.js";
 import { registerApiRoutes } from "./api-routes.js";
 import { registerPolicyRoutes } from "./policy-routes.js";
 import { registerRedditRoutes } from "./reddit-routes.js";
 import { registerAnalyticsRoutes } from "./analytics-routes.js";
 import { createLead, confirmLead } from "./api/leads.js";
 import { getLeads } from "./api/admin-leads.js";
 import { captionRouter } from "./routes/caption.js";
 import { registerSocialMediaRoutes } from "./social-media-routes.js";
 
 // Get secure session secret (no fallbacks)
 const SESSION_SECRET = process.env.SESSION_SECRET!;
 const IS_PRODUCTION = process.env.NODE_ENV === 'production';
 
 export async function registerRoutes(app: Express): Promise<Server> {
   // ==========================================
   // VALIDATE ENVIRONMENT & APPLY SECURITY
   // ==========================================
   
   // Validate required environment variables first
   validateEnvironment();
   
   // Apply security middleware
   app.use(securityMiddleware);
   
   // Apply IP logging middleware
diff --git a/server/routes.ts.old b/server/routes.ts.old
index c7cb31414be8f336aee099fb58d009196fa0eaf8..5b28d2cf201fe61fd9cb20c0f99c8f65982b3172 100644
--- a/server/routes.ts.old
+++ b/server/routes.ts.old
@@ -59,51 +60,51 @@ const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-i
 
 // Auth middleware
 interface AuthRequest extends express.Request {
   user?: unknown;
 }
 
 export const authenticateToken = async (req: AuthRequest, res: express.Response, next: express.NextFunction) => {
   const authHeader = req.headers['authorization'];
   const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
 
   if (!token) {
     return res.status(401).json({ message: 'Access token required' });
   }
 
   try {
     const decoded = jwt.verify(token, JWT_SECRET) as any;
     req.user = decoded;
     next();
   } catch (error) {
     return res.status(403).json({ message: 'Invalid token' });
   }
 };
 
 export async function registerRoutes(app: Express): Promise<Server> {
   // Visitor analytics middleware
-  app.use((req, res, next) => {
+  app.use((req: AnalyticsRequest, res: Response, next: NextFunction) => {
     // Only track non-API routes to avoid noise
     if (!req.path.startsWith('/api/') && !req.path.startsWith('/uploads/')) {
       visitorAnalytics.trackPageView(req, req.path);
     }
     next();
   });
 
   // Add IP logging middleware
   app.use(logUserIP);
 
   // Session configuration
   app.use(session({
     secret: process.env.SESSION_SECRET || 'your-session-secret-change-in-production',
     resave: false,
     saveUninitialized: false,
     cookie: {
       secure: process.env.NODE_ENV === 'production',
       httpOnly: true,
       maxAge: 24 * 60 * 60 * 1000 // 24 hours
     }
   }));
 
   // Setup authentication
   setupAuth(app);
   setupAdminRoutes(app);
