 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/enhanced-ai-generator.tsx b/client/src/components/enhanced-ai-generator.tsx
index 129697818b1ed1cd7e115c679224fbe8e51b4222..208b6c6ba3af2b17a2d77072da162558154f0ebd 100644
--- a/client/src/components/enhanced-ai-generator.tsx
+++ b/client/src/components/enhanced-ai-generator.tsx
@@ -139,70 +139,207 @@ export function EnhancedAIGenerator({ onContentGenerated, isGuestMode = false }:
       id: 'bedroom-scene',
       title: 'Cozy Bedroom',
       icon: '🛏️',
       prompt: 'Intimate bedroom content with cozy and inviting atmosphere',
       description: 'Intimate, cozy bedroom vibes',
       color: 'bg-gradient-to-br from-amber-50 to-orange-100 hover:from-amber-100 hover:to-orange-200 text-amber-900 border-2 border-amber-200 hover:border-amber-300 shadow-sm hover:shadow-md'
     },
     {
       id: 'outdoor-adventure',
       title: 'Nature Beauty',
       icon: '🌸',
       prompt: 'Adventurous outdoor content with natural beauty and freedom',
       description: 'Beautiful outdoor & nature shots',
       color: 'bg-gradient-to-br from-emerald-50 to-teal-100 hover:from-emerald-100 hover:to-teal-200 text-emerald-900 border-2 border-emerald-200 hover:border-emerald-300 shadow-sm hover:shadow-md'
     },
     {
       id: 'professional-tease',
       title: 'Office Chic',
       icon: '💼',
       prompt: 'Professional yet seductive content balancing sophistication with allure',
       description: 'Sophisticated office/professional looks',
       color: 'bg-gradient-to-br from-slate-50 to-gray-100 hover:from-slate-100 hover:to-gray-200 text-slate-900 border-2 border-slate-200 hover:border-slate-300 shadow-sm hover:shadow-md'
     }
   ];
 
+  const basePhotoInstructions: ContentGeneration["photoInstructions"] = {
+    lighting: "Soft natural lighting",
+    cameraAngle: "Eye-level framing",
+    composition: "Balanced composition highlighting the subject",
+    styling: "Signature outfit and accessories",
+    mood: "Confident and inviting",
+    technicalSettings: "Auto settings"
+  };
+
+  const normalizePhotoInstructions = (
+    instructions: GeneratedContent["photoInstructions"]
+  ): ContentGeneration["photoInstructions"] => {
+    if (instructions && typeof instructions === "object" && !Array.isArray(instructions)) {
+      const typedInstructions = instructions as Record<string, unknown>;
+
+      return {
+        lighting:
+          typeof typedInstructions.lighting === "string" && typedInstructions.lighting.trim().length > 0
+            ? typedInstructions.lighting
+            : basePhotoInstructions.lighting,
+        cameraAngle:
+          typeof typedInstructions.cameraAngle === "string" && typedInstructions.cameraAngle.trim().length > 0
+            ? typedInstructions.cameraAngle
+            : basePhotoInstructions.cameraAngle,
+        composition:
+          typeof typedInstructions.composition === "string" && typedInstructions.composition.trim().length > 0
+            ? typedInstructions.composition
+            : basePhotoInstructions.composition,
+        styling:
+          typeof typedInstructions.styling === "string" && typedInstructions.styling.trim().length > 0
+            ? typedInstructions.styling
+            : basePhotoInstructions.styling,
+        mood:
+          typeof typedInstructions.mood === "string" && typedInstructions.mood.trim().length > 0
+            ? typedInstructions.mood
+            : basePhotoInstructions.mood,
+        technicalSettings:
+          typeof typedInstructions.technicalSettings === "string" && typedInstructions.technicalSettings.trim().length > 0
+            ? typedInstructions.technicalSettings
+            : basePhotoInstructions.technicalSettings
+      };
+    }
+
+    if (typeof instructions === "string" && instructions.trim().length > 0) {
+      return {
+        ...basePhotoInstructions,
+        composition: instructions,
+        mood: instructions
+      };
+    }
+
+    return basePhotoInstructions;
+  };
+
+  const normalizeTitles = (titles: unknown): string[] => {
+    if (Array.isArray(titles)) {
+      const filtered = titles.filter((title): title is string => typeof title === "string" && title.trim().length > 0);
+      if (filtered.length > 0) {
+        return filtered;
+      }
+    }
+
+    if (typeof titles === "string" && titles.trim().length > 0) {
+      return [titles];
+    }
+
+    return ["Generated content ready to share"];
+  };
+
   const generateContentMutation = useMutation<GeneratedContent, Error, GenerateContentVariables>({
     mutationFn: async (data) => {
       const effectivePrompt = data.customPrompt || data.prompt || "";
       const response = await apiRequest("POST", "/api/generate-unified", {
         mode: "text",
         platform: data.platform || "reddit",
         style: data.style || "confident",
         theme: data.theme || "general",
         prompt: effectivePrompt,
         customInstructions: effectivePrompt,
         includePromotion:
           typeof data.includePromotion === "boolean"
             ? data.includePromotion
             : data.allowsPromotion !== "none"
       });
       return (await response.json()) as GeneratedContent;
     },
-    onSuccess: (data) => {
+    onSuccess: (data, variables) => {
       setGeneratedContent(data);
-      onContentGenerated(data);
+
+      const candidate = data as Record<string, unknown>;
+      const normalizedTitles = normalizeTitles(candidate.titles ?? data.titles);
+      const normalizedPhotoInstructions = normalizePhotoInstructions(data.photoInstructions);
+      const rawId = candidate.id;
+      const id = typeof rawId === "number" ? rawId : Date.now();
+      const rawUserId = candidate.userId;
+      const userId = typeof rawUserId === "number" ? rawUserId : null;
+      const rawCreatedAt = candidate.createdAt;
+      const createdAt =
+        rawCreatedAt instanceof Date
+          ? rawCreatedAt
+          : typeof rawCreatedAt === "string" && rawCreatedAt.trim().length > 0
+            ? new Date(rawCreatedAt)
+            : new Date();
+      const resolvedPlatform =
+        (typeof candidate.platform === "string" && candidate.platform.trim().length > 0
+          ? candidate.platform
+          : variables?.platform) || platform;
+      const resolvedStyle =
+        (typeof candidate.style === "string" && candidate.style.trim().length > 0
+          ? candidate.style
+          : variables?.style) || textTone;
+      const resolvedTheme =
+        (typeof candidate.theme === "string" && candidate.theme.trim().length > 0
+          ? candidate.theme
+          : variables?.theme) || photoType;
+      const contentText =
+        typeof data.content === "string" && data.content.trim().length > 0
+          ? data.content
+          : "Content generated successfully. Customize before sharing.";
+      const candidatePrompt = candidate.prompt;
+      const resolvedPrompt =
+        typeof candidatePrompt === "string" && candidatePrompt.trim().length > 0
+          ? candidatePrompt
+          : variables?.customPrompt || variables?.prompt || (customPrompt.trim().length > 0 ? customPrompt : null);
+      const candidateSubreddit = candidate.subreddit;
+      const resolvedSubreddit =
+        typeof candidateSubreddit === "string" && candidateSubreddit.trim().length > 0
+          ? candidateSubreddit
+          : variables?.subreddit || (subreddit.trim().length > 0 ? subreddit : null);
+      const candidateAllowsPromotion = candidate.allowsPromotion;
+      const resolvedAllowsPromotion =
+        typeof candidateAllowsPromotion === "boolean"
+          ? candidateAllowsPromotion
+          : Boolean(variables?.includePromotion ?? includePromotion);
+      const candidateGenerationType = candidate.generationType;
+      const generationType =
+        typeof candidateGenerationType === "string" && candidateGenerationType.trim().length > 0
+          ? candidateGenerationType
+          : "ai";
+
+      const structuredGeneration: ContentGeneration = {
+        id,
+        userId,
+        platform: resolvedPlatform,
+        style: resolvedStyle,
+        theme: resolvedTheme,
+        titles: normalizedTitles,
+        content: contentText,
+        photoInstructions: normalizedPhotoInstructions,
+        prompt: resolvedPrompt || null,
+        subreddit: resolvedSubreddit || null,
+        allowsPromotion: resolvedAllowsPromotion,
+        generationType,
+        createdAt
+      };
+
+      onContentGenerated(structuredGeneration);
 
       // Check if watermark was added (free tier)
       const hasWatermark = data.content?.includes('[via ThottoPilot]') ||
                           data.titles?.[0]?.includes('[via ThottoPilot]');
 
       const description = data.contentSource === 'template'
         ? `Using pre-generated content${hasWatermark ? ' (with watermark)' : ''}`
         : `Generated with ${data.aiProvider || 'service'}`;
 
       toast({
         title: "Content Generated Successfully!",
         description: description
       });
 
       // Show upgrade prompt for free/basic users
       if (data.upgradeMessage) {
         setTimeout(() => {
           toast({
             title: "Want More?",
             description: data.upgradeMessage
           });
         }, 2000);
       }
 
       queryClient.invalidateQueries({ queryKey: ["/api/stats"] });
 
EOF
)