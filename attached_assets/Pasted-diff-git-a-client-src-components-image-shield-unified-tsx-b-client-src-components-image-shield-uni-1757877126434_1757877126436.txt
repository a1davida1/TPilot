diff --git a/client/src/components/image-shield-unified.tsx b/client/src/components/image-shield-unified.tsx
index ac509fad9b6c550be5b47b404e36ccd26b647191..4e794a19a06ebf38e60fe113510d9d9373e4bc57 100644
--- a/client/src/components/image-shield-unified.tsx
+++ b/client/src/components/image-shield-unified.tsx
@@ -45,52 +45,52 @@ interface MediaAsset {
   key: string;
   filename: string;
   bytes: number;
   mime: string;
   visibility: string;
   signedUrl: string;
   createdAt: string;
 }
 
 export function ImageShieldUnified({ userTier = 'guest' }: ImageShieldUnifiedProps) {
   const [selectedFile, setSelectedFile] = useState<File | null>(null);
   const [originalImageUrl, setOriginalImageUrl] = useState<string | null>(null);
   const [isProcessing, setIsProcessing] = useState(false);
   const [protectedImageUrl, setProtectedImageUrl] = useState<string | null>(null);
   const [preset, setPreset] = useState<'light' | 'standard' | 'heavy'>('standard');
   const [customSettings, setCustomSettings] = useState<ImageProcessingOptions>(protectionPresets.standard);
   const [useCustom, setUseCustom] = useState(false);
   const [showComparison, setShowComparison] = useState(false);
   const [dragActive, setDragActive] = useState(false);
   const [selectedTags, setSelectedTags] = useState<string>('');
   const [selectedImage, setSelectedImage] = useState<MediaAsset | null>(null);
   const fileInputRef = useRef<HTMLInputElement>(null);
   const galleryInputRef = useRef<HTMLInputElement>(null);
   const { toast } = useToast();
   const queryClient = useQueryClient();
-  // @ts-ignore - token is available in extended auth context
-  const { token } = useAuth() as any;
+  // @ts-expect-error - token is available in extended auth context
+  const { token } = useAuth() as { token?: string };
 
   const isProUser = userTier === 'pro';
   const showGallery = isProUser; // Only Pro users see gallery
 
   // Authenticated API request helper
   const authenticatedRequest = async (url: string, method: string = 'GET', data?: unknown) => {
     let body: FormData | string | undefined;
     const headers: { [key: string]: string } = {
       'Authorization': `Bearer ${token}`
     };
     
     if (data instanceof FormData) {
       body = data;
     } else if (data) {
       headers['Content-Type'] = 'application/json';
       body = JSON.stringify(data);
     }
     
     const response = await fetch(url, {
       method,
       headers,
       body
     });
     
     if (!response.ok) {
