diff --git a/server/middleware/require-tier.ts b/server/middleware/require-tier.ts
index ee58cca..fe04bb8 100644
--- a/server/middleware/require-tier.ts
+++ b/server/middleware/require-tier.ts
@@ -4,11 +4,11 @@ import { db } from "../db.js";
 import { users, subscriptions } from "../../shared/schema.js";
 import { eq } from "drizzle-orm";

-const ranks = ["starter","pro","premium","enterprise"] as const;
+const ranks = ["free", "starter", "pro"] as const;
 type Tier = typeof ranks[number];

 function rankOf(tier: string | null | undefined): number {
-  const i = ranks.indexOf((tier ?? "starter") as Tier);
+  const i = ranks.indexOf((tier ?? "free") as Tier);
   return i >= 0 ? i : 0;
 }

@@ -20,14 +20,14 @@ export function requireTier(minTier: Tier): RequestHandler {

       // 1) prefer users.tier if exists
       const u = (await db.select({ tier: users.tier }).from(users).where(eq(users.id, uid)).limit(1))[0];
-      let tier = u?.tier ?? "starter";
+      let tier = u?.tier ?? "free";

       // 2) if users.tier absent/unknown, check subscriptions
-      if (!u?.tier || u.tier === "starter") {
+      if (!u?.tier || u.tier === "free" || u.tier === "starter") {
         const sub = (await db.select({
           status: subscriptions.status, plan: subscriptions.plan
         }).from(subscriptions).where(eq(subscriptions.userId, uid)).limit(1))[0];
-        if (sub?.status === "active" && sub.plan) tier = sub.plan; // 'pro' or 'premium'
+        if (sub?.status === "active" && sub.plan) tier = sub.plan as Tier; // 'starter' or 'pro'
       }

       if (rankOf(tier) < rankOf(minTier)) {
         return res.status(403).json({ error: "Insufficient tier" });
diff --git a/server/middleware/tiered-rate-limit.ts b/server/middleware/tiered-rate-limit.ts
index b0d0230..0d75983 100644
--- a/server/middleware/tiered-rate-limit.ts
+++ b/server/middleware/tiered-rate-limit.ts
@@ -21,11 +21,6 @@ const rateLimitConfigs = {
     max: 200,
     message: "Rate limit reached. Please wait a moment before trying again."
   },
-  premium: {
-    windowMs: 60000,
-    max: 1000,
-    message: "Rate limit reached. Please wait a moment before trying again."
-  },
   admin: {
     windowMs: 60000,
     max: 10000,
@@ -39,28 +34,24 @@ const featureLimits = {
     free: { windowMs: 3600000, max: 5, message: "You've reached your free content generation limit. Upgrade to Pro for more!" }, // 5 per hour
     starter: { windowMs: 3600000, max: 25, message: "Content generation limit reached. Please wait before trying again." }, // 25 per hour
     pro: { windowMs: 3600000, max: 100, message: "Content generation limit reached. Please wait before trying again." }, // 100 per hour
-    premium: { windowMs: 3600000, max: 500, message: "Content generation limit reached. Please wait before trying again." }, // 500 per hour
     admin: { windowMs: 3600000, max: 10000, message: "Admin content generation limit reached." }
   },
   imageProtection: {
     free: { windowMs: 3600000, max: 3, message: "You've reached your free image protection limit. Upgrade to Pro for more!" }, // 3 per hour
     starter: { windowMs: 3600000, max: 15, message: "Image protection limit reached. Please wait before trying again." }, // 15 per hour
     pro: { windowMs: 3600000, max: 50, message: "Image protection limit reached. Please wait before trying again." }, // 50 per hour
-    premium: { windowMs: 3600000, max: 200, message: "Image protection limit reached. Please wait before trying again." }, // 200 per hour
     admin: { windowMs: 3600000, max: 10000, message: "Admin image protection limit reached." }
   },
   postScheduling: {
     free: { windowMs: 86400000, max: 5, message: "You've reached your free post scheduling limit. Upgrade to Pro for more!" }, // 5 per day
     starter: { windowMs: 86400000, max: 25, message: "Post scheduling limit reached. Please wait before trying again." }, // 25 per day
     pro: { windowMs: 86400000, max: 100, message: "Post scheduling limit reached. Please wait before trying again." }, // 100 per day
-    premium: { windowMs: 86400000, max: 500, message: "Post scheduling limit reached. Please wait before trying again." }, // 500 per day
     admin: { windowMs: 86400000, max: 10000, message: "Admin post scheduling limit reached." }
   },
   apiAccess: {
     free: { windowMs: 3600000, max: 100, message: "You've reached your free API access limit. Upgrade to Pro for more!" }, // 100 per hour
     starter: { windowMs: 3600000, max: 500, message: "API access limit reached. Please wait before trying again." }, // 500 per hour
     pro: { windowMs: 3600000, max: 2000, message: "API access limit reached. Please wait before trying again." }, // 2000 per hour
-    premium: { windowMs: 3600000, max: 10000, message: "API access limit reached. Please wait before trying again." }, // 10000 per hour
     admin: { windowMs: 3600000, max: 100000, message: "Admin API access limit reached." }
   }
 };
diff --git a/server/start-production.js b/server/start-production.js
index f2826e0..36ad41e 100644
--- a/server/start-production.js
+++ b/server/start-production.js
@@ -4,9 +4,9 @@
 process.env.NODE_ENV = 'production';

 // Use tsx to run TypeScript directly in production
-import('tsx').then(() => {
-  require('./index.ts');
-}).catch(err => {
+import('tsx')
+  .then(() => import('./index.ts'))
+  .catch(err => {
   console.error('Failed to start production server:', err);
   process.exit(1);
 });
diff --git a/tailwind.config.ts b/tailwind.config.ts
index 8e06951..151fb4a 100644
--- a/tailwind.config.ts
+++ b/tailwind.config.ts
@@ -1,4 +1,6 @@
 import type { Config } from "tailwindcss";
+import tailwindcssAnimate from "tailwindcss-animate";
+import typography from "@tailwindcss/typography";

 export default {
   darkMode: ["class"],
@@
   plugins: [
-    require("tailwindcss-animate"),
-    require("@tailwindcss/typography"),
+    tailwindcssAnimate,
+    typography,
     // Custom plugin for accessibility utilities
     function({ addUtilities }: unknown) {
       addUtilities({
diff --git a/tests/unit/email-service.test.ts b/tests/unit/email-service.test.ts
index 26bf36b..6d31c86 100644
--- a/tests/unit/email-service.test.ts
+++ b/tests/unit/email-service.test.ts
@@ -137,7 +137,7 @@ describe('Email Service - SendGrid Integration', () => {
       emailService.sendVerificationEmail('user@test.com', 'testuser', 'token123')
     ).rejects.toThrow('SendGrid API rate limit exceeded');

-      const { safeLog } = require('../../server/lib/logger-utils');
+      const { safeLog } = await import('../../server/lib/logger-utils.ts');
       expect(safeLog).toHaveBeenCalledWith(
         'error',
         'Verification email send failed',
@@ -182,7 +182,7 @@ describe('Email Service - SendGrid Integration', () => {
       emailService.sendWelcomeEmail('user@test.com', 'testuser')
     ).resolves.toBeUndefined();

-      const { safeLog } = require('../../server/lib/logger-utils');
+      const { safeLog } = await import('../../server/lib/logger-utils.ts');
       expect(safeLog).toHaveBeenCalledWith(
         'error',
         'Welcome email send failed',
diff --git a/tests/unit/expenses/receipt-upload.test.ts b/tests/unit/expenses/receipt-upload.test.ts
index 7b7b7f0..b913779 100644
--- a/tests/unit/expenses/receipt-upload.test.ts
+++ b/tests/unit/expenses/receipt-upload.test.ts
@@ -97,9 +97,9 @@ describe('Receipt Upload with ImageShield Protection', () => {
       expect(mockStorage.updateExpense).toHaveBeenCalled();
     });

-    test('should not apply watermark for premium users', async () => {
+    test('should not apply watermark for pro users', async () => {
       mockAuthenticateToken.mockImplementation((req: express.Request & { user?: { id: number; tier: string } }, res: express.Response, next: express.NextFunction) => {
-        req.user = { id: 3, tier: 'premium' };
+        req.user = { id: 3, tier: 'pro' };
         next();
       });

diff --git a/tests/unit/image-generator/ai-service.test.ts b/tests/unit/image-generator/ai-service.test.ts
index 66afe68..4051715 100644
--- a/tests/unit/image-generator/ai-service.test.ts
+++ b/tests/unit/image-generator/ai-service.test.ts
@@ -350,13 +350,13 @@ describe('AI Service Unit Tests', () => {
         choices: [{
           message: {
             content: JSON.stringify({
-              titles: ['OpenAI premium generation'],
+              titles: ['OpenAI pro generation'],
               content: 'High-quality but expensive content',
               photoInstructions: {
                 lighting: 'professional studio',
                 cameraAngle: 'cinematic',
                 composition: 'advanced',
-                styling: 'premium',
+                styling: 'pro',
                 mood: 'luxurious',
                 technicalSettings: 'expert'
               }
diff --git a/tests/unit/payment-providers-fixed.test.ts b/tests/unit/payment-providers-fixed.test.ts
index d7954aa..00837a6 100644
--- a/tests/unit/payment-providers-fixed.test.ts
+++ b/tests/unit/payment-providers-fixed.test.ts
@@ -65,7 +65,7 @@ describe('Payment Providers - Fixed', () => {
       // Updated expectation to match actual error handling
       await expect(provider.createCheckout({
         userId: 'user456',
-        planId: 'premium'
+        planId: 'pro'
       })).rejects.toThrow('Unexpected end of JSON input');

       global.fetch = originalFetch;
@@ -90,7 +90,7 @@ describe('Payment Providers - Fixed', () => {
       const provider = makeCoinbase();
       await expect(provider.createCheckout({
         userId: 'user456',
-        planId: 'premium'
+        planId: 'pro'
       })).rejects.toThrow('Invalid response from Coinbase Commerce API');

       global.fetch = originalFetch;
diff --git a/tests/unit/payment-providers.test.ts b/tests/unit/payment-providers.test.ts
index fda3423..356b0ef 100644
--- a/tests/unit/payment-providers.test.ts
+++ b/tests/unit/payment-providers.test.ts
@@ -105,7 +105,7 @@ describe('Payment Providers', () => {

       const result = await provider.createCheckout({
         userId: 'user456',
-        planId: 'premium',
+        planId: 'pro',
         amountCents: 4999,
         returnUrl: 'https://test.com/success'
       });
@@ -130,7 +130,7 @@ describe('Payment Providers', () => {
       const provider = makeCoinbase();
       await expect(provider.createCheckout({
         userId: 'user456',
-        planId: 'premium'
+        planId: 'pro'
       })).rejects.toThrow('Failed to create Coinbase Commerce checkout session');

       // Restore original fetch
@@ -151,7 +151,7 @@ describe('Payment Providers', () => {
       const provider = makeCoinbase();
       await expect(provider.createCheckout({
         userId: 'user456',
-        planId: 'premium'
+        planId: 'pro'
       })).rejects.toThrow('Payment provider \"coinbase\" is disabled (missing secrets).');
     });

@@ -256,7 +256,7 @@ describe('Payment Providers', () => {
         const provider = makeCoinbase();
         await expect(provider.createCheckout({
           userId: 'user456',
-          planId: 'premium'
+          planId: 'pro'
         })).rejects.toThrow('Network timeout');

         global.fetch = originalFetch;
@@ -277,7 +277,7 @@ describe('Payment Providers', () => {
         const provider = makeCoinbase();
         await expect(provider.createCheckout({
           userId: 'user456',
-          planId: 'premium'
+          planId: 'pro'
         })).rejects.toThrow('Unexpected end of JSON input');

         global.fetch = originalFetch;
@@ -302,7 +302,7 @@ describe('Payment Providers', () => {
         const provider = makeCoinbase();
         await expect(provider.createCheckout({
           userId: 'user456',
-          planId: 'premium'
+          planId: 'pro'
         })).rejects.toThrow('Invalid response from Coinbase Commerce API');

         global.fetch = originalFetch;
@@ -322,7 +322,7 @@ describe('Payment Providers', () => {
         const provider = makeCoinbase();
         await expect(provider.createCheckout({
           userId: 'user456',
-          planId: 'premium'
+          planId: 'pro'
         })).rejects.toThrow('Failed to create Coinbase Commerce checkout session');

         global.fetch = originalFetch;
diff --git a/vite.config.js b/vite.config.js
index 48a0e0b..8984690 100644
--- a/vite.config.js
+++ b/vite.config.js
@@ -2,6 +2,7 @@ import { defineConfig } from "vite";
 import react from "@vitejs/plugin-react";
 import path from "path";
 import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
+import process from "node:process";

 export default defineConfig({
     plugins: [
