1. Create a new React component (e.g., `client/src/components/compliance/ComplianceStatusDashboard.tsx`) that renders cards or tables for each subreddit, showing dummy data for shadowban status, verification state, next post window, and the last five removals with reasons.
2. Structure the dummy data as an array of subreddit objects with fields like `name`, `shadowbanned`, `verificationStatus`, `nextPostTime`, and `recentRemovals`.
3. Ensure the component adheres to existing design tokens/utilities (Tailwind classes, shared UI primitives).
4. Add the component to the appropriate page (likely the compliance/automation area in `client/src/pages/admin.tsx` or wherever the compliance center will live) behind any necessary lazy imports.
5. Document the dummy data structure so backend integration can later replace it with live data.

Summary

    Clarified the compliance dashboard mock data block so engineers know to swap in a SubredditComplianceStatus[] response and where to find the full contract when the backend is live.

Added docs/compliance-dashboard-data.md to document the payload shape, example response, and integration notes for the upcoming compliance status endpoint.

Testing

    ✅ npm run lint (passes with pre-existing warnings about any usage across the repo).

❌ npm test (halted after widespread pre-existing integration/unit failures involving missing external services and mocks).


client/src/components/compliance/ComplianceStatusDashboard.tsx
+6-1
@@ -16,50 +16,55 @@ export interface SubredditRemoval {
  reason: string;
  actionTaken?: string;
}

/**
 * Shape of the subreddit level compliance metrics expected from the backend.
 * The dashboard currently renders an array of these objects while backend
 * integration is pending.
 * - `name`: Subreddit name without the leading `r/`.
 * - `shadowbanned`: Flag indicating if automation detected a shadowban.
 * - `verificationStatus`: Either `pending`, `review`, or `verified`.
 * - `nextPostTime`: ISO timestamp representing the next compliant posting window.
 * - `recentRemovals`: Chronological list of the latest moderation removals.
 */
export interface SubredditComplianceStatus {
  name: string;
  shadowbanned: boolean;
  verificationStatus: 'pending' | 'review' | 'verified';
  nextPostTime: string;
  recentRemovals: SubredditRemoval[];
}

/**
 * Temporary mocked data. Replace this structure with live compliance results
 * once the moderation ingestion pipeline is wired up.
 *
 * Backend teams can refer to `docs/compliance-dashboard-data.md` for the
 * contract powering this dashboard. When the API is ready, swap this array
 * with the fetched response typed as `SubredditComplianceStatus[]` to unlock
 * live telemetry without updating the UI layer.
 */
const dummyComplianceData: SubredditComplianceStatus[] = [
  {
    name: 'CreatorSupport',
    shadowbanned: false,
    verificationStatus: 'verified',
    nextPostTime: '2024-03-09T18:30:00Z',
    recentRemovals: [
      {
        id: 'CS-2051',
        removedAt: '2024-03-07T21:15:00Z',
        reason: 'Automod: Affiliate link outside allowed domains',
        actionTaken: 'Auto-removed'
      },
      {
        id: 'CS-2049',
        removedAt: '2024-03-06T16:03:00Z',
        reason: 'Manual: Low-effort promotion',
        actionTaken: 'Warning issued'
      },
      {
        id: 'CS-2045',
        removedAt: '2024-03-05T09:47:00Z',
        reason: 'Automod: Missing flair'
      },
@@ -258,26 +263,26 @@ export function ComplianceStatusDashboard() {
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Removed At</TableHead>
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Reason</TableHead>
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Action</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {subreddit.recentRemovals.map((removal) => (
                      <TableRow key={removal.id} className="border-gray-100">
                        <TableCell className="font-mono text-xs text-gray-600">{removal.id}</TableCell>
                        <TableCell className="text-sm text-gray-700">{formatDateTime(removal.removedAt)}</TableCell>
                        <TableCell className="text-sm text-gray-700">{removal.reason}</TableCell>
                        <TableCell className="text-sm text-gray-500">
                          {removal.actionTaken || '—'}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}
}
docs/compliance-dashboard-data.md
New
+59-0
# Compliance Dashboard Data Contract

The admin compliance dashboard currently renders mocked data defined in
`client/src/components/compliance/ComplianceStatusDashboard.tsx`. When the
moderation ingestion service is ready, replace the `dummyComplianceData`
constant with a response returned from the backend that satisfies the interface
below.

```ts
export interface SubredditRemoval {
  id: string; // Stable identifier aligned with the source moderation log entry
  removedAt: string; // ISO 8601 timestamp for when the content was removed
  reason: string; // Human readable description of the removal reason
  actionTaken?: string; // Optional follow up action (warning, escalation, etc.)
}

export interface SubredditComplianceStatus {
  name: string; // Subreddit name without the leading `r/`
  shadowbanned: boolean; // Whether automation detects a shadowban risk
  verificationStatus: 'pending' | 'review' | 'verified'; // Compliance verification stage
  nextPostTime: string; // ISO timestamp for the next safe posting window
  recentRemovals: SubredditRemoval[]; // Most recent moderation removal events
}
```

### Expected backend response

Return an array of `SubredditComplianceStatus` objects ordered by priority or
subreddit name. Each object should include the last five removals in
`recentRemovals`, ensuring the front end can render the moderation table without
additional sorting.

```json
[
  {
    "name": "CreatorSupport",
    "shadowbanned": false,
    "verificationStatus": "verified",
    "nextPostTime": "2024-03-09T18:30:00Z",
    "recentRemovals": [
      {
        "id": "CS-2051",
        "removedAt": "2024-03-07T21:15:00Z",
        "reason": "Automod: Affiliate link outside allowed domains",
        "actionTaken": "Auto-removed"
      }
    ]
  }
]
```

### Integration notes

- Use `SubredditComplianceStatus[]` as the response type so TypeScript enforces
  the contract.
- Keep timestamps in UTC ISO strings; the UI handles localization via
  `Intl.DateTimeFormat`.
- Ensure the API endpoint is accessible to authenticated admin users and cached
  appropriately for fast refreshes inside the dashboard tab.
