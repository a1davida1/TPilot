diff --git a/server/reddit-communities.ts b/server/reddit-communities.ts
@@
-// Reddit Communities Database with real metrics and intelligence
-export interface RedditCommunity {
-  ...
-}
-
-// Comprehensive Reddit communities database
-export const redditCommunitiesDatabase: RedditCommunity[] = [ ... huge array ... ];
+import { db } from './db.js';
+import { redditCommunities, type RedditCommunity, insertRedditCommunitySchema } from '@shared/schema.js';
+import { eq, ilike, desc } from 'drizzle-orm';
+
+export async function listCommunities() {
+  return db.select().from(redditCommunities).orderBy(desc(redditCommunities.members));
+}
+
+export async function searchCommunities(query: string) {
+  const like = `%${query}%`;
+  return db.select()
+    .from(redditCommunities)
+    .where(
+      ilike(redditCommunities.name, like)
+        .or(ilike(redditCommunities.displayName, like))
+        .or(ilike(redditCommunities.description, like))
+    );
+}
+
+export async function createCommunity(data: any) {
+  const value = insertRedditCommunitySchema.parse(data);
+  const [row] = await db.insert(redditCommunities).values(value).returning();
+  return row;
+}
+
+export async function updateCommunity(id: string, data: any) {
+  const value = insertRedditCommunitySchema.partial().parse(data);
+  const [row] = await db.update(redditCommunities).set(value).where(eq(redditCommunities.id, id)).returning();
+  return row;
+}
+
+export async function deleteCommunity(id: string) {
+  await db.delete(redditCommunities).where(eq(redditCommunities.id, id));
+}
+
+export async function getCommunityInsights(communityId: string) {
+  const community = await db.query.redditCommunities.findFirst({ where: eq(redditCommunities.id, communityId) });
+  if (!community) return { bestTimes: [], successTips: [], warnings: [] };
+
+  const successTips: string[] = [];
+  const warnings: string[] = [];
+
+  if ((community.successProbability ?? 0) > 85) successTips.push('High success rate - great choice');
+  if (community.growthTrend === 'up') successTips.push('Growing community - get in early');
+  if (community.competitionLevel === 'low') successTips.push('Low competition - your content will stand out');
+
+  if (community.verificationRequired) warnings.push('Verification required - complete r/GetVerified');
+  if ((community.rules as any)?.minKarma > 50) warnings.push(`Requires ${(community.rules as any).minKarma}+ karma`);
+  if (community.promotionAllowed === 'no') warnings.push('No promotion allowed - content only');
+
+  return { bestTimes: community.bestPostingTimes || [], successTips, warnings };
+}
