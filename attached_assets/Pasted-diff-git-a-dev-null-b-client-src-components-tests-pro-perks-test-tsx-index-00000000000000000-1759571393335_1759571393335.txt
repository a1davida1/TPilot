diff --git a//dev/null b/client/src/components/__tests__/pro-perks.test.tsx
index 0000000000000000000000000000000000000000..5a3f04ad1c703d6741d7d1e0933ba97b47940427 100644
--- a//dev/null
+++ b/client/src/components/__tests__/pro-perks.test.tsx
@@ -0,0 +1,137 @@
+import React from "react";
+import { act } from "react-dom/test-utils";
+import { createRoot } from "react-dom/client";
+import type { Root } from "react-dom/client";
+import { afterEach, beforeEach, describe, expect, it, vi } from "vitest";
+
+const useQueryMock = vi.fn();
+const toastMock = vi.fn();
+
+vi.mock("@tanstack/react-query", () => ({
+  useQuery: (options: unknown) => useQueryMock(options),
+}));
+
+vi.mock("@/hooks/use-toast", () => ({
+  useToast: () => ({ toast: toastMock }),
+}));
+
+vi.mock("next/link", () => ({
+  default: ({ href, children, ...props }: { href: string | { pathname: string }; children: React.ReactNode }) => {
+    const normalized = typeof href === "string" ? href : href.pathname;
+    return (
+      <a href={normalized} {...props}>
+        {children}
+      </a>
+    );
+  }
+}));
+
+vi.mock("@/components/ui/card", () => ({
+  Card: ({ children, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div {...props}>{children}</div>,
+  CardHeader: ({ children, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div {...props}>{children}</div>,
+  CardContent: ({ children, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div {...props}>{children}</div>,
+  CardTitle: ({ children, ...props }: React.HTMLAttributes<HTMLHeadingElement>) => <h2 {...props}>{children}</h2>,
+  CardDescription: ({ children, ...props }: React.HTMLAttributes<HTMLParagraphElement>) => <p {...props}>{children}</p>,
+}));
+
+vi.mock("@/components/ui/button", () => ({
+  Button: ({ children, asChild: _asChild, ...props }: React.PropsWithChildren<{ asChild?: boolean } & React.ButtonHTMLAttributes<HTMLButtonElement>>) => (
+    <button type="button" {...props}>
+      {children}
+    </button>
+  ),
+}));
+
+vi.mock("@/components/ui/badge", () => ({
+  Badge: ({ children, ...props }: React.HTMLAttributes<HTMLSpanElement>) => <span {...props}>{children}</span>,
+}));
+
+vi.mock("@/components/ui/input", () => ({
+  Input: (props: React.InputHTMLAttributes<HTMLInputElement>) => <input {...props} />,
+}));
+
+vi.mock("@/components/ui/dialog", () => ({
+  Dialog: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,
+  DialogContent: ({ children, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div {...props}>{children}</div>,
+  DialogDescription: ({ children, ...props }: React.HTMLAttributes<HTMLParagraphElement>) => <p {...props}>{children}</p>,
+  DialogHeader: ({ children, ...props }: React.HTMLAttributes<HTMLDivElement>) => <div {...props}>{children}</div>,
+  DialogTitle: ({ children, ...props }: React.HTMLAttributes<HTMLHeadingElement>) => <h3 {...props}>{children}</h3>,
+}));
+
+vi.mock("lucide-react", () => new Proxy({}, {
+  get: () => () => null,
+}));
+
+import { ProPerks } from "../pro-perks";
+
+describe("ProPerks referral CTA", () => {
+  let container: HTMLDivElement;
+  let root: Root;
+
+  beforeEach(() => {
+    container = document.createElement("div");
+    document.body.appendChild(container);
+    root = createRoot(container);
+    useQueryMock.mockReset();
+    toastMock.mockReset();
+  });
+
+  afterEach(() => {
+    act(() => {
+      root.unmount();
+    });
+    container.remove();
+  });
+
+  it("renders the referral CTA for Pro members", () => {
+    useQueryMock.mockReturnValue({
+      data: {
+        perks: [
+          {
+            id: "perk-1",
+            name: "Test Perk",
+            category: "affiliate",
+            tier: "pro",
+            description: "A testing perk",
+            commissionRate: "10% recurring",
+            requirements: [],
+            signupProcess: "instant",
+            estimatedEarnings: "$100/mo",
+            status: "available",
+            officialLink: "https://example.com",
+            features: ["Feature"],
+          },
+        ],
+        accessGranted: true,
+      },
+      isLoading: false,
+      isError: false,
+    });
+
+    act(() => {
+      root.render(<ProPerks userTier="pro" />);
+    });
+
+    const referralLink = container.querySelector('a[href="/referral"]');
+    expect(referralLink).not.toBeNull();
+    expect(referralLink?.textContent).toContain("Open referral hub");
+  });
+
+  it("keeps the referral CTA visible for non-Pro users", () => {
+    useQueryMock.mockReturnValue({
+      data: {
+        perks: [],
+        accessGranted: false,
+      },
+      isLoading: false,
+      isError: false,
+    });
+
+    act(() => {
+      root.render(<ProPerks userTier="free" />);
+    });
+
+    const referralLink = container.querySelector('a[href="/referral"]');
+    expect(referralLink).not.toBeNull();
+  });
+});
