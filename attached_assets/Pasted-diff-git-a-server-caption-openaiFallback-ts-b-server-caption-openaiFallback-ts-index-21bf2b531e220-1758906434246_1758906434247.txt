diff --git a/server/caption/openaiFallback.ts b/server/caption/openaiFallback.ts
index 21bf2b531e22018b03d784e97c37ed3baa4d0fcd..6eb765cdce21b737b25be87232431d8f196f0ebf 100644
--- a/server/caption/openaiFallback.ts
+++ b/server/caption/openaiFallback.ts
@@ -1,109 +1,99 @@
 import OpenAI from 'openai';
+import type { ChatCompletionMessageParam } from 'openai/resources/chat/completions';
 import { z } from 'zod';
 import { ensureFallbackCompliance, type FallbackInferenceInput } from './inferFallbackFromFacts';
 import { CaptionItem } from './schema';
 import { serializePromptField } from './promptUtils';
 import { formatVoiceContext } from './voiceTraits';
 
 const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY || '' });
 
 export interface FallbackParams {
   platform: 'instagram' | 'x' | 'reddit' | 'tiktok';
   voice?: string;
   imageUrl?: string;
   theme?: string;
   context?: string;
   existingCaption?: string;
 }
 
 export async function openAICaptionFallback({
   platform,
   voice = "flirty_playful",
   imageUrl,
-<<<<<<< ours
   existingCaption,
   context,
   theme,
 }: FallbackParams): Promise<z.infer<typeof CaptionItem>> {
   // Guard against real API calls in test environment
   if (process.env.NODE_ENV === 'test') {
     const base = {
       caption: existingCaption || "Test fallback caption",
       hashtags: ["#test", "#fallback"],
       safety_level: "normal",
       mood: voice?.includes('flirty') ? 'flirty' : 'confident',
       style: "authentic",
       cta: "Test CTA",
       alt: "Test fallback alt text for deterministic testing",
-      nsfw: false
+      nsfw: false,
     };
     const compliance = ensureFallbackCompliance(
       {
         caption: base.caption,
         hashtags: base.hashtags,
         cta: base.cta,
         alt: base.alt,
       },
       {
         platform,
         context: context ?? existingCaption,
         existingCaption,
         theme,
       }
     );
 
     return CaptionItem.parse({
       ...base,
       hashtags: compliance.hashtags,
       cta: compliance.cta,
       alt: compliance.alt,
     });
   }
-  let messages: { role: "system" | "user" | "assistant"; content: string | { type: string; image_url?: { url: string }; text?: string }[] }[] = [];
+
+  let messages: ChatCompletionMessageParam[] = [];
   const sanitizedExistingCaption = existingCaption ? serializePromptField(existingCaption) : undefined;
   const voiceContext = formatVoiceContext(voice);
   const systemVoiceSuffix = voiceContext ? `\n${voiceContext}` : '';
 
   const fallbackContext = context ?? existingCaption ?? sanitizedExistingCaption;
   const fallbackParamsForCompliance: FallbackInferenceInput = {
     platform,
     context: fallbackContext,
     existingCaption,
     theme,
   };
-=======
-  existingCaption
-}: {
-  platform: "instagram" | "x" | "reddit" | "tiktok";
-  voice?: string;
-  imageUrl?: string;
-  existingCaption?: string;
-}): Promise<z.infer<typeof CaptionItem>> {
-  // Analyze image if provided
-  let messages: any[] = [];
->>>>>>> theirs
 
   if (imageUrl && openai) {
     try {
       console.log('OpenAI fallback: Analyzing image for accurate captions');
 
       if (imageUrl.startsWith('data:')) {
         // For data URLs, we can send directly to OpenAI vision
         messages = [
           {
             role: "system",
             content: `You are an expert social media caption writer. Analyze the image carefully and create engaging ${voice} content for ${platform} that directly relates to what you see.${systemVoiceSuffix}
 
 Return ONLY a JSON object with this structure:
 {
   "caption": "engaging caption text that describes what's actually in the image",
   "hashtags": ["#relevant", "#to", "#image"],
   "safety_level": "safe_for_work",
   "mood": "${voice.includes('flirty') ? 'flirty' : 'confident'}",
   "style": "authentic",
   "cta": "relevant call to action",
   "alt": "detailed description of what's actually in the image",
   "nsfw": false
 }`
           },
           {
diff --git a/server/caption/openaiFallback.ts b/server/caption/openaiFallback.ts
index 21bf2b531e22018b03d784e97c37ed3baa4d0fcd..6eb765cdce21b737b25be87232431d8f196f0ebf 100644
--- a/server/caption/openaiFallback.ts
+++ b/server/caption/openaiFallback.ts
@@ -223,26 +213,26 @@ Return ONLY a JSON object with this structure:
   } catch (error) {
     console.error("Error calling OpenAI API:", error);
     const fallback = ensureFallbackCompliance(
       {
         caption: sanitizedExistingCaption,
         hashtags: [],
         cta: undefined,
         alt: undefined,
       },
       fallbackParamsForCompliance
     );
 
     return CaptionItem.parse({
       caption: sanitizedExistingCaption
         ? `Could not generate new caption. Original: ${sanitizedExistingCaption}`
         : 'Error generating caption.',
       hashtags: fallback.hashtags,
       safety_level: 'normal',
       mood: 'neutral',
       style: 'error',
       cta: fallback.cta,
       alt: fallback.alt,
       nsfw: false,
     });
   }
-}
+}
