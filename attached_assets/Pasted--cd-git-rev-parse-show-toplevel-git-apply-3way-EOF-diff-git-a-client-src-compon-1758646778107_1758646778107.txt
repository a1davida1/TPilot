 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/reddit-communities.tsx b/client/src/components/reddit-communities.tsx
index 65a64a92a2aaf9d4b8b9701483a245a0f0f8d93b..d8e75da4a978c2bce540a0397a66802ca85e06e8 100644
--- a/client/src/components/reddit-communities.tsx
+++ b/client/src/components/reddit-communities.tsx
@@ -9,51 +9,58 @@ import {
   SelectItem,
   SelectTrigger,
 } from "@/components/ui/select";
 import {
   Table,
   TableBody,
   TableCell,
   TableHead,
   TableHeader,
   TableRow,
 } from "@/components/ui/table";
 import { 
   Users, 
   TrendingUp, 
   Shield, 
   Megaphone, 
   Search,
   ChevronUp,
   ChevronDown,
   CheckCircle,
   XCircle,
 } from "lucide-react";
 import { useQuery } from "@tanstack/react-query";
 import { apiRequest } from "@/lib/queryClient";
 import type { RedditCommunity, PostingLimits, RedditCommunitySellingPolicy } from "@shared/schema";
-import { GROWTH_TRENDS, GROWTH_TREND_LABELS, getGrowthTrendLabel, growthTrendSchema } from "@shared/growth-trends";
+import {
+  GROWTH_TRENDS,
+  GROWTH_TREND_LABELS,
+  getGrowthTrendLabel,
+  growthTrendSchema,
+  isValidGrowthTrend
+} from "@shared/growth-trends";
+import type { GrowthTrend } from "@shared/growth-trends";
 import { z } from "zod";
 
 export function RedditCommunities() {
   const [searchTerm, setSearchTerm] = useState("");
   const [sortBy, setSortBy] = useState<'members' | 'engagement' | 'upvotes' | 'name' | 'success'>('success');
   const [filterCategory, setFilterCategory] = useState<string>('all');
   const [filterPromotion, setFilterPromotion] = useState<string>('all');
   const [filterVerification, setFilterVerification] = useState<string>('all');
   const [expandedRow, setExpandedRow] = useState<string | null>(null);
 
   // Client validation schema - server enforces canonical enums and validation
   const RedditCommunityArraySchema = z.array(z.object({
     id: z.string(),
     name: z.string(),
     displayName: z.string(),
     members: z.number(),
     engagementRate: z.number(),
     category: z.enum(['age', 'amateur', 'appearance', 'body_type', 'cam', 'clothing', 'comparison', 'content_type', 'cosplay', 'couples', 'dancer', 'ethnicity', 'fetish', 'fitness', 'gaming', 'general', 'gonewild', 'lifestyle', 'natural', 'niche', 'reveal', 'selling', 'social', 'specific', 'style', 'theme']),
     verificationRequired: z.boolean(),
     promotionAllowed: z.enum(['yes', 'limited', 'no']),
     postingLimits: z.any().nullable().optional(),
     rules: z.object({
       sellingAllowed: z.enum(['allowed', 'limited', 'not_allowed', 'unknown']).optional(),
       watermarksAllowed: z.boolean().optional(),
       minKarma: z.number().optional(),
diff --git a/client/src/components/reddit-communities.tsx b/client/src/components/reddit-communities.tsx
index 65a64a92a2aaf9d4b8b9701483a245a0f0f8d93b..d8e75da4a978c2bce540a0397a66802ca85e06e8 100644
--- a/client/src/components/reddit-communities.tsx
+++ b/client/src/components/reddit-communities.tsx
@@ -205,51 +212,51 @@ export function RedditCommunities() {
       comparison: 'bg-slate-500/20 text-slate-400',
       content_type: 'bg-amber-500/20 text-amber-400',
       cosplay: 'bg-violet-500/20 text-violet-400',
       couples: 'bg-red-500/20 text-red-400',
       dancer: 'bg-fuchsia-500/20 text-fuchsia-400',
       ethnicity: 'bg-emerald-500/20 text-emerald-400',
       fitness: 'bg-lime-500/20 text-lime-400',
       gaming: 'bg-sky-500/20 text-sky-400',
       lifestyle: 'bg-zinc-500/20 text-zinc-400',
       natural: 'bg-green-400/20 text-green-300',
       reveal: 'bg-orange-400/20 text-orange-300',
       social: 'bg-blue-300/20 text-blue-200',
       specific: 'bg-gray-500/20 text-gray-400',
       style: 'bg-cyan-400/20 text-cyan-300',
       theme: 'bg-purple-300/20 text-purple-200'
     };
     return <Badge className={colors[category] || 'bg-gray-500/20 text-gray-400'}>{category}</Badge>;
   };
 
   const getSuccessProbabilityColor = (probability: number) => {
     if (probability >= 85) return 'text-green-400';
     if (probability >= 70) return 'text-yellow-400';
     return 'text-red-400';
   };
 
-  const getGrowthTrendIcon = (trend: string) => {
+  const getGrowthTrendIcon = (trend: GrowthTrend | null) => {
     switch (trend) {
       case 'up':
         return <TrendingUp className="h-3 w-3 text-green-400" />;
       case 'down':
         return <ChevronDown className="h-3 w-3 text-red-400" />;
       default:
         return <div className="h-3 w-3 bg-gray-400 rounded-full" />;
     }
   };
 
   return (
     <Card className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl border-pink-200/50 dark:border-pink-500/20 shadow-xl">
       <CardHeader>
         <CardTitle className="text-2xl bg-gradient-to-r from-pink-600 via-rose-500 to-purple-600 dark:from-pink-400 dark:via-rose-400 dark:to-purple-400 bg-clip-text text-transparent">
           Reddit Communities Database
         </CardTitle>
         <p className="text-sm text-gray-600 dark:text-gray-300">
           100+ communities with success probability scoring, growth trends, and intelligent recommendations
         </p>
       </CardHeader>
       <CardContent className="space-y-6">
         {/* Filters and Search */}
         <div className="flex flex-col lg:flex-row gap-4">
           <div className="relative flex-1">
             <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
diff --git a/client/src/components/reddit-communities.tsx b/client/src/components/reddit-communities.tsx
index 65a64a92a2aaf9d4b8b9701483a245a0f0f8d93b..d8e75da4a978c2bce540a0397a66802ca85e06e8 100644
--- a/client/src/components/reddit-communities.tsx
+++ b/client/src/components/reddit-communities.tsx
@@ -327,151 +334,156 @@ export function RedditCommunities() {
             </SelectContent>
           </Select>
         </div>
 
         {/* Results count */}
         <div className="text-sm text-gray-400">
           Showing {filteredCommunities.length} communities
         </div>
 
         {/* Communities Table */}
         <div className="overflow-x-auto">
           <Table>
             <TableHeader>
               <TableRow className="border-purple-500/20">
                 <TableHead className="text-purple-300">Community</TableHead>
                 <TableHead className="text-purple-300">Members</TableHead>
                 <TableHead className="text-purple-300">Success Rate</TableHead>
                 <TableHead className="text-purple-300">Engagement</TableHead>
                 <TableHead className="text-purple-300">Category</TableHead>
                 <TableHead className="text-purple-300">Verification</TableHead>
                 <TableHead className="text-purple-300">Promotion</TableHead>
                 <TableHead className="text-purple-300">Actions</TableHead>
               </TableRow>
             </TableHeader>
             <TableBody>
-              {filteredCommunities.map((community) => (
-                <React.Fragment key={community.id}>
-                  <TableRow 
-                    className="border-purple-500/10 hover:bg-purple-500/5 cursor-pointer"
-                    onClick={() => setExpandedRow(expandedRow === community.id ? null : community.id)}
-                  >
-                    <TableCell>
-                      <div>
-                        <p className="font-medium text-white">{community.name}</p>
-                        <p className="text-xs text-gray-400">{community.displayName}</p>
-                      </div>
-                    </TableCell>
-                    <TableCell>
-                      <div className="flex items-center gap-1">
-                        <Users className="h-4 w-4 text-gray-400" />
-                        <span className="text-gray-300">{formatNumber(community.members)}</span>
-                      </div>
-                    </TableCell>
-                    <TableCell>
-                      <div className="flex items-center gap-1">
-                        <span className={`font-medium ${getSuccessProbabilityColor(community.successProbability)}`}>
-                          {community.successProbability}%
-                        </span>
-                        {getGrowthTrendIcon(community.growthTrend)}
-                      </div>
-                    </TableCell>
-                    <TableCell>
-                      <div className="flex items-center gap-1">
-                        <TrendingUp className="h-4 w-4 text-green-400" />
-                        <span className="text-gray-300">{community.engagementRate}%</span>
-                      </div>
-                    </TableCell>
-                    <TableCell>{getCategoryBadge(community.category)}</TableCell>
-                    <TableCell>
-                      {community.verificationRequired ? (
-                        <CheckCircle className="h-4 w-4 text-green-400" />
-                      ) : (
-                        <XCircle className="h-4 w-4 text-gray-400" />
-                      )}
-                    </TableCell>
-                    <TableCell>{getPromotionBadge(community.promotionAllowed)}</TableCell>
-                    <TableCell>
-                      <div className="text-xs text-gray-400">
-                        {(() => {
-                          const limits = community.postingLimits as PostingLimits | null;
-                          const postsPerDay = limits?.perDay ?? limits?.daily;
-                          const cooldown = limits?.cooldownHours;
-                          
-                          return (
-                            <>
-                              {postsPerDay && `${postsPerDay}/day`}
-                              {cooldown && ` (${cooldown}h cooldown)`}
-                            </>
-                          );
-                        })()}
-                      </div>
-                    </TableCell>
+              {filteredCommunities.map((community) => {
+                const growthTrend = isValidGrowthTrend(community.growthTrend)
+                  ? community.growthTrend
+                  : null;
+
+                return (
+                  <React.Fragment key={community.id}>
+                    <TableRow
+                      className="border-purple-500/10 hover:bg-purple-500/5 cursor-pointer"
+                      onClick={() => setExpandedRow(expandedRow === community.id ? null : community.id)}
+                    >
+                      <TableCell>
+                        <div>
+                          <p className="font-medium text-white">{community.name}</p>
+                          <p className="text-xs text-gray-400">{community.displayName}</p>
+                        </div>
+                      </TableCell>
+                      <TableCell>
+                        <div className="flex items-center gap-1">
+                          <Users className="h-4 w-4 text-gray-400" />
+                          <span className="text-gray-300">{formatNumber(community.members)}</span>
+                        </div>
+                      </TableCell>
+                      <TableCell>
+                        <div className="flex items-center gap-1">
+                          <span className={`font-medium ${getSuccessProbabilityColor(community.successProbability)}`}>
+                            {community.successProbability}%
+                          </span>
+                          {getGrowthTrendIcon(growthTrend)}
+                        </div>
+                      </TableCell>
+                      <TableCell>
+                        <div className="flex items-center gap-1">
+                          <TrendingUp className="h-4 w-4 text-green-400" />
+                          <span className="text-gray-300">{community.engagementRate}%</span>
+                        </div>
+                      </TableCell>
+                      <TableCell>{getCategoryBadge(community.category)}</TableCell>
+                      <TableCell>
+                        {community.verificationRequired ? (
+                          <CheckCircle className="h-4 w-4 text-green-400" />
+                        ) : (
+                          <XCircle className="h-4 w-4 text-gray-400" />
+                        )}
+                      </TableCell>
+                      <TableCell>{getPromotionBadge(community.promotionAllowed)}</TableCell>
+                      <TableCell>
+                        <div className="text-xs text-gray-400">
+                          {(() => {
+                            const limits = community.postingLimits as PostingLimits | null;
+                            const postsPerDay = limits?.perDay ?? limits?.daily;
+                            const cooldown = limits?.cooldownHours;
+
+                            return (
+                              <>
+                                {postsPerDay && `${postsPerDay}/day`}
+                                {cooldown && ` (${cooldown}h cooldown)`}
+                              </>
+                            );
+                          })()}
+                        </div>
+                      </TableCell>
                     <TableCell>
                       <Button 
                         size="sm" 
                         variant="ghost"
                         className="text-purple-400 hover:text-purple-300"
                       >
                         {expandedRow === community.id ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                       </Button>
                     </TableCell>
                   </TableRow>
                   
                   {/* Expanded Details Row */}
                   {expandedRow === community.id && (
                     <TableRow>
                       <TableCell colSpan={8} className="bg-gray-800/30">
                         <div className="p-4 space-y-4">
                           <p className="text-sm text-gray-300">{community.description}</p>
                           
                           <div className="grid md:grid-cols-4 gap-4">
                             <div>
                               <h4 className="text-sm font-semibold text-purple-300 mb-2">Requirements</h4>
                               <div className="space-y-1 text-xs text-gray-400">
                                 {community.rules.minKarma && <p>• Min Karma: {community.rules.minKarma}</p>}
                                 {community.rules.minAccountAge && <p>• Min Account Age: {community.rules.minAccountAge} days</p>}
                                 <p>• Watermarks: {community.rules.watermarksAllowed ? '✓ Allowed' : '✗ Not Allowed'}</p>
                                 <p>• Selling: {(() => {
                                   const policy = community.rules?.sellingAllowed;
                                   switch (policy) {
                                     case 'allowed': return '✓ Allowed';
                                     case 'limited': return '⚠ Limited';
                                     case 'not_allowed': return '✗ Not Allowed';
                                     case 'unknown': return '? Unknown';
                                     default: return '? Unknown';
                                   }
                                 })()}</p>
                               </div>
                             </div>
 
                             <div>
                               <h4 className="text-sm font-semibold text-purple-300 mb-2">Intelligence</h4>
                               <div className="space-y-1 text-xs text-gray-400">
                                 <p>• Success Rate: <span className={getSuccessProbabilityColor(community.successProbability)}>{community.successProbability}%</span></p>
                                 <p>• Competition: <span className={community.competitionLevel === 'low' ? 'text-green-400' : community.competitionLevel === 'medium' ? 'text-yellow-400' : 'text-red-400'}>{community.competitionLevel}</span></p>
-                                <p>• Growth: <span className={community.growthTrend === 'up' ? 'text-green-400' : community.growthTrend === 'stable' ? 'text-yellow-400' : 'text-red-400'}>{getGrowthTrendLabel(community.growthTrend)}</span></p>
+                                <p>• Growth: <span className={growthTrend === 'up' ? 'text-green-400' : growthTrend === 'stable' ? 'text-yellow-400' : 'text-red-400'}>{getGrowthTrendLabel(growthTrend)}</span></p>
                                 <p>• Mod Activity: <span className={community.modActivity === 'high' ? 'text-red-400' : community.modActivity === 'medium' ? 'text-yellow-400' : 'text-green-400'}>{community.modActivity}</span></p>
                               </div>
                             </div>
                             
                             <div>
                               <h4 className="text-sm font-semibold text-purple-300 mb-2">Best Posting Times</h4>
                               <div className="space-y-1 text-xs text-gray-400">
                                 {community.bestPostingTimes.slice(0, 3).map((time: string, idx: number) => (
                                   <p key={idx}>• {time}</p>
                                 ))}
                               </div>
                             </div>
                             
                             <div>
                               <h4 className="text-sm font-semibold text-purple-300 mb-2">Performance</h4>
                               <div className="space-y-1 text-xs text-gray-400">
                                 <p>• Avg Upvotes: {community.averageUpvotes.toLocaleString()}</p>
                                 <p>• Engagement Rate: {community.engagementRate}%</p>
                                 <p>• Total Members: {community.members.toLocaleString()}</p>
                               </div>
                             </div>
                           </div>
 
                           {/* Rules and Tags */}
                           <div className="grid md:grid-cols-2 gap-4 mt-4">
diff --git a/client/src/components/reddit-communities.tsx b/client/src/components/reddit-communities.tsx
index 65a64a92a2aaf9d4b8b9701483a245a0f0f8d93b..d8e75da4a978c2bce540a0397a66802ca85e06e8 100644
--- a/client/src/components/reddit-communities.tsx
+++ b/client/src/components/reddit-communities.tsx
@@ -484,52 +496,53 @@ export function RedditCommunities() {
                                   ))}
                                   {community.rules.contentRules && community.rules.contentRules.map((rule: string, idx: number) => (
                                     <p key={idx}>• Content: {rule}</p>
                                   ))}
                                 </div>
                               </div>
                             )}
 
                             {community.tags && community.tags.length > 0 && (
                               <div>
                                 <h4 className="text-sm font-semibold text-purple-300 mb-2">Tags</h4>
                                 <div className="flex flex-wrap gap-1">
                                   {community.tags.map((tag: string, idx: number) => (
                                     <Badge key={idx} className="bg-gray-700/50 text-gray-300 text-xs">
                                       {tag}
                                     </Badge>
                                   ))}
                                 </div>
                               </div>
                             )}
                           </div>
                         </div>
                       </TableCell>
                     </TableRow>
                   )}
-                </React.Fragment>
-              ))}
+                  </React.Fragment>
+                );
+              })}
             </TableBody>
           </Table>
         </div>
 
         {/* Summary Stats */}
         <div className="grid md:grid-cols-4 gap-4 pt-4 border-t border-purple-500/20">
           <Card className="bg-gray-800/50 border-purple-500/20">
             <CardContent className="p-4">
               <div className="flex items-center justify-between">
                 <div>
                   <p className="text-xs text-gray-400">Total Communities</p>
                   <p className="text-2xl font-bold text-purple-400">{filteredCommunities.length}</p>
                 </div>
                 <Users className="h-8 w-8 text-purple-400/50" />
               </div>
             </CardContent>
           </Card>
           
           <Card className="bg-gray-800/50 border-purple-500/20">
             <CardContent className="p-4">
               <div className="flex items-center justify-between">
                 <div>
                   <p className="text-xs text-gray-400">Avg Engagement</p>
                   <p className="text-2xl font-bold text-green-400">
                     {(filteredCommunities.reduce((acc, c) => acc + c.engagementRate, 0) / filteredCommunities.length || 0).toFixed(1)}%
 
EOF
)