CRITICAL: The admin account is not being recognized properly. Dashboard features are greyed out as if it's a free account.

Please fix admin privileges and feature gating:

1. In server/routes/auth.ts or server/auth.ts, ensure admin login returns proper data:
```typescript
// When admin logs in with ADMIN_EMAIL/ADMIN_PASSWORD:
if (loginIdentifier === ADMIN_EMAIL && password === ADMIN_PASSWORD) {
  const adminUser = {
    id: 999,
    email: ADMIN_EMAIL,
    username: 'admin',
    tier: 'premium',  // NOT 'pro', use 'premium' for highest tier
    subscription_status: 'active',
    isAdmin: true,
    role: 'admin',
    // Add all premium features
    features: {
      unlimited_generations: true,
      no_watermark: true,
      api_access: true,
      priority_support: true
    }
  };
  
  // Store in session
  req.session.user = adminUser;
  req.session.userId = 999;
  req.session.isAdmin = true;
  
  return res.json({
    message: 'Admin login successful',
    token,
    user: adminUser
  });
}

Fix /api/auth/user endpoint to properly return admin status:

typescriptapp.get('/api/auth/user', authenticateToken, async (req: any, res) => {
  // Check if it's admin first
  if (req.user?.id === 999 || req.user?.isAdmin || req.session?.isAdmin) {
    return res.json({
      id: 999,
      email: process.env.ADMIN_EMAIL,
      username: 'admin',
      tier: 'premium',
      subscription_status: 'active',
      isAdmin: true,
      role: 'admin',
      features: {
        unlimited_generations: true,
        no_watermark: true,
        api_access: true
      }
    });
  }
  
  // Regular user logic...
});

In client/src/hooks/useAuth.ts, ensure admin is recognized:

typescript// After fetching user data, check admin status
const { data: user, isLoading, error, refetch } = useQuery<User>({
  queryKey: ['/api/auth/user', token],
  queryFn: async () => {
    const response = await fetch('/api/auth/user', {
      headers: {
        'Authorization': `Bearer ${token}`
      },
      credentials: 'include'
    });
    
    const userData = await response.json();
    console.log('User data from API:', userData); // Debug log
    
    // Ensure admin has full access
    if (userData.id === 999 || userData.isAdmin) {
      userData.tier = 'premium';
      userData.subscription_status = 'active';
    }
    
    return userData;
  }
});

Fix feature gating in components. Search for any code that checks tier:

typescript// Find and fix checks like:
const isPro = user?.tier === 'pro' || user?.tier === 'premium' || user?.isAdmin;
const canUseFeature = user?.tier !== 'free' || user?.isAdmin;

// Should be:
const isPro = ['pro', 'premium', 'admin'].includes(user?.tier) || user?.isAdmin;
const canUseFeature = user?.tier !== 'free' && user?.tier !== 'guest';

In ModernDashboard component, fix the greyed out buttons:

typescript// Find where buttons are disabled
const isFeatureLocked = !user || user.tier === 'free' || user.tier === 'guest';

// Change to:
const isFeatureLocked = !user?.isAdmin && (!user || user.tier === 'free' || user.tier === 'guest');

Add debug endpoint to check current user status:

typescriptapp.get('/api/debug/user-status', (req: any, res) => {
  res.json({
    sessionUser: req.session?.user,
    sessionId: req.session?.userId,
    isAdmin: req.session?.isAdmin,
    tokenUser: req.user,
    cookies: req.cookies,
    tier: req.session?.user?.tier || req.user?.tier
  });
});

---

## ðŸ§ª **Quick Debug in Browser Console:**

```javascript
// Check what user data the frontend has:
const authData = JSON.parse(localStorage.getItem('user') || '{}');
console.log('Stored user:', authData);

// Check current tier:
console.log('User tier:', authData.tier);
console.log('Is admin?', authData.isAdmin);

// Test the user endpoint directly:
fetch('/api/auth/user', {
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
  },
  credentials: 'include'
}).then(r => r.json()).then(console.log);

// Force update user to admin:
const user = JSON.parse(localStorage.getItem('user') || '{}');
user.tier = 'premium';
user.isAdmin = true;
localStorage.setItem('user', JSON.stringify(user));
window.location.reload();