 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/expense-routes.ts b/server/expense-routes.ts
index 6fd3c58a57f26712f59c425a8b9fcf232b24758f..ae66eb9b8ad10d39e4ebde140fc7341cf4c08b8a 100644
--- a/server/expense-routes.ts
+++ b/server/expense-routes.ts
@@ -1,60 +1,62 @@
 import express, { type Express } from 'express';
 import multer from 'multer';
 import path from 'path';
 import fs from 'fs/promises';
 import sharp from 'sharp';
 import crypto from 'crypto';
 import { authenticateToken } from './middleware/auth.js';
 import { storage } from './storage.js';
 import { MediaManager } from './lib/media.js';
 import { logger } from './bootstrap/logger.js';
 import { type InsertExpense, type User } from '@shared/schema';
 
 interface AuthRequest extends express.Request {
   user?: User;
 }
 
 const knownImageExtensions = new Set([
   '.jpg',
   '.jpeg',
   '.png',
   '.gif',
   '.bmp',
   '.webp',
-  '.tiff'
+  '.tiff',
+  '.pdf'
 ]);
 
 const upload = multer({
   storage: multer.memoryStorage(),
   limits: { fileSize: 50 * 1024 * 1024 },
   fileFilter: (req, file, cb) => {
     const hasImageMimeType = file.mimetype.startsWith('image/');
     const fileExtension = path.extname(file.originalname).toLowerCase();
     const hasKnownImageExtension = knownImageExtensions.has(fileExtension);
+    const isPdfMimeType = file.mimetype === 'application/pdf';
 
-    if (hasImageMimeType || hasKnownImageExtension) {
+    if (hasImageMimeType || hasKnownImageExtension || isPdfMimeType) {
       cb(null, true);
     } else {
       cb(new Error('Only image files are allowed!'));
     }
   }
 });
 
 // ImageShield protection for receipt uploads
 interface ProtectionSettings {
   level: string;
   blur: number;
   noise: number;
   resize: number;
   quality: number;
 }
 
 const protectionPresets: Record<string, ProtectionSettings> = {
   light: { level: 'light', blur: 0.3, noise: 3, resize: 98, quality: 95 },
   standard: { level: 'standard', blur: 0.5, noise: 5, resize: 95, quality: 92 },
   heavy: { level: 'heavy', blur: 0.8, noise: 8, resize: 90, quality: 88 }
 };
 
 // Apply ImageShield protection server-side for receipts
 async function applyReceiptImageShieldProtection(
   inputBuffer: Buffer, 
diff --git a/server/expense-routes.ts b/server/expense-routes.ts
index 6fd3c58a57f26712f59c425a8b9fcf232b24758f..ae66eb9b8ad10d39e4ebde140fc7341cf4c08b8a 100644
--- a/server/expense-routes.ts
+++ b/server/expense-routes.ts
@@ -241,72 +243,86 @@ export function registerExpenseRoutes(app: Express) {
       if (!req.user?.id) {
         return res.status(401).json({ message: 'Authentication required' });
       }
 
       const startDate = new Date(req.query.startDate as string);
       const endDate = new Date(req.query.endDate as string);
       const expenses = await storage.getExpensesByDateRange(req.user.id, startDate, endDate);
       res.json(expenses);
     } catch (error) {
       console.error('Error fetching expenses by date range:', error);
       res.status(500).json({ message: 'Failed to fetch expenses by date range' });
     }
   });
 
   // Upload receipt for an expense with ImageShield protection
   app.post('/api/expenses/:id/receipt', authenticateToken, upload.single('receipt'), async (req: AuthRequest, res) => {
     try {
       if (!req.user?.id) {
         return res.status(401).json({ message: 'Authentication required' });
       }
       const expenseId = parseInt(req.params.id);
       if (!req.file) {
         return res.status(400).json({ message: 'No file uploaded' });
       }
 
-      // Determine protection level based on user tier (conservative for receipts)
-      const userTier = req.user.tier || 'free';
-      const protectionLevel = req.body.protectionLevel || 'light';
-      const addWatermark = ['free', 'starter'].includes(userTier);
-      
-      // Apply ImageShield protection to receipt
-      logger.info(
-        `Applying ImageShield protection (${protectionLevel}) to receipt for user ${req.user.id}, tier: ${userTier}`
-      );
-      const protectedBuffer = await applyReceiptImageShieldProtection(
-        req.file.buffer,
-        protectionLevel as 'light' | 'standard' | 'heavy',
-        addWatermark
-      );
+      const safeOriginalName = path.basename(req.file.originalname);
+      const fileExtension = path.extname(safeOriginalName).toLowerCase();
+      const isPdf = req.file.mimetype === 'application/pdf' || fileExtension === '.pdf';
+
+      let receiptBuffer: Buffer;
+      let desiredFileName: string;
+
+      if (isPdf) {
+        receiptBuffer = req.file.buffer;
+        desiredFileName = safeOriginalName;
+        logger.info(`Storing PDF receipt for user ${req.user.id} without ImageShield processing.`);
+      } else {
+        const userTier = req.user.tier || 'free';
+        const protectionLevel = req.body.protectionLevel || 'light';
+        const addWatermark = ['free', 'starter'].includes(userTier);
+
+        // Apply ImageShield protection to receipt
+        logger.info(
+          `Applying ImageShield protection (${protectionLevel}) to receipt for user ${req.user.id}, tier: ${userTier}`
+        );
+        receiptBuffer = await applyReceiptImageShieldProtection(
+          req.file.buffer,
+          protectionLevel as 'light' | 'standard' | 'heavy',
+          addWatermark
+        );
+        desiredFileName = `protected_${safeOriginalName}`;
+      }
 
       let receiptUrl: string;
-      let receiptFileName = `protected_${req.file.originalname}`;
+      let receiptFileName = desiredFileName;
 
       if (process.env.S3_BUCKET_MEDIA) {
-        const asset = await MediaManager.uploadFile(protectedBuffer, {
+        const asset = await MediaManager.uploadFile(receiptBuffer, {
           userId: req.user.id,
-          filename: receiptFileName,
+          filename: desiredFileName,
         });
         receiptUrl = asset.downloadUrl || asset.signedUrl || asset.key;
         receiptFileName = asset.filename;
       } else {
         const uploadDir = path.join(process.cwd(), 'uploads', 'receipts');
         await fs.mkdir(uploadDir, { recursive: true });
-        const fileName = `protected_${Date.now()}-${req.file.originalname}`;
-        await fs.writeFile(path.join(uploadDir, fileName), protectedBuffer);
+        const fileName = isPdf ? safeOriginalName : `protected_${Date.now()}-${safeOriginalName}`;
+        await fs.writeFile(path.join(uploadDir, fileName), receiptBuffer);
         receiptUrl = `/uploads/receipts/${fileName}`;
         receiptFileName = fileName;
       }
 
       const expense = await storage.updateExpense(expenseId, req.user.id, {
         receiptUrl,
         receiptFileName,
       });
 
-      logger.info(`Protected receipt uploaded: ${receiptFileName} for expense ${expenseId}`);
+      const uploadDescriptor = isPdf ? 'PDF receipt stored' : 'Protected receipt uploaded';
+      logger.info(`${uploadDescriptor}: ${receiptFileName} for expense ${expenseId}`);
       res.json(expense);
     } catch (error) {
       console.error('Error uploading receipt:', error);
       res.status(500).json({ message: 'Failed to upload receipt' });
     }
   });
 }
 
EOF
)