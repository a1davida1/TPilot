diff --git a/client/src/pages/tax-tracker.tsx b/client/src/pages/tax-tracker.tsx
@@
 interface TaxTrackerProps {
   userTier?: 'guest' | 'free' | 'pro' | 'premium';
 }
 
+interface ExpenseCategory {
+  id: number;
+  name: string;
+  deductionPercentage: number;
+  icon: string;
+  color?: string;
+  description?: string;
+  examples: string[];
+  legalExplanation?: string;
+}
+
+interface Expense {
+  id: number;
+  description: string;
+  amount: number;
+  categoryId: number;
+  expenseDate: string;
+  receiptUrl?: string;
+  receiptFileName?: string;
+  notes?: string;
+  category?: string;
+  date?: string;
+}
+
 const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
-  const [selectedCategory, setSelectedCategory] = useState<unknown>(null);
+  const [selectedCategory, setSelectedCategory] = useState<ExpenseCategory | null>(null);
@@
-  const { data: expenseCategories = [], isLoading: categoriesLoading } = useQuery({
+  const { data: expenseCategories = [], isLoading: categoriesLoading, error: categoriesError } = useQuery<ExpenseCategory[]>({
@@
-  const { data: expenseTotals = { total: 0, deductible: 0, byCategory: {} } } = useQuery({
+  const { data: expenseTotals = { total: 0, deductible: 0, byCategory: {} }, isLoading: totalsLoading, error: totalsError } =
+    useQuery({
@@
-  const { data: recentExpenses = [] } = useQuery({
+  const { data: recentExpenses = [], isLoading: recentLoading, error: recentError } = useQuery<Expense[]>({
@@
-  const { data: calendarExpenses = [] } = useQuery({
+  const { data: calendarExpenses = [], isLoading: calendarLoading, error: calendarError } = useQuery<Expense[]>({
@@
-    mutationFn: async (expenseData: unknown) => {
+    mutationFn: async (expenseData: Omit<Expense, 'id'>) => {
@@
-      queryClient.setQueryData(['/api/expenses'], (old: unknown[] = []) =>
-        old.map(exp => (exp.id === updatedExpense.id ? updatedExpense : exp))
+      queryClient.setQueryData<Expense[]>(['/api/expenses'], (old = []) =>
+        old.map(exp => (exp.id === updatedExpense.id ? updatedExpense : exp))
       );
@@
-      const dayExpenses = calendarExpenses.filter((expense: unknown) =>
-        isSameDay(parseISO(expense.expenseDate), day)
-      );
-      const totalAmount = dayExpenses.reduce((sum: number, expense: unknown) => sum + expense.amount, 0);
-      const hasReceipt = dayExpenses.some((expense: unknown) => expense.receiptUrl);
+      const dayExpenses = calendarExpenses.filter(expense =>
+        isSameDay(parseISO(expense.expenseDate), day)
+      );
+      const totalAmount = dayExpenses.reduce((sum, expense) => sum + expense.amount, 0);
+      const hasReceipt = dayExpenses.some(expense => expense.receiptUrl);
@@
-                    recentExpenses.slice(0, 3).map((expense: unknown, index: number) => (
+                    recentExpenses.slice(0, 3).map((expense, index) => (
