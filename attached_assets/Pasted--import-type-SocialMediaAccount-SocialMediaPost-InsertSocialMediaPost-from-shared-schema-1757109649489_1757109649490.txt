@@
-import type { SocialMediaAccount, SocialMediaPost, InsertSocialMediaPost } from '@shared/schema.js';
+// Removed unused type imports
 
 export class SocialMediaManager {
-  private apis: Map<Platform, any> = new Map();
+  private apis: Map<Platform, InstagramAPI | TwitterAPI | TikTokAPI | YouTubeAPI> = new Map();
@@
-  connectAccount(platform: Platform, credentials: unknown) {
+  connectAccount(platform: Platform, credentials: Record<string, string>) {
@@
-        case 'twitter':
-          let mediaIds: string[] = [];
+        case 'twitter': {
+          const mediaIds: string[] = [];
@@
-          return await api.createTweet({
+          return await api.createTweet({
             text: content.hashtags
               ? `${content.text}\n\n${content.hashtags.map(tag => `#${tag}`).join(' ')}`
               : content.text,
             mediaIds: mediaIds.length > 0 ? mediaIds : undefined,
           });
-        case 'tiktok':
+        }
+        case 'tiktok':
@@
-            likes: metrics.find((m: unknown) => m.name === 'likes')?.values[0]?.value || 0,
-            comments: metrics.find((m: unknown) => m.name === 'comments')?.values[0]?.value || 0,
-            shares: metrics.find((m: unknown) => m.name === 'shares')?.values[0]?.value || 0,
-            views: metrics.find((m: unknown) => m.name === 'impressions')?.values[0]?.value || 0,
+            likes: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'likes')?.values[0]?.value || 0,
+            comments: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'comments')?.values[0]?.value || 0,
+            shares: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'shares')?.values[0]?.value || 0,
+            views: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'impressions')?.values[0]?.value || 0,
@@
-  async getAccountMetrics(platform: Platform): Promise<any> {
-    const api = this.apis.get(platform);
-    return await api.getMetrics();
+  async getAccountMetrics(platform: Platform): Promise<unknown> {
+    const api = this.apis.get(platform);
+    return api.getMetrics();
   }
 }
