 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/caption/rewritePipeline.ts b/server/caption/rewritePipeline.ts
index 98b70b0657394133e9ff4fbbee663e2d8680004f..8a0ad568d6d531173cd6a11a30023cfa479506ef 100644
--- a/server/caption/rewritePipeline.ts
+++ b/server/caption/rewritePipeline.ts
@@ -105,45 +105,68 @@ export async function rankAndSelect(variants: unknown[]){
     };
   }
   
   if((json as Record<string, unknown>).final){
     const final = (json as { final: Record<string, unknown> }).final;
     final.safety_level = normalizeSafetyLevel(
       typeof final.safety_level === 'string' ? final.safety_level : 'normal'
     );
     if(typeof final.mood !== 'string' || final.mood.length<2) final.mood="engaging";
     if(typeof final.style !== 'string' || final.style.length<2) final.style="authentic";
     if(typeof final.cta !== 'string' || final.cta.length<2) final.cta="Check it out";
     if(typeof final.alt !== 'string' || final.alt.length<20) final.alt="Engaging social media content";
     if(!Array.isArray(final.hashtags)) final.hashtags=["#content", "#creative", "#amazing"];
     if(typeof final.caption !== 'string' || final.caption.length<1) final.caption="Check out this amazing content!";
   }
   return RankResult.parse(json);
 }
 
 export async function pipelineRewrite({ platform, voice="flirty_playful", style, mood, existingCaption, imageUrl, nsfw=false }:{
   platform:"instagram"|"x"|"reddit"|"tiktok", voice?:string, style?:string, mood?:string, existingCaption:string, imageUrl?:string, nsfw?:boolean }){
   try {
     const facts = imageUrl ? await extractFacts(imageUrl) : undefined;
     let variants = await variantsRewrite({ platform, voice, style, mood, existingCaption, facts, nsfw });
     let ranked = await rankAndSelect(variants);
     let out = ranked.final;
-    
-    // Ensure rewritten caption is longer and more engaging than original
-    if(out.caption.length <= existingCaption.length) {
-      out.caption = existingCaption + " ✨ Enhanced with engaging content and call-to-action that drives better engagement!";
-    }
 
-    const err = platformChecks(platform, out);
-    if (err) {
-      variants = await variantsRewrite({ platform, voice, existingCaption, facts, hint:`Fix: ${err}. Be specific and engaging.`, nsfw });
+    const retryHints: string[] = [
+      "Make it 20% longer with a natural hook and CTA; keep it human, no sparkle clichés.",
+      facts
+        ? "Rewrite with concrete imagery from IMAGE_FACTS and stretch it another 20%; keep the CTA grounded and specific."
+        : "Rewrite with concrete sensory detail and extend it by roughly 20%; keep the CTA specific and natural."
+    ];
+
+    const runRewrite = async (hint?: string) => {
+      variants = await variantsRewrite({ platform, voice, style, mood, existingCaption, facts, hint, nsfw });
       ranked = await rankAndSelect(variants);
       out = ranked.final;
+    };
+
+    const ensureLongerCaption = async (baseHint?: string) => {
+      if (out.caption.length > existingCaption.length) {
+        return;
+      }
+      for (const hint of retryHints) {
+        const combinedHint = baseHint ? `${baseHint} ${hint}` : hint;
+        await runRewrite(combinedHint);
+        if (out.caption.length > existingCaption.length) {
+          return;
+        }
+      }
+      throw new Error("rewrite-too-short");
+    };
+
+    await ensureLongerCaption();
+
+    const err = platformChecks(platform, out);
+    if (err) {
+      await runRewrite(`Fix: ${err}. Be specific and engaging.`);
+      await ensureLongerCaption(`Fix: ${err}. Be specific and engaging.`);
     }
 
     return { provider: 'gemini', facts, variants, ranked, final: out };
   } catch (error) {
     const { openAICaptionFallback } = await import('./openaiFallback');
     const final = await openAICaptionFallback({ platform, voice, existingCaption, imageUrl });
     return { provider: 'openai', final } as CaptionResult;
   }
 }
 
EOF
)