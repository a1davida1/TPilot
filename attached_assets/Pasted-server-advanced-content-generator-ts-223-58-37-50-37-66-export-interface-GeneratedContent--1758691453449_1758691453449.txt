server/advanced-content-generator.ts
+223-58
@@ -37,50 +37,66 @@ export interface GeneratedContent {
  tags: string[];
}

export interface PresetVariation {
  titles: string[];
  content: string;
  photoInstructions: PhotoInstructions;
}

export interface PhotoConfig {
  themes: string[];
  settings: string[];
  clothing: string[];
  lighting: string;
  angles: string;
  mood: string;
}

export interface ToneStyle {
  starters: string[];
  descriptors: string[];
  endings: string[];
  emojis: string[];
}

interface PlatformPostProcessContext {
  emojiPool: string[];
  emojiCount: number;
}

interface PlatformProfile {
  maxSentenceLength: number[];
  paragraphCounts: number[];
  emojiDensity: number[];
  callToActions: string[];
  paragraphSeparator: string;
  sentenceSeparator: string;
  postProcessContent?: (content: string, context: PlatformPostProcessContext) => string;
  postProcessTitle?: (title: string, context: PlatformPostProcessContext) => string;
}

// Photo Type Specific Content Variations
const photoTypeVariations = {
  'teasing': {
    themes: ['playful tease', 'subtle hint', 'flirty suggestion', 'mysterious allure', 'coy moment'],
    settings: ['bedroom door', 'mirror selfie', 'cozy couch', 'bath time', 'morning bed'],
    clothing: ['oversized shirt', 'silk robe', 'cute lingerie peek', 'towel wrap', 'strategic coverage'],
    lighting: 'Soft intimate lighting, warm candlelight, sunset glow',
    angles: 'Teasing glimpses, over-shoulder looks, partial reveals',
    mood: 'playful and teasing'
  },
  'behind-scenes': {
    themes: ['getting ready', 'makeup process', 'outfit selection', 'photoshoot prep', 'content creation'],
    settings: ['vanity mirror', 'wardrobe area', 'makeup station', 'photo setup', 'behind camera'],
    clothing: ['robe and lingerie', 'getting dressed', 'outfit changes', 'casual prep wear'],
    lighting: 'Natural backstage lighting, mirror lights, behind-the-scenes authenticity',
    angles: 'Candid preparation shots, mirror reflections, process documentation',
    mood: 'authentic and intimate'
  },
  'outfit': {
    themes: ['outfit reveal', 'fashion show', 'style showcase', 'wardrobe tour', 'clothing haul'],
    settings: ['bedroom mirror', 'dressing room', 'closet area', 'fashion backdrop', 'outfit display'],
    clothing: ['multiple outfits', 'lingerie sets', 'dress collection', 'style variations'],
    lighting: 'Bright fashion lighting, clear visibility, flattering angles',
    angles: 'Full body shots, detail close-ups, 360 turns, outfit transitions',
    mood: 'fashionable and stylish'
@@ -171,80 +187,141 @@ const textToneStyles = {
    starters: ["Guess what", "Oops!", "Surprise!", "Hey there", "So..."],
    descriptors: ["cute", "silly", "adorable", "cheeky", "mischievous"],
    endings: ["hope you like it!", "whoops! 🙈", "couldn't resist!", "being a little naughty"],
    emojis: ["😘", "🙈", "😇", "💕", "🎀"]
  },
  'mysterious': {
    starters: ["Something happened", "In the shadows", "Late night", "Behind closed doors", "Secret moment"],
    descriptors: ["hidden", "forbidden", "mysterious", "secretive", "enigmatic"],
    endings: ["but that's all I'll say", "the rest remains hidden", "some secrets are worth keeping", "only for those who understand"],
    emojis: ["🌙", "🖤", "🕯️", "🔮", "💫"]
  },
  'authentic': {
    starters: ["Real talk", "Being honest", "Just me", "Genuine moment", "Truth is"],
    descriptors: ["real", "honest", "genuine", "authentic", "true"],
    endings: ["just being myself", "no filters needed", "this is who I am", "raw and real"],
    emojis: ["💯", "✨", "🌸", "💗", "🌟"]
  },
  'sassy': {
    starters: ["Listen up", "Well well", "Oh please", "You think", "Honey"],
    descriptors: ["fierce", "bold", "attitude", "confidence", "sass"],
    endings: ["deal with it", "take it or leave it", "that's how I roll", "bow down"],
    emojis: ["💅", "😏", "🔥", "👑", "💄"]
  }
};

const platformProfiles: Record<string, PlatformProfile> = {
  instagram: {
    maxSentenceLength: [110, 130],
    paragraphCounts: [2, 3],
    emojiDensity: [2, 3],
    callToActions: [
      'Tap the bio link for the full drop 🔗',
      'Catch the rest in my IG stories ✨',
      'Slide into the subs for the exclusive set 💋'
    ],
    paragraphSeparator: '\n\n',
    sentenceSeparator: ' '
  },
  fansly: {
    maxSentenceLength: [140, 160],
    paragraphCounts: [2, 3],
    emojiDensity: [3, 4],
    callToActions: [
      'Unlock the rest on my Fansly 💖',
      'Dive deeper with my fans-only feed 🔥',
      'Join the private feed for every angle 💋'
    ],
    paragraphSeparator: '\n',
    sentenceSeparator: ' ',
    postProcessContent: (content, context) => {
      const cluster = createEmojiCluster(context.emojiPool, context.emojiCount + 1);
      return cluster ? `${content}\n${cluster}` : content;
    },
    postProcessTitle: (title, context) => {
      const cluster = createEmojiCluster(context.emojiPool, Math.max(1, context.emojiCount));
      return cluster ? `${title} ${cluster}`.trim() : title;
    }
  },
  twitter: {
    maxSentenceLength: [80, 100],
    paragraphCounts: [1, 2],
    emojiDensity: [1, 2],
    callToActions: [
      "RT if you're ready for more 🔁",
      'Follow me to catch the full reveal ⚡',
      'Quote this with your favorite emoji 🪄'
    ],
    paragraphSeparator: '\n',
    sentenceSeparator: ' ',
    postProcessContent: content => content.replace(/\s{2,}/g, ' ').replace(/\n{2,}/g, '\n'),
    postProcessTitle: title => title
  },
  default: {
    maxSentenceLength: [120, 140],
    paragraphCounts: [2, 3],
    emojiDensity: [2, 3],
    callToActions: [
      'Check out the full set on my channel ✨',
      'Subscribers get every single moment 🔒',
      'Grab the full gallery while it’s hot 🔥'
    ],
    paragraphSeparator: '\n\n',
    sentenceSeparator: ' '
  }
};

// Generate content based on all parameters
export function generateAdvancedContent(params: ContentParameters): GeneratedContent {
  // Check if this is a preset request and use preset variations
  const presetVariation = getRandomPresetVariation(params.style);
  if (presetVariation) {
    console.log(`🎯 Using preset variation for: ${params.style}`);
    return {
      titles: presetVariation.titles,
      content: presetVariation.content,
      photoInstructions: {
        lighting: presetVariation.photoInstructions.lighting,
        angles: presetVariation.photoInstructions.cameraAngle || "natural angles",
        composition: presetVariation.photoInstructions.composition,
        styling: presetVariation.photoInstructions.styling,
        technical: presetVariation.photoInstructions.technicalSettings || "natural lighting",
        sceneSetup: presetVariation.photoInstructions.mood || "casual setting"
      },
      tags: ['preset-content', params.style, params.platform]
    };
  }

  // Fallback to existing system for non-preset requests
  const photoConfig = photoTypeVariations[params.photoType as keyof typeof photoTypeVariations] || photoTypeVariations['casual'] as PhotoConfig;
  const toneStyle = textToneStyles[params.textTone as keyof typeof textToneStyles] || textToneStyles['authentic'] as ToneStyle;
  
  // Generate titles with variation
  const titles = generateTitles(params, photoConfig, toneStyle);
  
  const titles = generateTitles(params, photoConfig, toneStyle, platformProfiles);

  // Generate main content
  const content = generateMainContent(params, photoConfig, toneStyle);
  const content = generateMainContent(params, photoConfig, toneStyle, platformProfiles);
  
  // Generate photo instructions
  const photoInstructions = generatePhotoInstructions(params, photoConfig);
  
  // Generate tags
  const tags = generateTags(params, photoConfig);
  
  return {
    titles,
    content,
    photoInstructions,
    tags
  };
}

// Helper function to get random preset variation
function getRandomPresetVariation(presetId: string): PresetVariation | null {
  const presetVariations: Record<string, any[]> = {
    'nude-photos': [
      {
        titles: ["Embracing my natural beauty today 💋", "Confidence level: absolutely stunning ✨", "Art meets body, beauty meets soul 🌸"],
        content: "There's something incredibly empowering about celebrating your natural form. Today I'm embracing every curve, every line, and feeling absolutely radiant. Art has always been about truth, and this is mine.",
        photoInstructions: {
          lighting: "Soft, flattering natural light or warm studio lighting",
          cameraAngle: "Artistic angles that celebrate the human form",
@@ -1205,152 +1282,240 @@ function getRandomPresetVariation(presetId: string): PresetVariation | null {
        }
      },
      {
        titles: ["Teaching moments, learning experiences 📚", "Academic authority, personal curriculum ✨", "When education gets experiential 🎓"],
        content: "Education is about opening minds, and sometimes the most valuable lessons happen outside the classroom - where professional knowledge meets personal experience.",
        photoInstructions: {
          lighting: "Academic lighting with educational authority",
          cameraAngle: "Educational professional angles with teaching confidence",
          composition: "Academic setting compositions with learning elements",
          styling: "Academic professional attire with teaching authority",
          mood: "Academically professional and educationally confident",
          technicalSettings: "Educational lighting with academic authority atmosphere"
        }
      }
    ]
  };
  
  const variations = presetVariations[presetId];
  if (!variations || variations.length === 0) {
    return null;
  }
  const randomIndex = Math.floor(Math.random() * variations.length);
  return variations[randomIndex];
}

function generateTitles(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string[] {
  const titles: string[] = [];
function generateTitles(
  params: ContentParameters,
  photoConfig: PhotoConfig,
  toneStyle: ToneStyle,
  profiles: Record<string, PlatformProfile>
): string[] {
  const profile = profiles[params.platform] ?? profiles.default;
  const maxSentenceLength = pickRandom(profile.maxSentenceLength);
  const emojiCount = pickRandom(profile.emojiDensity);
  const callToAction = pickRandom(profile.callToActions);
  const context: PlatformPostProcessContext = {
    emojiPool: toneStyle.emojis,
    emojiCount
  };

  const themes = photoConfig.themes;
  const starters = toneStyle.starters;
  const emojis = toneStyle.emojis;
  
  // Generate 3-5 varied titles

  const titles: string[] = [];
  titles.push(`${starters[0]} what happened during my ${themes[0]} session ${emojis[0]}`);
  titles.push(`${starters[1]} ${themes[1]} content just dropped ${emojis[1]}`);
  titles.push(`${themes[2]} vibes hit different today ${emojis[2]}`);
  

  if (params.photoType === 'all-xs') {
    titles.push(`Warning: ${themes[3] || 'exclusive'} content ahead - not for everyone ${emojis[3] || '🔞'}`);
    titles.push(`${starters[2]} the limits have been removed ${emojis[4] || '💎'}`);
  } else if (params.photoType === 'very-spicy') {
    titles.push(`${starters[3] || starters[0]} intense ${themes[3] || 'exclusive'} content ${emojis[3]}`);
  } else if (params.photoType === 'spicy') {
    titles.push(`${themes[3] || 'Spicy'} mood activated ${emojis[3]}`);
  }
  
  return titles.slice(0, Math.random() > 0.5 ? 3 : 4);

  if (titles.length > 0) {
    titles[0] = `${titles[0]} ${callToAction}`.trim();
  }

  const processedTitles = titles
    .map(title => applyEmojiDensity(title, emojis, emojiCount))
    .map(title => clampSentenceLength(title, maxSentenceLength))
    .map(title => (profile.postProcessTitle ? profile.postProcessTitle(title, context) : title))
    .map(title => clampSentenceLength(title, maxSentenceLength));

  return processedTitles.slice(0, Math.random() > 0.5 ? 3 : 4);
}

function generateMainContent(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string {
  let content = "";
  const themes = photoConfig.themes;
  const settings = photoConfig.settings;
  const mood = photoConfig.mood;
function generateMainContent(
  params: ContentParameters,
  photoConfig: PhotoConfig,
  toneStyle: ToneStyle,
  profiles: Record<string, PlatformProfile>
): string {
  const profile = profiles[params.platform] ?? profiles.default;
  const maxSentenceLength = pickRandom(profile.maxSentenceLength);
  const paragraphCount = pickRandom(profile.paragraphCounts);
  const emojiCount = pickRandom(profile.emojiDensity);
  const callToAction = pickRandom(profile.callToActions);
  const context: PlatformPostProcessContext = {
    emojiPool: toneStyle.emojis,
    emojiCount
  };

  const sentences: string[] = [];
  const starter = pickRandom(toneStyle.starters);
  const descriptors = toneStyle.descriptors;
  const endings = toneStyle.endings;
  const emojis = toneStyle.emojis;
  
  // Opening based on tone and photo type

  if (params.textTone === 'confident') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} ${descriptors[0]} content I just created. `;
    sentences.push(`${starter} ${descriptors[0]} content I just created.`);
  } else if (params.textTone === 'playful') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} I had the most ${descriptors[0]} photoshoot in my ${settings[0]} today! `;
    sentences.push(`${starter} I had the most ${descriptors[0]} photoshoot in my ${photoConfig.settings[0]} today!`);
  } else if (params.textTone === 'mysterious') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} in my ${settings[0]}... `;
    sentences.push(`${starter} in my ${photoConfig.settings[0]}...`);
  } else if (params.textTone === 'sassy') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter}, your girl just dropped some ${descriptors[0]} content. `;
    sentences.push(`${starter}, your girl just dropped some ${descriptors[0]} content.`);
  } else {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter}, this ${themes[0]} session was ${descriptors[0]}. `;
    sentences.push(`${starter}, this ${photoConfig.themes[0]} session was ${descriptors[0]}.`);
  }
  
  // Middle content based on photo type

  if (params.photoType === 'casual') {
    content += `Just me being my natural self - coffee in hand, messy hair, and that perfect morning light streaming through the window. `;
    sentences.push('Just me being my natural self - coffee in hand, messy hair, and that perfect morning light streaming through the window.');
  } else if (params.photoType === 'workout') {
    content += `Post-workout glow hits different when you've pushed your limits. Sweat, determination, and feeling absolutely powerful. `;
    sentences.push("Post-workout glow hits different when you've pushed your limits. Sweat, determination, and feeling absolutely powerful.");
  } else if (params.photoType === 'shower') {
    content += `There's something magical about water, steam, and that peaceful moment when it's just you and your thoughts. `;
    sentences.push("There's something magical about water, steam, and that peaceful moment when it's just you and your thoughts.");
  } else if (params.photoType === 'showing-skin') {
    content += `Artistic expression meets body confidence. Every curve tells a story, every shadow creates beauty. `;
    sentences.push('Artistic expression meets body confidence. Every curve tells a story, every shadow creates beauty.');
  } else if (params.photoType === 'spicy') {
    content += `When the mood strikes and you decide to turn up the heat. Silk, shadows, and that look that says everything. `;
    sentences.push('When the mood strikes and you decide to turn up the heat. Silk, shadows, and that look that says everything.');
  } else if (params.photoType === 'very-spicy') {
    content += `No holding back today. Raw passion, artistic nudity, and content that pushes every boundary I have. `;
    sentences.push('No holding back today. Raw passion, artistic nudity, and content that pushes every boundary I have.');
  } else if (params.photoType === 'all-xs') {
    content += `Complete creative freedom unleashed. No limits, no boundaries, just pure artistic expression in its rawest form. `;
    sentences.push('Complete creative freedom unleashed. No limits, no boundaries, just pure artistic expression in its rawest form.');
  }
  
  // Add custom prompt integration

  if (params.customPrompt) {
    content += `${params.customPrompt} `;
    sentences.push(params.customPrompt.trim());
  }
  
  // Promotion integration

  if (params.includePromotion) {
    if (params.textTone === 'confident') {
      content += `This exclusive content is available for my VIP subscribers who appreciate quality. `;
      sentences.push('This exclusive content is available for my VIP subscribers who appreciate quality.');
    } else if (params.textTone === 'playful') {
      content += `The full collection is waiting for my special subscribers! `;
      sentences.push('The full collection is waiting for my special subscribers!');
    } else if (params.textTone === 'mysterious') {
      content += `But that's all you see here... the rest remains in the shadows for those who seek it. `;
      sentences.push("But that's all you see here... the rest remains in the shadows for those who seek it.");
    } else if (params.textTone === 'sassy') {
      content += `If you want the full experience, you know where to find me. `;
      sentences.push('If you want the full experience, you know where to find me.');
    } else {
      content += `The complete series is available for subscribers who want the authentic experience. `;
      sentences.push('The complete series is available for subscribers who want the authentic experience.');
    }
  }
  
  // Ending with hashtags if selected
  content += endings[Math.floor(Math.random() * endings.length)];
  
  if (params.selectedHashtags.length > 0) {
    content += ` ${params.selectedHashtags.join(' ')}`;

  const ending = pickRandom(endings);
  sentences.push(/[.!?]$/.test(ending) ? ending : `${ending}.`);
  sentences.push(callToAction);

  const processedSentences = sentences
    .map(sentence => clampSentenceLength(sentence.trim(), maxSentenceLength))
    .map(sentence => applyEmojiDensity(sentence, toneStyle.emojis, emojiCount))
    .map(sentence => clampSentenceLength(sentence, maxSentenceLength));

  const sentencesPerParagraph = Math.max(1, Math.ceil(processedSentences.length / paragraphCount));
  const paragraphs: string[] = [];
  for (let index = 0; index < processedSentences.length; index += sentencesPerParagraph) {
    const chunk = processedSentences.slice(index, index + sentencesPerParagraph);
    paragraphs.push(chunk.join(profile.sentenceSeparator).trim());
  }
  
  return content;

  let content = paragraphs.join(profile.paragraphSeparator).trim();
  const hashtags = params.selectedHashtags.join(' ');
  if (hashtags) {
    content = content ? `${content}${profile.paragraphSeparator}${hashtags}` : hashtags;
  }

  const postProcessed = profile.postProcessContent ? profile.postProcessContent(content, context) : content;
  return postProcessed.trim();
}

function generatePhotoInstructions(params: ContentParameters, photoConfig: PhotoConfig): GeneratedContent['photoInstructions'] {
  return {
    lighting: photoConfig.lighting + (params.photoType === 'shower' ? ', emphasis on steam and water reflections' : 
               params.photoType === 'workout' ? ', bright and energetic to show determination' :
               params.photoType === 'very-spicy' || params.photoType === 'all-xs' ? ', dramatic contrasts and artistic shadows' : ''),
    angles: photoConfig.angles + (params.textTone === 'confident' ? ', powerful perspective shots' :
            params.textTone === 'playful' ? ', fun candid angles' :
            params.textTone === 'mysterious' ? ', shadowy artistic angles' : ''),
    composition: `${photoConfig.mood} composition with ${params.photoType === 'casual' ? 'natural framing' :
                 params.photoType === 'workout' ? 'dynamic action elements' :
                 params.photoType === 'shower' ? 'steam and water elements' :
                 params.photoType === 'showing-skin' ? 'artistic tasteful framing' :
                 params.photoType === 'spicy' ? 'seductive elegant framing' :
                 params.photoType === 'very-spicy' ? 'bold intimate framing' :
                 'unlimited creative framing'}`,
    styling: `${photoConfig.clothing.join(' or ')}, ${photoConfig.mood} aesthetic`,
    technical: `High resolution, sharp focus, professional quality${params.photoType === 'very-spicy' || params.photoType === 'all-xs' ? ', studio-grade equipment recommended' : ''}`,
    sceneSetup: `${photoConfig.settings.join(' or ')}, ${params.photoType} theme environment`
  };
}

function generateTags(params: ContentParameters, photoConfig: PhotoConfig): string[] {
  const baseTags = [params.photoType, params.textTone, params.platform];
  const photoTags = photoConfig.themes.slice(0, 2);
  const moodTags = [photoConfig.mood];
  
  return [...baseTags, ...photoTags, ...moodTags].map(tag => 

  return [...baseTags, ...photoTags, ...moodTags].map(tag =>
    tag.replace(/ /g, '-').toLowerCase()
  );
}
}

function pickRandom<T>(values: T[]): T {
  if (values.length === 0) {
    throw new Error('Cannot pick from an empty list.');
  }
  const index = Math.floor(Math.random() * values.length);
  return values[index];
}

function clampSentenceLength(sentence: string, maxLength: number): string {
  if (maxLength <= 0) {
    return '';
  }
  if (sentence.length <= maxLength) {
    return sentence;
  }
  const truncated = sentence.slice(0, maxLength);
  const lastSpace = truncated.lastIndexOf(' ');
  const base = lastSpace > 0 ? truncated.slice(0, lastSpace) : truncated;
  return `${base.trimEnd()}…`;
}

function applyEmojiDensity(text: string, emojiPool: string[], density: number): string {
  if (emojiPool.length === 0 || density <= 0) {
    return text.trim();
  }
  const emojis: string[] = [];
  for (let index = 0; index < density; index += 1) {
    const emoji = emojiPool[Math.floor(Math.random() * emojiPool.length)];
    emojis.push(emoji);
  }
  const trimmed = text.trim();
  return emojis.length > 0 ? `${trimmed} ${emojis.join('')}`.trim() : trimmed;
}

function createEmojiCluster(emojiPool: string[], count: number): string {
  if (emojiPool.length === 0 || count <= 0) {
    return '';
  }
  const emojis: string[] = [];
  for (let index = 0; index < count; index += 1) {
    const emoji = emojiPool[Math.floor(Math.random() * emojiPool.length)];
    emojis.push(emoji);
  }
  return emojis.join('');
}
tests/unit/server/advanced-content-generator.platform.test.ts
New
+58-0
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';

import { generateAdvancedContent, type ContentParameters } from '../../../server/advanced-content-generator';

describe('generateAdvancedContent platform profiles', () => {
  const baseParams: ContentParameters = {
    photoType: 'casual',
    textTone: 'confident',
    style: 'nude-photos',
    includePromotion: true,
    selectedHashtags: ['#cozy', '#sunrise'],
    customPrompt: 'Crew notes: make sure the candles stay lit.',
    platform: 'instagram'
  };

  beforeEach(() => {
    vi.spyOn(Math, 'random').mockReturnValue(0.1);
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it('formats instagram captions with double newlines and IG call-to-action', () => {
    const result = generateAdvancedContent({ ...baseParams, platform: 'instagram' });

    expect(result.content).toContain('\n\n');
    expect(result.content).toContain('Tap the bio link for the full drop 🔗');
    expect(result.titles[0]).toContain('Tap the bio link for the full drop 🔗');
  });

  it('adds emoji clusters for Fansly exports', () => {
    const result = generateAdvancedContent({ ...baseParams, platform: 'fansly' });
    const lines = result.content.split('\n');

    expect(result.content).toContain('Unlock the rest on my Fansly 💖');
    expect(lines[lines.length - 1]).toMatch(/^[^A-Za-z0-9]*$/u);
    expect(result.titles[0]).toMatch(/Unlock the rest on my Fansly 💖/);
  });

  it('keeps twitter threads compact with single newlines', () => {
    const result = generateAdvancedContent({ ...baseParams, platform: 'twitter' });

    expect(result.content).not.toContain('\n\n');
    expect(result.content.split('\n').length).toBeLessThanOrEqual(3);
    expect(result.titles[0]).toContain("RT if you're ready for more 🔁");
  });

  it('produces different bodies for each platform profile', () => {
    const instagram = generateAdvancedContent({ ...baseParams, platform: 'instagram' });
    const fansly = generateAdvancedContent({ ...baseParams, platform: 'fansly' });
    const twitter = generateAdvancedContent({ ...baseParams, platform: 'twitter' });

    expect(instagram.content).not.toEqual(fansly.content);
    expect(instagram.content).not.toEqual(twitter.content);
    expect(fansly.content).not.toEqual(twitter.content);
  });
});
