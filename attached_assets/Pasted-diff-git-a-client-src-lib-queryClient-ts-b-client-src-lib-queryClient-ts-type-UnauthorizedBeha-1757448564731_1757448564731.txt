diff --git a/client/src/lib/queryClient.ts b/client/src/lib/queryClient.ts
@@
-type UnauthorizedBehavior = "returnNull" | "throw";
-export const getQueryFn: <T>(options: {
-  on401: UnauthorizedBehavior;
-}) => QueryFunction<T> =
-  ({ on401: unauthorizedBehavior }) =>
-  async ({ queryKey }) => {
+type UnauthorizedBehavior = "returnNull" | "throw";
+export const getQueryFn: <T = unknown>(options: {
+  on401: UnauthorizedBehavior;
+}) => QueryFunction<T> =
+  ({ on401: unauthorizedBehavior }) =>
+  async ({ queryKey }) => {
@@
-    const token = localStorage.getItem('authToken');
-    if (token) {
-      headers['Authorization'] = `Bearer ${token}`;
-    }
+    const token = localStorage.getItem("authToken");
+    if (token) {
+      headers["Authorization"] = `Bearer ${token}`;
+    }
 
-    const [url] = queryKey as [string, ...unknown[]];
-    const res = await fetch(url as string, {
+    const url = queryKey[0] as string;
+    const res = await fetch(url, {
       credentials: "include",
       headers,
     });
diff --git a/vite.config.js b/vite.config.js
@@
-import { defineConfig } from "vite";
+/* eslint-env node */
+import { defineConfig } from "vite";
@@
-        proxy: {
-            "/api": {
-                target: "http://localhost:5000",
-                changeOrigin: true,
-                secure: false
-            }
-        }
-    },
-});
+        proxy: {
+            "/api": {
+                target: "http://localhost:5000",
+                changeOrigin: true,
+                secure: false,
+            },
+        },
+    },
+});
diff --git a/eslint.config.js b/eslint.config.js
@@
       'client/dist/**',
       '**/attached_assets/**',
       '**/tmp/**',
+      'browser-extension/**',
+      '*.accessibility.js',
+      'client/src/lib/eslint-rules/**',
+      'client/src/lib/stylelint-rules/**',
+      'production-server.js',
+      'production-start.js',
+      'scripts/**',
     ],
   },
@@
       '@typescript-eslint/no-non-null-assertion': 'warn',
+      '@typescript-eslint/no-unsafe-function-type': 'warn',
+      '@typescript-eslint/no-empty-object-type': 'warn',
+      '@typescript-eslint/no-namespace': 'warn',
+      'no-case-declarations': 'warn',
+      'no-prototype-builtins': 'warn',
+      'no-useless-escape': 'warn',
       'no-empty': ['error', { allowEmptyCatch: true }],
@@
   {
     files: ['tests/**/*.{js,ts}'],
     languageOptions: {
       globals: {
         ...globals.node,
       },
     },
     rules: {
       '@typescript-eslint/no-require-imports': 'off',
       'no-undef': 'off',
     },
   },
   {
     files: ['*.config.{js,ts}', 'server/start-production.js'],
     languageOptions: {
       globals: {
         ...globals.node,
       },
     },
     rules: {
       '@typescript-eslint/no-require-imports': 'off',
     },
   },
   {
     files: ['vite.config.js'],
     languageOptions: {
       globals: {
         ...globals.node,
       },
     },
   },
 ];
