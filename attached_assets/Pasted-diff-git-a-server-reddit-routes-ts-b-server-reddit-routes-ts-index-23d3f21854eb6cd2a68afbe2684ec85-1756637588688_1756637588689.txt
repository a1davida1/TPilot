diff --git a/server/reddit-routes.ts b/server/reddit-routes.ts
index 23d3f21854eb6cd2a68afbe2684ec855b34cff65..17cbab11daea59380f50564b6a1e21f569fd55ff 100644
--- a/server/reddit-routes.ts
+++ b/server/reddit-routes.ts
@@ -1,33 +1,34 @@
 import type { Express } from 'express';
 import crypto from 'crypto';
 import { RedditManager, getRedditAuthUrl, exchangeRedditCode } from './lib/reddit.js';
 import { db } from './db.js';
 import { creatorAccounts } from '@shared/schema.js';
 import { eq, and } from 'drizzle-orm';
 import { authenticateToken } from './middleware/auth.js';
 import { stateStore, encrypt, decrypt, rateLimit } from './services/state-store.js';
+import { redditCommunitiesDatabase, getCommunityInsights } from './reddit-communities.js';
 
 export function registerRedditRoutes(app: Express) {
   
   // Start Reddit OAuth flow - SECURE VERSION
   app.get('/api/reddit/connect', rateLimit, authenticateToken, async (req: any, res) => {
     try {
       if (!process.env.REDDIT_CLIENT_ID) {
         return res.status(503).json({ 
           error: 'Reddit integration not configured. Please set REDDIT_CLIENT_ID and other Reddit environment variables.' 
         });
       }
 
       const userId = req.user?.id;
       if (!userId) {
         return res.status(401).json({ error: 'Authentication required' });
       }
 
       // Generate cryptographically secure state
       const state = crypto.randomBytes(32).toString('hex');
       
       // Store state securely with user binding
       await stateStore.set(`reddit_state:${state}`, {
         userId,
         ip: req.ip,
         userAgent: req.get('user-agent'),
diff --git a/server/reddit-routes.ts b/server/reddit-routes.ts
index 23d3f21854eb6cd2a68afbe2684ec855b34cff65..17cbab11daea59380f50564b6a1e21f569fd55ff 100644
--- a/server/reddit-routes.ts
+++ b/server/reddit-routes.ts
@@ -133,50 +134,89 @@ export function registerRedditRoutes(app: Express) {
             handle: profile.username,
             platformUsername: profile.username,
             oauthToken: encryptedAccessToken,
             oauthRefresh: encryptedRefreshToken || '',
             isActive: true,
             metadata: {
               karma: profile.karma || 0,
               verified: profile.verified || false,
               tokenExpiry: Date.now() + (3600 * 1000)
             },
             updatedAt: new Date(),
           }
         });
 
       console.log('Reddit account connected successfully for user:', userId);
 
       // Success redirect to dashboard
       res.redirect('/dashboard?reddit=connected&username=' + encodeURIComponent(profile.username));
       
     } catch (error) {
       console.error('Reddit callback error:', error);
       res.redirect('/dashboard?error=reddit_connection_failed');
     }
   });
 
+  // Reddit communities listing
+  app.get('/api/reddit/communities', async (req, res) => {
+    try {
+      const { category, search } = req.query;
+      let communities = redditCommunitiesDatabase;
+
+      if (category && category !== 'all') {
+        communities = communities.filter(c => c.category === category);
+      }
+
+      if (search) {
+        const term = (search as string).toLowerCase();
+        communities = communities.filter(c =>
+          c.name.toLowerCase().includes(term) ||
+          c.displayName.toLowerCase().includes(term) ||
+          c.description.toLowerCase().includes(term) ||
+          c.tags.some(tag => tag.toLowerCase().includes(term))
+        );
+      }
+
+      res.json(communities);
+    } catch (error) {
+      console.error('Error fetching Reddit communities:', error);
+      res.status(500).json({ error: 'Failed to fetch Reddit communities' });
+    }
+  });
+
+  // Detailed community insights
+  app.get('/api/reddit/community-insights/:communityId', async (req, res) => {
+    try {
+      const { communityId } = req.params;
+      const insights = getCommunityInsights(communityId);
+      res.json(insights);
+    } catch (error) {
+      console.error('Error fetching community insights:', error);
+      res.status(500).json({ error: 'Failed to fetch community insights' });
+    }
+  });
+
   // Get user's Reddit connections
   app.get('/api/reddit/accounts', authenticateToken, async (req: any, res) => {
     try {
       const userId = req.user?.id;
       if (!userId) {
         return res.status(401).json({ error: 'Authentication required' });
       }
 
       const accounts = await db
         .select()
         .from(creatorAccounts)
         .where(
           and(
             eq(creatorAccounts.userId, userId),
             eq(creatorAccounts.platform, 'reddit')
           )
         );
 
       res.json(accounts.map(account => ({
         id: account.id,
         username: account.platformUsername || account.handle,
         isActive: account.isActive,
         connectedAt: account.createdAt,
         karma: (account.metadata as any)?.karma || 0,
         verified: (account.metadata as any)?.verified || false,
