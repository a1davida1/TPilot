diff --git a/server/lib/queue-factory.ts b/server/lib/queue-factory.ts
index 1234567..89abcde 100644
--- a/server/lib/queue-factory.ts
+++ b/server/lib/queue-factory.ts
@@
-export async function enqueue<T = any>(
+export async function enqueue<T = unknown>(
   queueName: string,
   payload: T,
   options?: Parameters<IQueue['enqueue']>[2]
 ): Promise<string> {
@@
-export async function registerProcessor<T = any>(
+export async function registerProcessor<T = unknown>(
   queueName: string,
   handler: Parameters<IQueue['process']>[1],
   options?: Parameters<IQueue['process']>[2]
 ): Promise<void> {
diff --git a/server/lib/queue/index.ts b/server/lib/queue/index.ts
index 1234567..89abcde 100644
--- a/server/lib/queue/index.ts
+++ b/server/lib/queue/index.ts
@@
-export async function getQueueHealth() {
-  const queue = getQueueBackend();
-  const health: Record<string, any> = {};
+interface QueueHealthInfo {
+  pending: number;
+  failureRate: number;
+  totalJobs: number;
+  failedJobs: number;
+  error?: string;
+}
+
+export async function getQueueHealth(): Promise<Record<string, QueueHealthInfo>> {
+  const queue = getQueueBackend();
+  const health: Record<string, QueueHealthInfo> = {};
@@
-      health[queueName] = { error: error instanceof Error ? error.message : 'Unknown error' };
+      health[queueName] = {
+        pending: 0,
+        failureRate: 0,
+        totalJobs: 0,
+        failedJobs: 0,
+        error: error instanceof Error ? error.message : 'Unknown error'
+      };
     }
   }
 
   return health;
 }
diff --git a/server/lib/queue-redis.ts b/server/lib/queue-redis.ts
index 1234567..89abcde 100644
--- a/server/lib/queue-redis.ts
+++ b/server/lib/queue-redis.ts
@@
-    return this.queues.get(queueName)!;
+    const queue = this.queues.get(queueName);
+    if (!queue) {
+      throw new Error(`Queue ${queueName} not initialized`);
+    }
+    return queue;
@@
-    return this.queueEvents.get(queueName)!;
+    const queueEvents = this.queueEvents.get(queueName);
+    if (!queueEvents) {
+      throw new Error(`QueueEvents ${queueName} not initialized`);
+    }
+    return queueEvents;
diff --git a/server/admin-routes.ts b/server/admin-routes.ts
index 1234567..89abcde 100644
--- a/server/admin-routes.ts
+++ b/server/admin-routes.ts
@@
 interface AdminRequest extends express.Request {
   user?: User;
 }
 
+function ensureAdminId(req: AdminRequest, res: express.Response): number | undefined {
+  const adminId = req.user?.id;
+  if (typeof adminId !== 'number') {
+    res.status(401).json({ message: 'Unauthorized' });
+    return undefined;
+  }
+  return adminId;
+}
@@
-      const { userId, reason, duration, banIp = false } = req.body;
-      const adminId = (req as AdminRequest).user!.id;
+      const { userId, reason, duration, banIp = false } = req.body;
+      const adminId = ensureAdminId(req as AdminRequest, res);
+      if (adminId === undefined) return;
@@
-      const { userId } = req.body;
-      const adminId = (req as AdminRequest).user!.id;
+      const { userId } = req.body;
+      const adminId = ensureAdminId(req as AdminRequest, res);
+      if (adminId === undefined) return;
@@
-      const { userId, hours, reason } = req.body;
-      const adminId = (req as AdminRequest).user!.id;
+      const { userId, hours, reason } = req.body;
+      const adminId = ensureAdminId(req as AdminRequest, res);
+      if (adminId === undefined) return;
@@
-      const { flagId, action, reason } = req.body; // approve, remove, warn_user
-      const adminId = (req as AdminRequest).user!.id;
+      const { flagId, action, reason } = req.body; // approve, remove, warn_user
+      const adminId = ensureAdminId(req as AdminRequest, res);
+      if (adminId === undefined) return;
diff --git a/server/lib/workers/post-worker.ts b/server/lib/workers/post-worker.ts
index 1234567..89abcde 100644
--- a/server/lib/workers/post-worker.ts
+++ b/server/lib/workers/post-worker.ts
@@
-        } catch (error) {
-          logger.warn('Failed to attach media, posting as text:', { error: (error as any).message });
+        } catch (error: unknown) {
+          logger.warn('Failed to attach media, posting as text:', {
+            error: error instanceof Error ? error.message : 'Unknown error'
+          });
         }
@@
-        await this.updateJobStatus(postJobId!, 'sent', {
-          redditPostId: submitted.data.id,
-          subreddit,
-        });
+        if (!postJobId) {
+          throw new Error('postJobId is required');
+        }
+        await this.updateJobStatus(postJobId, 'sent', {
+          redditPostId: submitted.data.id,
+          subreddit,
+        });
@@
-      await this.updateJobStatus(postJobId!, 'failed', {
-        error: (error as any).message,
-        failedAt: new Date().toISOString(),
-      });
+      if (postJobId) {
+        await this.updateJobStatus(postJobId, 'failed', {
+          error: error instanceof Error ? error.message : 'Unknown error',
+          failedAt: new Date().toISOString(),
+        });
+      }
@@
-      await this.logEvent(userId, 'job.failed', {
-        postJobId,
-        subreddit,
-        error: (error as any).message,
-      });
+      await this.logEvent(userId, 'job.failed', {
+        postJobId,
+        subreddit,
+        error: error instanceof Error ? error.message : 'Unknown error',
+      });
diff --git a/server/lib/workers/metrics-worker.ts b/server/lib/workers/metrics-worker.ts
index 1234567..89abcde 100644
--- a/server/lib/workers/metrics-worker.ts
+++ b/server/lib/workers/metrics-worker.ts
@@
-      logger.error(`Metrics job for post ${redditPostId} failed:`, { error: (error as any).message });
+      logger.error(`Metrics job for post ${redditPostId} failed:`, {
+        error: error instanceof Error ? error.message : 'Unknown error'
+      });
@@
-            error: (error as any).message,
+            error: error instanceof Error ? error.message : 'Unknown error',
         });
       }
     }
   }
 
-  private async fetchPostMetrics(reddit: unknown, redditPostId: string) {
+interface PostMetrics {
+  score: number;
+  upvoteRatio: number;
+  numComments: number;
+  views: number;
+  collectedAt: Date;
+}
+
+  private async fetchPostMetrics(reddit: unknown, redditPostId: string): Promise<PostMetrics | null> {
@@
-  private async updatePostMetrics(postJobId: number, metrics: unknown) {
+  private async updatePostMetrics(postJobId: number, metrics: PostMetrics) {
     await prisma.postJob.update({
       where: { id: postJobId },
       data: {
-        score: (metrics as any).score,
-        upvoteRatio: (metrics as any).upvoteRatio,
-        comments: (metrics as any).numComments,
-        views: (metrics as any).views,
-        lastCollected: (metrics as any).collectedAt.toISOString(),
+        score: metrics.score,
+        upvoteRatio: metrics.upvoteRatio,
+        comments: metrics.numComments,
+        views: metrics.views,
+        lastCollected: metrics.collectedAt.toISOString(),
       },
     });
   }
 }
diff --git a/server/routes.ts b/server/routes.ts
index 1234567..89abcde 100644
--- a/server/routes.ts
+++ b/server/routes.ts
@@
-import * as connectRedis from 'connect-redis';
+import connectRedis from 'connect-redis';
@@
-      const { RedisStore } = connectRedis as any;
-      const redisClient = new Redis(REDIS_URL);
-      store = new RedisStore({ client: redisClient, prefix: 'sess:' });
+      const RedisStore = connectRedis(session);
+      const redisClient = new Redis(REDIS_URL);
+      store = new RedisStore({ client: redisClient, prefix: 'sess:' });
@@
-      const { mode, prompt, platform, style, theme, includePromotion, customInstructions } = req.body as any;
+      interface GenerationRequestBody {
+        mode: string;
+        prompt: string;
+        platform?: string;
+        style?: string;
+        theme?: string;
+        includePromotion?: boolean;
+        customInstructions?: string;
+      }
+      const body = req.body as Partial<GenerationRequestBody>;
+      if (!body.mode || !body.prompt) {
+        return res.status(400).json({ error: 'mode and prompt are required' });
+      }
+      const {
+        mode,
+        prompt,
+        platform,
+        style,
+        theme,
+        includePromotion,
+        customInstructions
+      } = body;
diff --git a/server/auth.ts b/server/auth.ts
index 1234567..89abcde 100644
--- a/server/auth.ts
+++ b/server/auth.ts
@@
-  // DEPRECATED ROUTE - REMOVED (use POST /api/auth/reset-password instead)
-  /*
-  app.post('/api/auth/verify-reset-token', passwordResetLimiter, async (req, res) => {
-    ...
-  });
-  */
+  // Deprecated verify-reset-token route has been removed to enforce the new password reset flow.
diff --git a/client/src/components/performance-optimization.tsx b/client/src/components/performance-optimization.tsx
index 1234567..89abcde 100644
--- a/client/src/components/performance-optimization.tsx
+++ b/client/src/components/performance-optimization.tsx
@@
-        memoryUsage: (performance as ExtendedPerformance).memory ?
-          Math.round(((performance as ExtendedPerformance).memory!.usedJSHeapSize / (performance as ExtendedPerformance).memory!.totalJSHeapSize) * 100) :
-          0,
+        memoryUsage: (() => {
+          const mem = (performance as ExtendedPerformance).memory;
+          return mem ? Math.round((mem.usedJSHeapSize / mem.totalJSHeapSize) * 100) : 0;
+        })(),
@@
-    const connection = (navigator as any).connection;
+    const connection = (navigator as ExtendedNavigator).connection;
@@
-    const connection = (navigator as any).connection;
+    const connection = (navigator as ExtendedNavigator).connection;
diff --git a/client/src/components/optimization/PerformanceOptimizer.tsx b/client/src/components/optimization/PerformanceOptimizer.tsx
index 1234567..89abcde 100644
--- a/client/src/components/optimization/PerformanceOptimizer.tsx
+++ b/client/src/components/optimization/PerformanceOptimizer.tsx
@@
-                    strokeDashoffset={`${2 * Math.PI * 56 * (1 - performanceScore!.overall / 100)}`}
+                    strokeDashoffset={`${2 * Math.PI * 56 * (1 - (performanceScore?.overall ?? 0) / 100)}`}
@@
-                    <div className="text-3xl font-bold text-white">{performanceScore!.overall}</div>
+                    <div className="text-3xl font-bold text-white">{performanceScore?.overall ?? 0}</div>
@@
-              {Object.entries(performanceScore!).filter(([key]) => key !== 'overall').map(([key, value]) => (
+              {Object.entries(performanceScore ?? {}).filter(([key]) => key !== 'overall').map(([key, value]) => (
diff --git a/client/src/pages/admin.tsx b/client/src/pages/admin.tsx
index 1234567..89abcde 100644
--- a/client/src/pages/admin.tsx
+++ b/client/src/pages/admin.tsx
@@
-                      <p className="text-2xl font-bold text-blue-400">{(stats as any)?.newUsersToday || 0}</p>
+                      <p className="text-2xl font-bold text-blue-400">{stats?.newUsersToday ?? 0}</p>
@@
-                      <p className="text-2xl font-bold text-purple-400">{(stats as any)?.trialUsers || 0}</p>
+                      <p className="text-2xl font-bold text-purple-400">{stats?.trialUsers ?? 0}</p>
@@
-                      <span className="text-gray-900">{(stats as any)?.freeUsers || 0}</span>
+                      <span className="text-gray-900">{stats?.freeUsers ?? 0}</span>
@@
-                      <span className="text-green-400">{(stats as any)?.proUsers || 0}</span>
+                      <span className="text-green-400">{stats?.proUsers ?? 0}</span>
@@
-                      <span className="text-purple-400">{(stats as any)?.premiumUsers || 0}</span>
+                      <span className="text-purple-400">{stats?.premiumUsers ?? 0}</span>
@@
-                      <div className={`w-3 h-3 rounded-full ${(stats as any)?.jwtConfigured ? 'bg-green-500' : 'bg-red-500'}`} />
+                      <div className={`w-3 h-3 rounded-full ${stats?.jwtConfigured ? 'bg-green-500' : 'bg-red-500'}`} />
@@
-                    <Badge variant={(stats as any)?.jwtConfigured ? 'default' : 'destructive'}>
-                      {(stats as any)?.jwtConfigured ? 'Active' : 'Inactive'}
+                    <Badge variant={stats?.jwtConfigured ? 'default' : 'destructive'}>
+                      {stats?.jwtConfigured ? 'Active' : 'Inactive'}
diff --git a/client/src/pages/reddit-posting.tsx b/client/src/pages/reddit-posting.tsx
index 1234567..89abcde 100644
--- a/client/src/pages/reddit-posting.tsx
+++ b/client/src/pages/reddit-posting.tsx
@@
-{(validation as any)?.policyState === 'pass' ? (
+{validation?.policyState === 'pass' ? (
@@
-  const [validation, setValidation] = useState<any>(null);
+interface PolicyValidation {
+  policyState: 'pass' | 'warn' | 'fail';
+  warnings: string[];
+}
+const [validation, setValidation] = useState<PolicyValidation | null>(null);
+interface Account {
+  id: string;
+  username: string;
+}
+const [accounts, setAccounts] = useState<Account[]>([]);
@@
-                    (validation as any)?.policyState === 'pass' ? 'bg-green-50 border-green-200' :
-                    (validation as any)?.policyState === 'warn' ? 'bg-yellow-50 border-yellow-200' :
+                    validation?.policyState === 'pass' ? 'bg-green-50 border-green-200' :
+                    validation?.policyState === 'warn' ? 'bg-yellow-50 border-yellow-200' :
                     'bg-red-50 border-red-200'
                   }>
@@
-                    {(validation as any)?.warnings && (validation as any)?.warnings.length > 0 && (
-                      <ul className={`text-sm space-y-1 ${
-                        (validation as any)?.policyState === 'pass' ? 'text-green-700' :
-                        (validation as any)?.policyState === 'warn' ? 'text-yellow-700' :
-                        'text-red-700'
-                      }`}>
-                        {(validation as any)?.warnings.map((warning: string, index: number) => (
-                          <li key={index}>• {warning}</li>
-                        ))}
-                      </ul>
-                    )}
+                    {validation?.warnings?.length ? (
+                      <ul className={`text-sm space-y-1 ${
+                        validation.policyState === 'pass' ? 'text-green-700' :
+                        validation.policyState === 'warn' ? 'text-yellow-700' :
+                        'text-red-700'
+                      }`}>
+                        {validation.warnings.map((warning, index) => (
+                          <li key={index}>• {warning}</li>
+                        ))}
+                      </ul>
+                    ) : null}
@@
-disabled={submitting || !subreddit || !title || (accounts as any[])?.length === 0}
+disabled={submitting || !subreddit || !title || accounts.length === 0}
diff --git a/client/src/hooks/useAuth.ts b/client/src/hooks/useAuth.ts
index 1234567..89abcde 100644
--- a/client/src/hooks/useAuth.ts
+++ b/client/src/hooks/useAuth.ts
@@
   isAdmin?: boolean;
   subscription_status?: string;
   role?: string;
+  mustChangePassword?: boolean;
 }
diff --git a/client/src/pages/change-password.tsx b/client/src/pages/change-password.tsx
index 1234567..89abcde 100644
--- a/client/src/pages/change-password.tsx
+++ b/client/src/pages/change-password.tsx
@@
-    if (user && !(user as any).mustChangePassword) {
+    if (user && !user.mustChangePassword) {
       navigate('/dashboard');
     }
   }, [user, navigate]);
diff --git a/client/src/lib/analytics-tracker.ts b/client/src/lib/analytics-tracker.ts
index 1234567..89abcde 100644
--- a/client/src/lib/analytics-tracker.ts
+++ b/client/src/lib/analytics-tracker.ts
@@
-  public trackContentGeneration(success: boolean, platform: string, metadata?: Record<string, any>) {
+  public trackContentGeneration(success: boolean, platform: string, metadata?: Record<string, unknown>) {
@@
-  public trackFeatureUsage(feature: string, action: string, metadata?: Record<string, any>) {
+  public trackFeatureUsage(feature: string, action: string, metadata?: Record<string, unknown>) {
@@
-export const trackEvent = (type: string, metadata?: Record<string, any>, value?: number) => analytics.trackEvent(type, metadata, value);
-export const trackContentGeneration = (success: boolean, platform: string, metadata?: Record<string, any>) => analytics.trackContentGeneration(success, platform, metadata);
-export const trackFeatureUsage = (feature: string, action: string, metadata?: Record<string, any>) => analytics.trackFeatureUsage(feature, action, metadata);
+export const trackEvent = (type: string, metadata?: Record<string, unknown>, value?: number) =>
+  analytics.trackEvent(type, metadata, value);
+export const trackContentGeneration = (success: boolean, platform: string, metadata?: Record<string, unknown>) =>
+  analytics.trackContentGeneration(success, platform, metadata);
+export const trackFeatureUsage = (feature: string, action: string, metadata?: Record<string, unknown>) =>
+  analytics.trackFeatureUsage(feature, action, metadata);
