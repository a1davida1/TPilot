diff --git a/server/routes.ts b/server/routes.ts
index 8aab706bbdb603318f7e6003de0d4927ef4eceeb..0832886101d7db9d21e2fc87b14778bc5dca7642 100644
--- a/server/routes.ts
+++ b/server/routes.ts
@@ -1,30 +1,34 @@
 import type { Express } from "express";
 import express from "express";
 import { createServer, type Server } from "http";
 import session from 'express-session';
 import path from 'path';
+import connectPgSimple from 'connect-pg-simple';
+import connectRedis from 'connect-redis';
+import { Pool } from 'pg';
+import Redis from 'ioredis';
 
 // Security and middleware
 import { validateEnvironment, securityMiddleware, ipLoggingMiddleware, errorHandler, logger, generationLimiter } from "./middleware/security.js";
 import { authenticateToken } from "./middleware/auth.js";
 
 // Route modules
 import { authRoutes } from "./routes/auth.js";
 import { uploadRoutes } from "./routes/upload.js";
 
 // Core imports
 import { storage } from "./storage.js";
 import { setupAuth } from "./auth.js";
 import { setupAdminRoutes } from "./admin-routes.js";
 import { configureSocialAuth, socialAuthRoutes } from "./social-auth-config.js";
 import { visitorAnalytics } from "./visitor-analytics.js";
 
 // Service imports
 import { generateContent } from "./services/content-generator.js";
 import { generateAIContent, analyzeImageForContent } from "./services/ai-generator.js";
 import { generateWithMultiProvider, getProviderStatus } from "./services/multi-ai-provider.js";
 import { generateUnifiedAIContent, analyzeImage } from "./services/unified-ai-service.js";
 import { generateImageCaption, imageToBase64, validateImageFormat } from "./image-caption-generator.js";
 import { ObjectStorageService, ObjectNotFoundError } from "./objectStorage.js";
 import { getRandomTemplates, addWatermark, getTemplateByMood } from "./content-templates.js";
 import { generateAdvancedContent, type ContentParameters } from "./advanced-content-generator.js";
diff --git a/server/routes.ts b/server/routes.ts
index 8aab706bbdb603318f7e6003de0d4927ef4eceeb..0832886101d7db9d21e2fc87b14778bc5dca7642 100644
--- a/server/routes.ts
+++ b/server/routes.ts
@@ -32,81 +36,101 @@ import { redditCommunitiesDatabase, getRecommendationsForUser, getCommunityInsig
 import { getAvailablePerks, getPerksByCategory, generateReferralCode, getSignupInstructions } from "./pro-perks.js";
 
 // API route modules
 import { registerApiRoutes } from "./api-routes.js";
 import { registerPolicyRoutes } from "./policy-routes.js";
 import { registerRedditRoutes } from "./reddit-routes.js";
 import { registerAnalyticsRoutes } from "./analytics-routes.js";
 import { createLead, confirmLead } from "./api/leads.js";
 import { getLeads } from "./api/admin-leads.js";
 import { captionRouter } from "./routes/caption.js";
 import { registerSocialMediaRoutes } from "./social-media-routes.js";
 
 // Schema imports
 import { insertContentGenerationSchema, insertUserImageSchema } from "@shared/schema";
 
 // Core dependencies
 import multer from 'multer';
 import fs from 'fs/promises';
 import crypto from 'crypto';
 import jwt from 'jsonwebtoken';
 import bcrypt from 'bcrypt';
 
 // Get secure environment variables (no fallbacks)
 const SESSION_SECRET = process.env.SESSION_SECRET!;
 const IS_PRODUCTION = process.env.NODE_ENV === 'production';
+const DATABASE_URL = process.env.DATABASE_URL;
+const REDIS_URL = process.env.REDIS_URL;
 
 // Auth request interface
 interface AuthRequest extends express.Request {
   user?: any;
 }
 
 export async function registerRoutes(app: Express): Promise<Server> {
   // ==========================================
   // VALIDATE ENVIRONMENT & APPLY SECURITY
   // ==========================================
   
   // Validate required environment variables first
   validateEnvironment();
   
   // Apply security middleware
   app.use(securityMiddleware);
   
   // Apply IP logging middleware
   app.use(ipLoggingMiddleware);
 
   // Visitor analytics middleware
   app.use((req, res, next) => {
     // Only track non-API routes to avoid noise
     if (!req.path.startsWith('/api/') && !req.path.startsWith('/uploads/')) {
       visitorAnalytics.trackPageView(req, req.path);
     }
     next();
   });
 
   // Session configuration (secure)
+  let store: session.Store | undefined;
+
+  if (IS_PRODUCTION) {
+    if (REDIS_URL) {
+      const RedisStore = connectRedis(session);
+      const redisClient = new Redis(REDIS_URL);
+      store = new RedisStore({ client: redisClient });
+    } else if (DATABASE_URL) {
+      const PgStore = connectPgSimple(session);
+      store = new PgStore({
+        pool: new Pool({ connectionString: DATABASE_URL })
+      });
+    } else {
+      logger.warn('No REDIS_URL or DATABASE_URL set in production; using MemoryStore.');
+    }
+  }
+
   app.use(session({
+    store,
     secret: SESSION_SECRET,
     resave: false,
     saveUninitialized: false,
     cookie: {
       secure: IS_PRODUCTION, // Only use secure in production
       httpOnly: true,
       maxAge: 24 * 60 * 60 * 1000, // 24 hours
       sameSite: 'lax'
     }
   }));
 
   // ==========================================
   // AUTHENTICATION SETUP
   // ==========================================
   
   // Setup authentication
   setupAuth(app);
   setupAdminRoutes(app);
   
   // Configure social authentication
   configureSocialAuth();
 
   // ==========================================
   // ROUTE REGISTRATION
   // ==========================================
