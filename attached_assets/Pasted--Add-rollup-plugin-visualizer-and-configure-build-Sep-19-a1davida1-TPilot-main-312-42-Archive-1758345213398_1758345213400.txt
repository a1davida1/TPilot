
Add rollup-plugin-visualizer and configure build
Sep 19
·
a1davida1/TPilot
·
main
+312
-42

Archive

Share

Create PR


1. Add `rollup-plugin-visualizer` (or similar) to dev dependencies and configure it in `vite.config.js` to emit size reports during `npm run build`.
2. Define a `build.rollupOptions.output.manualChunks` map to extract vendor libraries (React, Stripe, Radix) into stable chunks, reducing initial load.
3. Run `npm run build` locally to inspect the generated analysis and confirm chunking works without regressions.
Copy
Summary

Implemented a local rollup-plugin-visualizer package and wired it into the dev dependencies so npm run build now emits bundle-report.html with gzip/brotli metrics for every emitted chunk.

Reworked vite.config.js to enable the analyzer during production builds and defined manual vendor chunk maps that carve React, Stripe, and Radix modules into stable bundles, reducing the size of the application entry chunk.

Pointed client/index.html back to /src/main.tsx so Vite can regenerate assets cleanly during the build process instead of referencing stale pre-built filenames.

Cleared lingering lint blockers by removing unused variables and enforcing const usage in shared utilities and tests, keeping the required lint hook green.

Testing

✅ npm run lint -- --quiet

❌ npm test *(fails: numerous pre-existing integration/unit suites around email verification, expenses, queues, etc., due to missing external services and mocked dependencies)*

✅ npm run build


Files (9)

client/index.html
+2
-4

fix-type-errors.cjs
+1
-2

package-lock.json
+10
-0

package.json
+1
-0

server/caption/openaiFallback.ts
+0
-1

tests/integration/content-generation.test.ts
+1
-1

vendor/rollup-plugin-visualizer/index.js
New

vendor/rollup-plugin-visualizer/package.json
New

vite.config.js
+86
-34



Ask

Code
Diff
Logs

client/index.html
+2
-4

@@ -5,46 +5,44 @@
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    <title>ThottoPilot - From Photo to Posted in 5 Seconds</title>
    <meta name="description" content="AI-powered content creation platform for adult content creators. Upload once, AI generates 8 different captions, posts everywhere. ImageShield protection, profit tracking, tax organization included." />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://thottopilot.com/" />
    <meta property="og:title" content="ThottoPilot - From Photo to Posted in 5 Seconds" />
    <meta property="og:description" content="AI-powered content creation platform for adult content creators. Upload once, AI generates 8 different captions, posts everywhere." />
    <meta property="og:image" content="https://thottopilot.com/og-image.jpg" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://thottopilot.com/" />
    <meta property="twitter:title" content="ThottoPilot - From Photo to Posted in 5 Seconds" />
    <meta property="twitter:description" content="AI-powered content creation platform for adult content creators. Upload once, AI generates 8 different captions, posts everywhere." />
    <meta property="twitter:image" content="https://thottopilot.com/og-image.jpg" />

    <!-- Additional SEO -->
    <meta name="keywords" content="content creation, AI captions, social media automation, adult content, image protection, profit tracking, tax tracker" />
    <meta name="author" content="ThottoPilot" />
    <link rel="canonical" href="https://thottopilot.com/" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/logo.png" />
    <script type="module" crossorigin src="/assets/index-DfIsLmmQ.js"></script>
    <link rel="stylesheet" crossorigin href="/assets/index-DVQnNrSt.css">
  </head>
  <body>
    <!-- SEO content for crawlers - hidden from users with inline style -->
    <div id="static-content" style="position: absolute; left: -10000px; width: 1px; height: 1px; overflow: hidden;">
      <h1>ThottoPilot - AI-Powered Content Creation Platform</h1>
      <p>Create engaging content with AI, protect your images from reverse searches, and optimize your content strategy for maximum engagement.</p>
      <h2>Features</h2>
      <ul>
        <li>AI Caption Generation</li>
        <li>Image Protection</li>
        <li>Multi-Platform Posting</li>
        <li>Analytics Dashboard</li>
      </ul>
    </div>

    <div id="root"></div>
    
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</html>
fix-type-errors.cjs
+1
-2

#!/usr/bin/env node

/* eslint-env node */
const fs = require('fs');
const path = require('path');

// Helper to fix common TypeScript errors
function fixTypeErrors(filePath) {
  if (!fs.existsSync(filePath)) return;
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Fix error.message patterns
  content = content.replace(/(\s)error\.message/g, '$1(error as Error).message');
  content = content.replace(/(\s)error\.stack/g, '$1(error as Error).stack');
  
  // Fix implicit any in map functions
  content = content.replace(/\.map\(\(([^,)]+),\s*([^)]+)\)/g, '.map(($1: any, $2: number)');
  
  // Fix implicit any in function parameters
  content = content.replace(/function\s+(\w+)\(([^:)]+)\)/g, 'function $1($2: any)');
  
  fs.writeFileSync(filePath, content);
}

// Process all TypeScript files
const files = process.argv.slice(2);
files.forEach(fixTypeErrors);

console.log('✅ Type errors fixed in', files.length, 'files');
console.log('✅ Type errors fixed in', files.length, 'files');
package-lock.json
+10
-0

@@ -161,50 +161,51 @@
        "wouter": "^3.3.5",
        "ws": "^8.18.3",
        "zod": "^3.24.2",
        "zod-validation-error": "^3.4.0"
      },
      "devDependencies": {
        "@replit/vite-plugin-cartographer": "^0.2.8",
        "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
        "@tailwindcss/typography": "^0.5.15",
        "@tailwindcss/vite": "^4.1.3",
        "@types/connect-pg-simple": "^7.0.3",
        "@types/express": "4.17.21",
        "@types/express-session": "^1.18.2",
        "@types/node": "^20.19.0",
        "@types/passport": "^1.0.17",
        "@types/passport-local": "^1.0.38",
        "@types/react": "^18.3.11",
        "@types/react-dom": "^18.3.1",
        "@types/ws": "^8.5.13",
        "@vitejs/plugin-react": "^4.3.2",
        "autoprefixer": "^10.4.20",
        "drizzle-kit": "^0.31.4",
        "esbuild": "^0.25.0",
        "eslint-formatter-compact": "^8.40.0",
        "postcss": "^8.4.47",
        "rollup-plugin-visualizer": "file:vendor/rollup-plugin-visualizer",
        "tailwindcss": "^3.4.17",
        "typescript": "5.6.3",
        "vite": "^7.1.5"
      },
      "optionalDependencies": {
        "bufferutil": "^4.0.8"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@anthropic-ai/sdk": {
      "version": "0.37.0",
      "license": "MIT",
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
@@ -14235,50 +14236,54 @@
      "dependencies": {
        "@types/request": "^2.48.8",
        "extend": "^3.0.2",
        "teeny-request": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rfdc": {
      "version": "1.4.1",
      "license": "MIT"
    },
    "node_modules/rndm": {
      "version": "1.2.0",
      "license": "MIT"
    },
    "node_modules/rollup-plugin-visualizer": {
      "resolved": "vendor/rollup-plugin-visualizer",
      "link": true
    },
    "node_modules/rollup": {
      "version": "4.50.2",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.50.2",
        "@rollup/rollup-android-arm64": "4.50.2",
        "@rollup/rollup-darwin-arm64": "4.50.2",
        "@rollup/rollup-darwin-x64": "4.50.2",
        "@rollup/rollup-freebsd-arm64": "4.50.2",
        "@rollup/rollup-freebsd-x64": "4.50.2",
        "@rollup/rollup-linux-arm-gnueabihf": "4.50.2",
        "@rollup/rollup-linux-arm-musleabihf": "4.50.2",
        "@rollup/rollup-linux-arm64-gnu": "4.50.2",
        "@rollup/rollup-linux-arm64-musl": "4.50.2",
        "@rollup/rollup-linux-loong64-gnu": "4.50.2",
@@ -17782,28 +17787,33 @@
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zod": {
      "version": "3.25.76",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    },
    "node_modules/zod-validation-error": {
      "version": "3.5.3",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      },
      "peerDependencies": {
        "zod": "^3.25.0 || ^4.0.0"
      }
    },
    "vendor/playwright-test": {
      "name": "@playwright/test",
      "version": "0.0.0-stub"
    },
    "vendor/rollup-plugin-visualizer": {
      "name": "rollup-plugin-visualizer",
      "version": "0.0.0-local",
      "license": "MIT"
    }
  }
}
package.json
+1
-0

@@ -173,37 +173,38 @@
    "wouter": "^3.3.5",
    "ws": "^8.18.3",
    "zod": "^3.24.2",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.2.8",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@tailwindcss/vite": "^4.1.3",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.2",
    "@types/node": "^20.19.0",
    "@types/passport": "^1.0.17",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.31.4",
    "esbuild": "^0.25.0",
    "eslint-formatter-compact": "^8.40.0",
    "postcss": "^8.4.47",
    "rollup-plugin-visualizer": "file:vendor/rollup-plugin-visualizer",
    "tailwindcss": "^3.4.17",
    "typescript": "5.6.3",
    "vite": "^7.1.5"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  },
  "imports": {
    "#shared/*": "./shared/*",
    "#server/*": "./server/*"
  }
}
server/caption/openaiFallback.ts
+0
-1

@@ -15,51 +15,50 @@ const CaptionItem = z.object({
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY || '' });

export interface FallbackParams {
  platform: string;
  voice: string;
  imageUrl?: string;
  theme?: string;
  context?: string;
  existingCaption?: string;
}

export async function openAICaptionFallback({
  platform,
  voice = "flirty_playful",
  imageUrl,
  existingCaption
}: {
  platform: "instagram" | "x" | "reddit" | "tiktok";
  voice?: string;
  imageUrl?: string;
  existingCaption?: string;
}): Promise<z.infer<typeof CaptionItem>> {
  // Analyze image if provided
  let imageAnalysis = '';
  let messages: any[] = [];

  if (imageUrl && openai) {
    try {
      console.log('OpenAI fallback: Analyzing image for accurate captions');

      if (imageUrl.startsWith('data:')) {
        // For data URLs, we can send directly to OpenAI vision
        messages = [
          {
            role: "system",
            content: `You are an expert social media caption writer. Analyze the image carefully and create engaging ${voice} content for ${platform} that directly relates to what you see.

Return ONLY a JSON object with this structure:
{
  "caption": "engaging caption text that describes what's actually in the image",
  "hashtags": ["#relevant", "#to", "#image"],
  "safety_level": "safe_for_work",
  "mood": "${voice.includes('flirty') ? 'flirty' : 'confident'}",
  "style": "authentic",
  "cta": "relevant call to action",
  "alt": "detailed description of what's actually in the image",
  "nsfw": false
}`
          },
tests/integration/content-generation.test.ts
+1
-1

@@ -130,51 +130,51 @@ describe('Content Generation Integration Tests', () => {
          user: { id: user.id, email: user.email || undefined, tier: user.tier },
          platform: req.body.platform,
          imageDescription: req.body.imageDescription,
          customPrompt: req.body.customPrompt,
          subreddit: req.body.subreddit,
          allowsPromotion: req.body.allowsPromotion || 'no',
          baseImageUrl: req.body.imageUrl
        });
        
        // Save to database
        const [generation] = await db.insert(contentGenerations).values({
          userId: user.id,
          platform: req.body.platform || 'reddit',
          style: 'default',
          theme: 'default',
          content: result.content,
          titles: result.titles,
          photoInstructions: result.photoInstructions,
          prompt: req.body.customPrompt || '',
          subreddit: req.body.subreddit || null,
          allowsPromotion: req.body.allowsPromotion === 'yes',
          generationType: 'ai'
        }).returning();
        
        // Handle special cases for testing
        let response: any = {
        const response: any = {
          ...result,
          platform: req.body.platform || result.platform,
          imageAnalyzed: !!req.body.imageDescription
        };
        
        // Add fallback indicators for testing
        if (req.body.templateId === 'missing_template') {
          response.fallbackUsed = true;
        }
        
        if (req.body.imageUrl?.endsWith('.bmp')) {
          response.imageError = 'unsupported_format';
          response.fallbackUsed = true;
        }
        
        // Cache the response
        cache.set(cacheKey, response);
        
        res.json(response);
      } catch (error) {
        const errorMessage = (error as Error).message;
        safeLog('error', 'Caption generation failed in test', { error: errorMessage });
        
        // Check if it's a database error
        if (errorMessage.includes('Failed query') || errorMessage.includes('database')) {
vendor/rollup-plugin-visualizer/index.js
New
+201
-0

import { brotliCompressSync, constants, gzipSync } from "node:zlib";

const defaultOptions = {
    filename: "bundle-report.html",
    gzipSize: true,
    brotliSize: true,
};

const { BROTLI_PARAM_QUALITY, BROTLI_DEFAULT_QUALITY } = constants;

const KB = 1024;
const MB = KB * 1024;
const GB = MB * 1024;

const formatBytes = (size) => {
    if (size <= 0) {
        return "0 B";
    }

    if (size < KB) {
        return `${size} B`;
    }

    if (size < MB) {
        return `${(size / KB).toFixed(2)} KB`;
    }

    if (size < GB) {
        return `${(size / MB).toFixed(2)} MB`;
    }

    return `${(size / GB).toFixed(2)} GB`;
};

const escapeHtml = (value) =>
    value
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#39;");

const normalizeFileName = (value) => {
    const normalized = value.replace(/\\/g, "/");
    return normalized.startsWith("/") ? normalized.slice(1) : normalized;
};

export const visualizer = (userOptions = {}) => {
    const options = { ...defaultOptions, ...userOptions };
    const fileName = normalizeFileName(
        options.filename.endsWith(".html") ? options.filename : `${options.filename}.html`,
    );

    return {
        name: "local-rollup-visualizer",
        generateBundle(_outputOptions, bundle) {
            const entries = Object.entries(bundle)
                .filter(([, output]) => output.type === "chunk")
                .map(([chunkName, chunk]) => {
                    const code = typeof chunk.code === "string" ? chunk.code : "";
                    const buffer = Buffer.from(code, "utf8");
                    const size = buffer.length;

                    const gzipSize = options.gzipSize ? gzipSync(buffer).length : undefined;
                    const brotliSize = options.brotliSize
                        ? brotliCompressSync(buffer, {
                              params: {
                                  [BROTLI_PARAM_QUALITY]: BROTLI_DEFAULT_QUALITY,
                              },
                          }).length
                        : undefined;

                    return {
                        chunkName,
                        size,
                        gzipSize,
                        brotliSize,
                    };
                })
                .sort((a, b) => b.size - a.size);

            const totalBytes = entries.reduce((sum, entry) => sum + entry.size, 0);

            const tableHeaders = ["Chunk", "Size"];
            if (options.gzipSize) {
                tableHeaders.push("Gzip");
            }

            if (options.brotliSize) {
                tableHeaders.push("Brotli");
            }

            const headerRow = tableHeaders.map((heading) => `<th>${heading}</th>`).join("");

            const tableRows = entries
                .map((entry) => {
                    const cells = [`<td>${escapeHtml(entry.chunkName)}</td>`, `<td>${formatBytes(entry.size)}</td>`];

                    if (options.gzipSize) {
                        cells.push(`<td>${entry.gzipSize ? formatBytes(entry.gzipSize) : "-"}</td>`);
                    }

                    if (options.brotliSize) {
                        cells.push(`<td>${entry.brotliSize ? formatBytes(entry.brotliSize) : "-"}</td>`);
                    }

                    return `<tr>${cells.join("")}</tr>`;
                })
                .join("\n");

            const html = `<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Bundle Size Report</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style>
            :root {
                color-scheme: light dark;
                font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
            }

            body {
                margin: 0 auto;
                padding: 2rem 1rem;
                max-width: 960px;
                line-height: 1.5;
                background: #0f172a;
                color: #f8fafc;
            }

            h1 {
                margin-bottom: 0.5rem;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 1.5rem;
                background: rgba(15, 23, 42, 0.6);
                backdrop-filter: blur(4px);
            }

            th,
            td {
                padding: 0.75rem 1rem;
                text-align: left;
            }

            th {
                font-weight: 600;
                border-bottom: 2px solid rgba(248, 250, 252, 0.2);
            }

            tr:nth-child(even) td {
                background: rgba(148, 163, 184, 0.08);
            }

            tr:hover td {
                background: rgba(14, 165, 233, 0.2);
            }

            caption {
                caption-side: top;
                text-align: left;
                font-weight: 600;
                margin-bottom: 0.25rem;
            }

            .summary {
                margin-top: 1rem;
                font-size: 0.95rem;
                color: rgba(248, 250, 252, 0.85);
            }
        </style>
    </head>
    <body>
        <h1>Bundle Size Report</h1>
        <p class="summary">Total JavaScript emitted: <strong>${formatBytes(totalBytes)}</strong>.</p>
        <table>
            <caption>Emitted chunks</caption>
            <thead>
                <tr>${headerRow}</tr>
            </thead>
            <tbody>
                ${tableRows}
            </tbody>
        </table>
    </body>
</html>`;

            this.emitFile({
                type: "asset",
                fileName,
                source: html,
            });
        },
    };
};

export default visualizer;
vendor/rollup-plugin-visualizer/package.json
New
+10
-0

{
  "name": "rollup-plugin-visualizer",
  "version": "0.0.0-local",
  "type": "module",
  "main": "index.js",
  "exports": {
    ".": "./index.js"
  },
  "license": "MIT"
}
vite.config.js
+86
-34

/* eslint-env node */
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import process from "node:process";

export default defineConfig({
    plugins: [
        react(),
        runtimeErrorOverlay(),
        ...(process.env.NODE_ENV !== "production" &&
            process.env.REPL_ID !== undefined
            ? [
                await import("@replit/vite-plugin-cartographer").then((m) => m.cartographer()),
            ]
            : []),
import { visualizer } from "rollup-plugin-visualizer";
const vendorManualChunks = {
    "vendor-react": ["react", "react-dom"],
    "vendor-stripe": ["@stripe/stripe-js", "@stripe/react-stripe-js"],
    "vendor-radix": [
        "@radix-ui/react-accordion",
        "@radix-ui/react-alert-dialog",
        "@radix-ui/react-aspect-ratio",
        "@radix-ui/react-avatar",
        "@radix-ui/react-checkbox",
        "@radix-ui/react-collapsible",
        "@radix-ui/react-context-menu",
        "@radix-ui/react-dialog",
        "@radix-ui/react-dropdown-menu",
        "@radix-ui/react-hover-card",
        "@radix-ui/react-label",
        "@radix-ui/react-menubar",
        "@radix-ui/react-navigation-menu",
        "@radix-ui/react-popover",
        "@radix-ui/react-progress",
        "@radix-ui/react-radio-group",
        "@radix-ui/react-scroll-area",
        "@radix-ui/react-select",
        "@radix-ui/react-separator",
        "@radix-ui/react-slider",
        "@radix-ui/react-slot",
        "@radix-ui/react-switch",
        "@radix-ui/react-tabs",
        "@radix-ui/react-toast",
        "@radix-ui/react-toggle",
        "@radix-ui/react-toggle-group",
        "@radix-ui/react-tooltip",
    ],
    resolve: {
        alias: {
            "@": path.resolve(import.meta.dirname, "client", "src"),
            "@shared": path.resolve(import.meta.dirname, "shared"),
            "@assets": path.resolve(import.meta.dirname, "attached_assets"),
};

export default defineConfig(async ({ command, mode }) => {
    const isBuild = command === "build";
    const isProduction = mode === "production";

    const plugins = [react(), runtimeErrorOverlay()];

    if (!isProduction && process.env.REPL_ID !== undefined) {
        const { cartographer } = await import("@replit/vite-plugin-cartographer");
        plugins.push(cartographer());
    }

    if (isBuild) {
        plugins.push(
            visualizer({
                filename: "bundle-report.html",
                gzipSize: true,
                brotliSize: true,
            }),
        );
    }

    return {
        plugins,
        resolve: {
            alias: {
                "@": path.resolve(import.meta.dirname, "client", "src"),
                "@shared": path.resolve(import.meta.dirname, "shared"),
                "@assets": path.resolve(import.meta.dirname, "attached_assets"),
            },
        },
    },
    root: "client",
    build: {
        // place client build alongside server build
        outDir: "dist",
        emptyOutDir: true,
    },
    server: {
        fs: {
            strict: true,
            deny: ["**/.*"],
        root: "client",
        build: {
            // place client build alongside server build
            outDir: "dist",
            emptyOutDir: true,
            rollupOptions: {
                output: {
                    manualChunks: vendorManualChunks,
                },
            },
        },
        proxy: {
            "/api": {
                target: "http://localhost:5000",
                changeOrigin: true,
                secure: false,
        server: {
            fs: {
                strict: true,
                deny: ["**/.*"],
            },
            proxy: {
                "/api": {
                    target: "http://localhost:5000",
                    changeOrigin: true,
                    secure: false,
                },
            },
        },
    },
});
    };
});
