diff --git a/tests/theme-system.test.ts b/tests/theme-system.test.ts
index c20a07f33472b808dd0d61ecbf5dd1c85a2dd9ae..328c94a32b56e22a0ba6f2227f5332436305da51 100644
--- a/tests/theme-system.test.ts
+++ b/tests/theme-system.test.ts
@@ -1,284 +1,100 @@
 import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
-import { validateThemeColors, getContrastRatio, hslToRgb, meetsWCAGAA } from '../client/src/lib/theme-utils';
-
-/**
- * Theme System Tests
- * Ensures WCAG AA compliance and prevents accessibility regressions
- */
-
-describe('Theme System', () => {
-  let mockDocumentElement: unknown;
+import {
+  getAccessibleTextColor,
+  getContrastRatio,
+  hslToRgb,
+  meetsWCAGAA,
+  setCSSCustomProperty,
+  validateThemeColors,
+} from '../client/src/lib/theme-utils';
+
+describe('theme system accessibility', () => {
+  const themeVariables = new Map<string, string>();
+  const setPropertySpy = vi.fn();
 
   beforeEach(() => {
-    // Mock document element for testing
-    mockDocumentElement = {
+    themeVariables.clear();
+    themeVariables.set('--background', '0 0 0');
+    themeVariables.set('--foreground', '0 0 100');
+    themeVariables.set('--card', '0 0 10');
+    themeVariables.set('--card-foreground', '0 0 100');
+    themeVariables.set('--primary', '260 80 35');
+    themeVariables.set('--primary-foreground', '0 0 100');
+    themeVariables.set('--secondary', '210 80 25');
+    themeVariables.set('--secondary-foreground', '0 0 100');
+    themeVariables.set('--muted', '180 10 35');
+    themeVariables.set('--muted-foreground', '0 0 95');
+
+    const mockDocumentElement = {
       style: {
-        setProperty: vi.fn(),
+        setProperty: setPropertySpy,
       },
+    } as unknown as HTMLElement;
+
+    const computedStyle: Partial<CSSStyleDeclaration> = {
+      getPropertyValue: (property: string) => themeVariables.get(property) ?? '',
     };
-    
-    // Mock getComputedStyle
-    global.getComputedStyle = vi.fn(() => ({
-      getPropertyValue: (property: string) => {
-        const mockValues: Record<string, string> = {
-          '--background': '330 40 98',
-          '--foreground': '320 30 10',
-          '--card': '330 50 97',
-          '--card-foreground': '320 30 15',
-          '--primary': '271 82 58',
-          '--primary-foreground': '0 0 100',
-          '--muted': '325 20 88',
-          '--muted-foreground': '325 25 25',
-        };
-        return mockValues[property] || '';
-      },
-      // Add required CSSStyleDeclaration properties
-      length: 0,
-      cssText: '',
-      parentRule: null,
-      cssFloat: '',
-      getPropertyPriority: () => '',
-      removeProperty: () => '',
-      setProperty: () => {},
-      item: () => '',
-      [Symbol.iterator]: function* () {}
-    })) as unknown as typeof window.getComputedStyle;
-    
-    Object.defineProperty(global, 'document', {
-      value: {
-        documentElement: mockDocumentElement,
-      },
-      writable: true,
-      configurable: true,
-    });
 
-    Object.defineProperty(global, 'window', {
-      value: {},
-      writable: true,
-      configurable: true,
-    });
+    vi.stubGlobal('document', {
+      documentElement: mockDocumentElement,
+    } as unknown as Document);
+
+    vi.stubGlobal(
+      'getComputedStyle',
+      vi.fn(() => computedStyle as CSSStyleDeclaration),
+    );
   });
 
   afterEach(() => {
-    vi.clearAllMocks();
-    Reflect.deleteProperty(global as Record<string, unknown>, 'window');
-    Reflect.deleteProperty(global as Record<string, unknown>, 'document');
+    vi.restoreAllMocks();
+    vi.unstubAllGlobals();
+    setPropertySpy.mockClear();
   });
 
-  describe('Color Contrast Validation', () => {
-    it('should convert HSL to RGB correctly', () => {
-      // Test known HSL to RGB conversions
-      expect(hslToRgb(0, 100, 50)).toEqual([255, 0, 0]); // Red
-      expect(hslToRgb(120, 100, 50)).toEqual([0, 255, 0]); // Green
-      expect(hslToRgb(240, 100, 50)).toEqual([0, 0, 255]); // Blue
-      expect(hslToRgb(0, 0, 0)).toEqual([0, 0, 0]); // Black
-      expect(hslToRgb(0, 0, 100)).toEqual([255, 255, 255]); // White
-    });
-
-    it('should calculate contrast ratios correctly', () => {
-      // Black on white should have maximum contrast (21:1)
-      const blackOnWhite = getContrastRatio([0, 0, 0], [255, 255, 255]);
-      expect(blackOnWhite).toBeCloseTo(21, 1);
-
-      // White on black should have same contrast
-      const whiteOnBlack = getContrastRatio([255, 255, 255], [0, 0, 0]);
-      expect(whiteOnBlack).toBeCloseTo(21, 1);
-
-      // Same colors should have 1:1 contrast
-      const sameColor = getContrastRatio([128, 128, 128], [128, 128, 128]);
-      expect(sameColor).toBeCloseTo(1, 1);
-    });
-
-    it('should validate WCAG AA compliance', () => {
-      // High contrast combinations should pass
-      expect(meetsWCAGAA([0, 0, 0], [255, 255, 255])).toBe(true);
-      expect(meetsWCAGAA([255, 255, 255], [0, 0, 0])).toBe(true);
-
-      // Low contrast combinations should fail
-      expect(meetsWCAGAA([200, 200, 200], [255, 255, 255])).toBe(false);
-      expect(meetsWCAGAA([100, 100, 100], [128, 128, 128])).toBe(false);
-    });
+  it('converts HSL values to RGB triplets', () => {
+    expect(hslToRgb(0, 0, 0)).toEqual([0, 0, 0]);
+    expect(hslToRgb(0, 0, 100)).toEqual([255, 255, 255]);
+    expect(hslToRgb(120, 60, 50)).toEqual([102, 204, 102]);
   });
 
-  describe('Theme Token Validation', () => {
-    it('should validate all theme color combinations', () => {
-      const results = validateThemeColors();
-      
-      // All critical combinations should pass WCAG AA
-      expect(results['background-foreground']).toBe(true);
-      expect(results['card-foreground']).toBe(true);
-      expect(results['primary-foreground']).toBe(true);
-      expect(results['muted-foreground']).toBe(true);
-    });
+  it('computes sufficient contrast ratios for accessible color pairs', () => {
+    const darkBackground = hslToRgb(0, 0, 0);
+    const lightForeground = hslToRgb(0, 0, 100);
 
-    it('should handle missing CSS variables gracefully', () => {
-      global.getComputedStyle = vi.fn(() => ({
-        getPropertyValue: () => '', // Return empty for missing variables
-        // Add required CSSStyleDeclaration properties
-        length: 0,
-        cssText: '',
-        parentRule: null,
-        cssFloat: '',
-        getPropertyPriority: () => '',
-        removeProperty: () => '',
-        setProperty: () => {},
-        item: () => '',
-        [Symbol.iterator]: function* () {}
-      })) as unknown as typeof window.getComputedStyle;
+    const contrastRatio = getContrastRatio(lightForeground, darkBackground);
 
-      const results = validateThemeColors();
-      
-      // Should not throw and should return false for missing variables
-      expect(typeof results).toBe('object');
-      Object.values(results).forEach(result => {
-        expect(typeof result).toBe('boolean');
-      });
-    });
+    expect(contrastRatio).toBeGreaterThanOrEqual(7);
+    expect(meetsWCAGAA(lightForeground, darkBackground)).toBe(true);
   });
 
-  describe('Theme Colors WCAG AA Compliance', () => {
-    const testColorCombinations = [
-      // Light mode combinations
-      { bg: [253, 242, 248], fg: [39, 16, 32], name: 'light-background-foreground' },
-      { bg: [251, 229, 236], fg: [49, 16, 32], name: 'light-card-foreground' },
-      { bg: [151, 60, 236], fg: [255, 255, 255], name: 'light-primary-foreground' },
-      { bg: [230, 185, 212], fg: [64, 39, 64], name: 'light-muted-foreground' },
-      
-      // Dark mode combinations (approximate RGB values)
-      { bg: [25, 15, 20], fg: [242, 229, 242], name: 'dark-background-foreground' },
-      { bg: [31, 20, 25], fg: [242, 229, 242], name: 'dark-card-foreground' },
-      { bg: [244, 114, 182], fg: [25, 15, 20], name: 'dark-primary-foreground' },
-      { bg: [41, 31, 36], fg: [191, 178, 191], name: 'dark-muted-foreground' },
-    ];
+  it('validates that configured theme tokens meet WCAG AA', () => {
+    const results = validateThemeColors();
 
-    testColorCombinations.forEach(({ bg, fg, name }) => {
-      it(`should meet WCAG AA for ${name}`, () => {
-        const contrastRatio = getContrastRatio(
-          fg as [number, number, number],
-          bg as [number, number, number]
-        );
-        expect(contrastRatio).toBeGreaterThanOrEqual(4.5);
-      });
+    expect(results).toMatchObject({
+      'background-foreground': true,
+      'card-foreground': true,
+      'primary-foreground': true,
+      'secondary-foreground': true,
+      'muted-foreground': true,
     });
   });
 
-  describe('Anti-Regression Tests', () => {
-    it('should prevent hover-only visibility patterns', () => {
-      // This would be integrated with ESLint rules in practice
-      const problematicClasses = [
-        'opacity-0 hover:opacity-100',
-        'invisible hover:visible',
-        'text-transparent hover:text-gray-900',
-      ];
-
-      // In a real implementation, this would check against the ESLint rules
-      problematicClasses.forEach(className => {
-        expect(className).toMatch(/(opacity-0.*hover:opacity|invisible.*hover:visible|text-transparent.*hover:text)/);
-      });
-    });
-
-    it('should enforce theme token usage', () => {
-      const approvedClasses = [
-        'text-foreground',
-        'text-muted-foreground',
-        'text-readable',
-        'text-readable-muted',
-        'bg-background',
-        'bg-card',
-        'border-border',
-      ];
-
-      const problematicClasses = [
-        'text-gray-500',
-        'text-slate-400',
-        'bg-gray-100',
-        'border-gray-300',
-      ];
+  it('marks combinations with missing tokens as inaccessible', () => {
+    themeVariables.delete('--muted-foreground');
 
-      approvedClasses.forEach(className => {
-        expect(className).toMatch(/(text-foreground|text-muted-foreground|text-readable|bg-background|bg-card|border-border)/);
-      });
+    const results = validateThemeColors();
 
-      problematicClasses.forEach(className => {
-        expect(className).toMatch(/(text-gray|text-slate|bg-gray|border-gray)/);
-      });
-    });
+    expect(results['muted-foreground']).toBe(false);
   });
 
-  describe('Accessibility Features', () => {
-    it('should support high contrast mode', () => {
-      // Test that high contrast mode preferences are respected
-      Object.defineProperty(window, 'matchMedia', {
-        writable: true,
-        value: vi.fn().mockImplementation(query => ({
-          matches: query === '(prefers-contrast: high)',
-          media: query,
-          onchange: null,
-          addListener: vi.fn(),
-          removeListener: vi.fn(),
-          addEventListener: vi.fn(),
-          removeEventListener: vi.fn(),
-          dispatchEvent: vi.fn(),
-        })),
-      });
-
-      const highContrastMedia = window.matchMedia('(prefers-contrast: high)');
-      expect(highContrastMedia.matches).toBe(true);
-    });
-
-    it('should support reduced motion preferences', () => {
-      Object.defineProperty(window, 'matchMedia', {
-        writable: true,
-        value: vi.fn().mockImplementation(query => ({
-          matches: query === '(prefers-reduced-motion: reduce)',
-          media: query,
-          onchange: null,
-          addListener: vi.fn(),
-          removeListener: vi.fn(),
-          addEventListener: vi.fn(),
-          removeEventListener: vi.fn(),
-          dispatchEvent: vi.fn(),
-        })),
-      });
+  it('sets CSS custom properties on the document element', () => {
+    setCSSCustomProperty('--background', '0 0 0');
 
-      const reducedMotionMedia = window.matchMedia('(prefers-reduced-motion: reduce)');
-      expect(reducedMotionMedia.matches).toBe(true);
-    });
+    expect(setPropertySpy).toHaveBeenCalledWith('--background', '0 0 0');
   });
 
-  describe('Theme Persistence', () => {
-    beforeEach(() => {
-      // Mock localStorage
-      global.localStorage = {
-        getItem: vi.fn(),
-        setItem: vi.fn(),
-        removeItem: vi.fn(),
-        clear: vi.fn(),
-        length: 0,
-        key: () => null
-      } as Storage;
-    });
-
-    it('should save theme preference to localStorage', () => {
-      const mockSetItem = localStorage.setItem as unknown as ReturnType<typeof vi.fn>;
-      
-      // Simulate theme change
-      const storageKey = 'thottopilot-ui-theme';
-      const theme = 'dark';
-      
-      localStorage.setItem(storageKey, theme);
-      
-      expect(mockSetItem).toHaveBeenCalledWith(storageKey, theme);
-    });
-
-    it('should load theme preference from localStorage', () => {
-      const mockGetItem = localStorage.getItem as unknown as ReturnType<typeof vi.fn>;
-      mockGetItem.mockReturnValue('dark');
-      
-      const theme = localStorage.getItem('thottopilot-ui-theme');
-      
-      expect(theme).toBe('dark');
-      expect(mockGetItem).toHaveBeenCalledWith('thottopilot-ui-theme');
-    });
+  it('selects accessible text colors based on background luminance', () => {
+    expect(getAccessibleTextColor([10, 10, 10])).toBe('light');
+    expect(getAccessibleTextColor([240, 240, 240])).toBe('dark');
   });
-});
+});
