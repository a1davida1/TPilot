 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/__tests__/admin-communities-panel.test.tsx b/client/src/components/__tests__/admin-communities-panel.test.tsx
index a0a1f75884441232ee25cd06e99f29aa4b127d5c..b50a89a97d68d4f0e6dc4337b02a7aeb662e2525 100644
--- a/client/src/components/__tests__/admin-communities-panel.test.tsx
+++ b/client/src/components/__tests__/admin-communities-panel.test.tsx
@@ -1,31 +1,37 @@
 import React from 'react';
 import { act } from 'react';
 import { createRoot } from 'react-dom/client';
 import { describe, expect, it, beforeEach, afterEach, vi } from 'vitest';
 import { AdminCommunitiesPanel } from '../admin/admin-communities-panel';
-import type { AdminCommunity, PromotionPolicy, GrowthTrend, ActivityLevel, CompetitionLevel } from '@/hooks/use-admin-communities';
+import type {
+  AdminCommunity,
+  PromotionPolicy,
+  GrowthTrend,
+  ActivityLevel,
+  CompetitionLevel
+} from '@/hooks/use-admin-communities';
 import type { RedditCommunitySellingPolicy } from '@shared/schema';
 
 // Mock dependencies
 const mockUseQuery = vi.fn();
 const mockUseMutation = vi.fn();
 const mockInvalidateQueries = vi.fn();
 const mockSetQueryData = vi.fn();
 const mockMutate = vi.fn();
 const mockMutateAsync = vi.fn();
 const mockToast = vi.fn();
 
 vi.mock('@tanstack/react-query', async () => {
   const actual = await vi.importActual<typeof import('@tanstack/react-query')>(
     '@tanstack/react-query'
   );
 
   return {
     ...actual,
     useQuery: (options: any) => mockUseQuery(options),
     useMutation: () => mockUseMutation(),
     useQueryClient: () => ({
       invalidateQueries: mockInvalidateQueries,
       setQueryData: mockSetQueryData,
     }),
   };
diff --git a/client/src/components/__tests__/admin-communities-panel.test.tsx b/client/src/components/__tests__/admin-communities-panel.test.tsx
index a0a1f75884441232ee25cd06e99f29aa4b127d5c..b50a89a97d68d4f0e6dc4337b02a7aeb662e2525 100644
--- a/client/src/components/__tests__/admin-communities-panel.test.tsx
+++ b/client/src/components/__tests__/admin-communities-panel.test.tsx
@@ -61,84 +67,129 @@ const globalScope = globalThis as typeof globalThis & {
 
 globalScope.React = React;
 globalScope.IS_REACT_ACT_ENVIRONMENT = true;
 
 if (!(globalThis as { ResizeObserver?: unknown }).ResizeObserver) {
   class MockResizeObserver {
     observe() {
       return undefined;
     }
     unobserve() {
       return undefined;
     }
     disconnect() {
       return undefined;
     }
   }
   vi.stubGlobal('ResizeObserver', MockResizeObserver);
 }
 
 if (!(HTMLElement.prototype as { scrollIntoView?: () => void }).scrollIntoView) {
   HTMLElement.prototype.scrollIntoView = () => undefined;
 }
 
 const flushPromises = () => new Promise<void>((resolve) => setTimeout(resolve, 0));
 
+type CommunityRulesShape = NonNullable<AdminCommunity['rules']>;
+type EligibilityRulesShape = NonNullable<CommunityRulesShape['eligibility']>;
+type ContentRulesShape = NonNullable<CommunityRulesShape['content']>;
+type PostingRulesShape = NonNullable<CommunityRulesShape['posting']>;
+
+const createStructuredRules = (
+  sellingPolicy: RedditCommunitySellingPolicy,
+  overrides?: {
+    eligibility?: Partial<EligibilityRulesShape>;
+    content?: Partial<ContentRulesShape>;
+    posting?: Partial<PostingRulesShape>;
+    notes?: CommunityRulesShape['notes'];
+  }
+): CommunityRulesShape => {
+  const eligibility: EligibilityRulesShape = {
+    minKarma: 100,
+    minAccountAgeDays: 30,
+    verificationRequired: false,
+    requiresApproval: false,
+    ...(overrides?.eligibility ?? {}),
+  };
+
+  const content: ContentRulesShape = {
+    sellingPolicy,
+    watermarksAllowed: true,
+    promotionalLinks: 'yes',
+    requiresOriginalContent: false,
+    nsfwRequired: false,
+    titleGuidelines: [],
+    contentGuidelines: [],
+    linkRestrictions: [],
+    bannedContent: [],
+    formattingRequirements: [],
+    ...(overrides?.content ?? {}),
+  };
+
+  const posting: PostingRulesShape = {
+    maxPostsPerDay: null,
+    cooldownHours: null,
+    ...(overrides?.posting ?? {}),
+  };
+
+  return {
+    eligibility,
+    content,
+    posting,
+    notes: overrides?.notes ?? null,
+  };
+};
+
 describe('AdminCommunitiesPanel Component', () => {
   beforeEach(() => {
     vi.clearAllMocks();
     mockUseMutation.mockReturnValue({
       mutate: mockMutate,
       mutateAsync: mockMutateAsync,
       isPending: false,
       reset: vi.fn()
     });
   });
 
   afterEach(() => {
     document.body.innerHTML = '';
   });
 
   describe('Selling Policy Enum Variations', () => {
-    const createCommunityWithSellingPolicy = (sellingPolicy: RedditCommunitySellingPolicy, promotionPolicy: PromotionPolicy = 'limited'): AdminCommunity => ({
+    const createCommunityWithSellingPolicy = (
+      sellingPolicy: RedditCommunitySellingPolicy,
+      promotionPolicy: PromotionPolicy = 'limited'
+    ): AdminCommunity => ({
       id: `community-${sellingPolicy}`,
       name: `community${sellingPolicy}`,
       displayName: `Community ${sellingPolicy}`,
       category: 'general',
       members: 1000,
       engagementRate: 50,
       verificationRequired: false,
       promotionAllowed: promotionPolicy,
-      rules: {
-        sellingAllowed: sellingPolicy,
-        minKarma: 100,
-        minAccountAge: 30,
-        watermarksAllowed: true,
-        titleRules: [],
-        contentRules: [],
-        linkRestrictions: []
-      },
+      rules: createStructuredRules(sellingPolicy),
       growthTrend: 'stable',
       modActivity: 'medium',
       competitionLevel: 'medium'
     });
 
     it('should display allowed selling policy badge correctly', async () => {
       const community = createCommunityWithSellingPolicy('allowed', 'yes');
       mockUseQuery.mockReturnValue({
         data: [community],
         isLoading: false,
         error: null
       });
 
       const container = document.createElement('div');
       document.body.appendChild(container);
       const root = createRoot(container);
 
       await act(async () => {
         root.render(<AdminCommunitiesPanel canManage={true} />);
       });
 
       await act(async () => {
         await flushPromises();
       });
 
diff --git a/client/src/components/__tests__/admin-communities-panel.test.tsx b/client/src/components/__tests__/admin-communities-panel.test.tsx
index a0a1f75884441232ee25cd06e99f29aa4b127d5c..b50a89a97d68d4f0e6dc4337b02a7aeb662e2525 100644
--- a/client/src/components/__tests__/admin-communities-panel.test.tsx
+++ b/client/src/components/__tests__/admin-communities-panel.test.tsx
@@ -232,60 +283,63 @@ describe('AdminCommunitiesPanel Component', () => {
         await flushPromises();
       });
 
       const promotionBadge = container.querySelector('[data-testid="row-community-community-unknown"]');
       expect(promotionBadge).toBeTruthy();
       expect(promotionBadge?.textContent).toContain('unknown');
 
       await act(async () => {
         root.unmount();
       });
       container.remove();
     });
   });
 
   describe('Rule Summary Display', () => {
     it('should display comprehensive rule summary with selling policy', async () => {
       const community: AdminCommunity = {
         id: 'detailed-rules',
         name: 'detailedrules',
         displayName: 'Detailed Rules Community',
         category: 'photography',
         members: 2500,
         engagementRate: 65,
         verificationRequired: true,
         promotionAllowed: 'limited',
-        rules: {
-          sellingAllowed: 'limited',
-          minKarma: 500,
-          minAccountAge: 90,
-          watermarksAllowed: false,
-          verificationRequired: true,
-          titleRules: ['Clear descriptive titles', 'No clickbait'],
-          contentRules: ['High quality images only', 'OC preferred'],
-          linkRestrictions: ['No direct sales links', 'Portfolio links OK']
-        },
+        rules: createStructuredRules('limited', {
+          eligibility: {
+            minKarma: 500,
+            minAccountAgeDays: 90,
+            verificationRequired: true,
+          },
+          content: {
+            watermarksAllowed: false,
+            titleGuidelines: ['Clear descriptive titles', 'No clickbait'],
+            contentGuidelines: ['High quality images only', 'OC preferred'],
+            linkRestrictions: ['No direct sales links', 'Portfolio links OK'],
+          },
+        }),
         growthTrend: 'up',
         modActivity: 'high',
         competitionLevel: 'medium'
       };
 
       mockUseQuery.mockReturnValue({
         data: [community],
         isLoading: false,
         error: null
       });
 
       const container = document.createElement('div');
       document.body.appendChild(container);
       const root = createRoot(container);
 
       await act(async () => {
         root.render(<AdminCommunitiesPanel canManage={true} />);
       });
 
       await act(async () => {
         await flushPromises();
       });
 
       // Check for rule summary elements
       const rulesSummary = container.querySelector('[data-testid="row-community-detailed-rules"]');
diff --git a/client/src/components/__tests__/admin-communities-panel.test.tsx b/client/src/components/__tests__/admin-communities-panel.test.tsx
index a0a1f75884441232ee25cd06e99f29aa4b127d5c..b50a89a97d68d4f0e6dc4337b02a7aeb662e2525 100644
--- a/client/src/components/__tests__/admin-communities-panel.test.tsx
+++ b/client/src/components/__tests__/admin-communities-panel.test.tsx
@@ -406,59 +460,51 @@ describe('AdminCommunitiesPanel Component', () => {
       const categorySelect = container.querySelector('[data-testid="select-category"]');
       const promotionSelect = container.querySelector('[data-testid="select-promotion"]');
       const verificationSelect = container.querySelector('[data-testid="select-verification"]');
       
       expect(categorySelect).toBeTruthy();
       expect(promotionSelect).toBeTruthy();
       expect(verificationSelect).toBeTruthy();
 
       await act(async () => {
         root.unmount();
       });
       container.remove();
     });
   });
 
   describe('Growth Trend Enum Display and Handling', () => {
     const createCommunityWithGrowthTrend = (growthTrend: GrowthTrend): AdminCommunity => ({
       id: `trend-${growthTrend}`,
       name: `trend${growthTrend}`,
       displayName: `Trend ${growthTrend} Community`,
       category: 'general',
       members: 1000,
       engagementRate: 50,
       verificationRequired: false,
       promotionAllowed: 'limited',
-      rules: {
-        sellingAllowed: 'allowed',
-        minKarma: 100,
-        minAccountAge: 30,
-        watermarksAllowed: true,
-        titleRules: [],
-        contentRules: [],
-        linkRestrictions: []
-      },
+      rules: createStructuredRules('allowed'),
       growthTrend,
       modActivity: 'medium',
       competitionLevel: 'medium'
     });
 
     it('should handle up growth trend', async () => {
       const community = createCommunityWithGrowthTrend('up');
       mockUseQuery.mockReturnValue({
         data: [community],
         isLoading: false,
         error: null
       });
 
       const container = document.createElement('div');
       document.body.appendChild(container);
       const root = createRoot(container);
 
       await act(async () => {
         root.render(<AdminCommunitiesPanel canManage={true} />);
       });
 
       await act(async () => {
         await flushPromises();
       });
 
 
EOF
)