ðŸ”§ Fix #1: Add Reddit route to your app routerFile: client/src/main.tsx (or wherever your routes are defined)Add this route:typescriptimport RedditPostingPage from '@/pages/reddit-posting';

// Add this route
<Route path="/reddit" component={RedditPostingPage} />ðŸ”§ Fix #2: Update Modern Dashboard navigationIn client/src/components/modern-dashboard.tsx, update the navigation items to include Reddit (around line 85):typescriptconst navigationItems = [
  { id: "dashboard", label: "Dashboard", icon: <Home className="h-5 w-5" />, section: "main" },
  { id: "reddit", label: "Reddit Hub", icon: <FaReddit className="h-5 w-5" />, badge: "NEW", section: "create" }, // ADD THIS
  { id: "generate", label: "Content Creator", icon: <Brain className="h-5 w-5" />, badge: "AI", section: "create" },
  // ... rest of items
];Then handle the navigation click (around line 190):typescriptonClick={() => {
  if (item.id === 'reddit') {
    window.location.href = '/reddit';
  } else {
    setActiveSection(item.id);
  }
}}ðŸ”§ Fix #3: Complete the Backend Reddit OAuthUpdate your server/auth.ts Reddit callback to store Reddit tokens properly:typescriptapp.get('/api/auth/reddit/callback', async (req: unknown, res) => {
  try {
    const { code, error, state } = req.query;
    
    if (error) {
      return res.redirect(`/dashboard?error=${error}`);
    }
    
    if (!code) {
      return res.redirect('/dashboard?error=no-code');
    }

    // Exchange code for access token
    const tokenResponse = await fetch('https://www.reddit.com/api/v1/access_token', {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${Buffer.from(`${process.env.REDDIT_CLIENT_ID}:${process.env.REDDIT_CLIENT_SECRET}`).toString('base64')}`,
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'ThottoPilot/1.0'
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code as string,
        redirect_uri: 'https://thottopilot.com/api/auth/reddit/callback'
      })
    });

    const tokenData = await tokenResponse.json();
    
    if (!tokenData.access_token) {
      console.error('No access token received:', tokenData);
      return res.redirect('/dashboard?error=token-failed');
    }

    // Get Reddit user info
    const userResponse = await fetch('https://oauth.reddit.com/api/v1/me', {
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'User-Agent': 'ThottoPilot/1.0'
      }
    });

    const redditUser = await userResponse.json();
    
    // Get current logged-in user from session or JWT
    const currentUserId = req.session?.userId || req.user?.id;
    
    if (currentUserId) {
      // Update existing user with Reddit connection
      await storage.updateUser(currentUserId, {
        redditUsername: redditUser.name,
        redditAccessToken: tokenData.access_token,
        redditRefreshToken: tokenData.refresh_token || null,
        redditId: redditUser.id
      });
      
      res.redirect('/reddit?connected=true');
    } else {
      // Create new user or find by Reddit username
      let user = await storage.getUserByUsername(redditUser.name);
      
      if (!user) {
        user = await storage.createUser({
          email: `${redditUser.name}@reddit.local`,
          username: redditUser.name,
          password: crypto.randomBytes(32).toString('hex'),
          tier: 'free',
          emailVerified: true,
          redditUsername: redditUser.name,
          redditAccessToken: tokenData.access_token,
          redditRefreshToken: tokenData.refresh_token || null,
          redditId: redditUser.id
        });
      }
      
      // Create session
      req.session.userId = user.id;
      req.session.user = user;
      req.session.save(() => {
        res.redirect('/reddit?connected=true');
      });
    }
    
  } catch (error) {
    console.error('Reddit OAuth callback error:', error);
    res.redirect('/dashboard?error=oauth-failed');
  }
});ðŸ”§ Fix #4: Add Reddit API endpointsCreate server/routes/reddit.ts:typescriptimport { Router } from 'express';
import { authenticateToken } from '../middleware/auth.js';
import { storage } from '../storage.js';

const router = Router();

// Get Reddit accounts
router.get('/accounts', authenticateToken, async (req: unknown, res) => {
  try {
    const user = await storage.getUser(req.user.id);
    
    if (user?.redditUsername) {
      res.json([{
        id: 1,
        username: user.redditUsername,
        isActive: true,
        connectedAt: user.createdAt,
        karma: 1000, // You'd fetch this from Reddit API
        verified: true
      }]);
    } else {
      res.json([]);
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to get accounts' });
  }
});

// Test Reddit connection
router.post('/test', authenticateToken, async (req: unknown, res) => {
  try {
    const user = await storage.getUser(req.user.id);
    
    if (!user?.redditAccessToken) {
      return res.json({ connected: false });
    }
    
    // Test the token
    const response = await fetch('https://oauth.reddit.com/api/v1/me', {
      headers: {
        'Authorization': `Bearer ${user.redditAccessToken}`,
        'User-Agent': 'ThottoPilot/1.0'
      }
    });
    
    if (response.ok) {
      const profile = await response.json();
      res.json({ 
        connected: true, 
        profile: {
          username: profile.name,
          karma: profile.total_karma || profile.comment_karma + profile.link_karma
        }
      });
    } else {
      res.json({ connected: false });
    }
  } catch (error) {
    res.status(500).json({ error: 'Connection test failed' });
  }
});

// Submit post to Reddit
router.post('/submit', authenticateToken, async (req: unknown, res) => {
  try {
    const user = await storage.getUser(req.user.id);
    
    if (!user?.redditAccessToken) {
      return res.status(401).json({ error: 'Reddit not connected' });
    }
    
    const { subreddit, title, body, url, nsfw, spoiler } = req.body;
    
    // Submit to Reddit API
    const response = await fetch('https://oauth.reddit.com/api/submit', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${user.redditAccessToken}`,
        'User-Agent': 'ThottoPilot/1.0',
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        sr: subreddit,
        title: title,
        kind: url ? 'link' : 'self',
        ...(url ? { url } : { text: body }),
        nsfw: nsfw ? 'true' : 'false',
        spoiler: spoiler ? 'true' : 'false',
        api_type: 'json'
      })
    });
    
    const result = await response.json();
    
    if (result.json?.data?.url) {
      res.json({ 
        success: true, 
        url: result.json.data.url,
        id: result.json.data.id
      });
    } else {
      res.json({ 
        success: false, 
        error: result.json?.errors?.[0]?.[1] || 'Failed to post'
      });
    }
  } catch (error) {
    res.status(500).json({ error: 'Failed to submit post' });
  }
});

export { router as redditRouter };Then add to server/routes.ts:typescriptimport { redditRouter } from './routes/reddit.js';

// Add this after other route registrations
app.use('/api/reddit', redditRouter);