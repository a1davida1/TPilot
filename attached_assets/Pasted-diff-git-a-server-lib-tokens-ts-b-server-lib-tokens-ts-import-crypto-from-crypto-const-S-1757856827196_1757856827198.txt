diff --git a/server/lib/tokens.ts b/server/lib/tokens.ts
@@
-import crypto from 'crypto';
-
-const SECRET_KEY = process.env.JWT_SECRET || 'dev-secret-key';
+import crypto from 'crypto';
+import { logger } from '../bootstrap/logger';
+
+const SECRET_KEY = process.env.JWT_SECRET;
+if (!SECRET_KEY) {
+  throw new Error('JWT_SECRET required');
+}
@@
-  } catch (error) {
-    console.error('Token verification error:', error);
-    return { valid: false };
-  }
+  } catch (error: unknown) {
+    const message = error instanceof Error ? error.message : 'Unknown error';
+    logger.error('Token verification error', { error: message });
+    return { valid: false };
+  }
 }
diff --git a/server/index.ts b/server/index.ts
@@
 import { logger } from "./bootstrap/logger";
 import { startQueue } from "./bootstrap/queue";
 import { notFoundHandler } from "./middleware/security";
 
+process.on('unhandledRejection', (err: unknown) => {
+  const message = err instanceof Error ? err.message : String(err);
+  logger.error('Unhandled rejection', { error: message });
+  process.exit(1);
+});
+
+const API_PREFIX = '/api/v1';
+
@@
-app.use((req, _res, next) => {
-  req.id = uuidv4();
-  next();
-});
+app.use((req, res, next) => {
+  req.id = uuidv4();
+  res.setHeader('X-Request-ID', req.id);
+  next();
+});
@@
-app.post("/api/webhooks/stripe", express.raw({ type: "application/json" }), (_req,_res,next)=>next());
+app.post(`${API_PREFIX}/webhooks/stripe`, express.raw({ type: "application/json" }), (_req,_res,next)=>next());
@@
-    app.use('/api/auth', authLimiter);
+    app.use(`${API_PREFIX}/auth`, authLimiter);
@@
-    const server = await registerRoutes(app);
+    const server = await registerRoutes(app, API_PREFIX);
diff --git a/server/routes/caption.ts b/server/routes/caption.ts
@@
-import { Router, Request, Response } from 'express';
-import { pipeline, InvalidImageError } from '../caption/geminiPipeline';
-import { pipelineTextOnly } from '../caption/textOnlyPipeline';
-import { pipelineRewrite } from '../caption/rewritePipeline';
-import { storage } from '../storage';
-import { authenticateToken, type AuthRequest } from '../middleware/auth';
-import { insertContentGenerationSchema } from '@shared/schema';
+import { Router, type Request, type Response } from 'express';
+import { pipeline, InvalidImageError } from '../caption/geminiPipeline';
+import { pipelineTextOnly } from '../caption/textOnlyPipeline';
+import { pipelineRewrite } from '../caption/rewritePipeline';
+import { storage } from '../storage';
+import { authenticateToken, type AuthRequest } from '../middleware/auth';
+import { insertContentGenerationSchema } from '@shared/schema';
+import { z } from 'zod';
+import { logger } from '../bootstrap/logger';
@@
-const router = Router();
+const router = Router();
+
+const generateSchema = z.object({
+  imageUrl: z.string(),
+  platform: z.enum(['instagram', 'x', 'reddit', 'tiktok']),
+  voice: z.string().optional(),
+  style: z.string().optional(),
+  mood: z.string().optional(),
+  nsfw: z.boolean().optional()
+});
+
+const generateTextSchema = z.object({
+  platform: z.enum(['instagram', 'x', 'reddit', 'tiktok']),
+  voice: z.string().optional(),
+  style: z.string().optional(),
+  mood: z.string().optional(),
+  theme: z.string(),
+  context: z.string().optional(),
+  nsfw: z.boolean().optional()
+});
+
+const rewriteSchema = z.object({
+  platform: z.enum(['instagram', 'x', 'reddit', 'tiktok']),
+  voice: z.string().optional(),
+  style: z.string().optional(),
+  mood: z.string().optional(),
+  existingCaption: z.string(),
+  imageUrl: z.string().optional(),
+  nsfw: z.boolean().optional()
+});
@@
-router.post('/generate', authenticateToken, async (req: AuthRequest, res: Response) => {
-  try {
-    const { imageUrl, platform, voice, style, mood, nsfw } = req.body || {};
-
-    if (!imageUrl || !platform) {
-      return res.status(400).json({ error: "imageUrl and platform are required" });
-    }
-
-    // Validate platform
-    const validPlatforms = ["instagram", "x", "reddit", "tiktok"];
-    if (!validPlatforms.includes(platform)) {
-      return res.status(400).json({ error: "Invalid platform. Must be one of: instagram, x, reddit, tiktok" });
-    }
+router.post('/generate', authenticateToken, async (req: AuthRequest, res: Response) => {
+  try {
+    const { imageUrl, platform, voice, style, mood, nsfw } = generateSchema.parse(req.body ?? {});
@@
-  } catch (e: unknown) {
-    console.error('Caption generation error:', e);
-    const errorMessage = e instanceof Error ? e.message : "generation failed";
+  } catch (e: unknown) {
+    const message = e instanceof Error ? e.message : "generation failed";
+    logger.error('Caption generation error', { error: message });
     if (e instanceof InvalidImageError) {
-      return res.status(422).json({ error: errorMessage });
+      return res.status(422).json({ error: message });
     }
-    return res.status(500).json({ error: errorMessage });
+    return res.status(500).json({ error: message });
   }
 });
@@
-router.post('/generate-text', authenticateToken, async (req: AuthRequest, res: Response) => {
-  try {
-    const { platform, voice, style, mood, theme, context, nsfw } = req.body || {};
-
-    if (!platform || !theme) {
-      return res.status(400).json({ error: "platform and theme are required" });
-    }
-
-    // Validate platform
-    const validPlatforms = ["instagram", "x", "reddit", "tiktok"];
-    if (!validPlatforms.includes(platform)) {
-      return res.status(400).json({ error: "Invalid platform. Must be one of: instagram, x, reddit, tiktok" });
-    }
+router.post('/generate-text', authenticateToken, async (req: AuthRequest, res: Response) => {
+  try {
+    const { platform, voice, style, mood, theme, context, nsfw } = generateTextSchema.parse(req.body ?? {});
@@
-  } catch (e: unknown) {
-    console.error('Text caption generation error:', e);
-    const errorMessage = e instanceof Error ? e.message : "generation failed";
+  } catch (e: unknown) {
+    const message = e instanceof Error ? e.message : "generation failed";
+    logger.error('Text caption generation error', { error: message });
     if (e instanceof InvalidImageError) {
-      return res.status(422).json({ error: errorMessage });
+      return res.status(422).json({ error: message });
     }
-    return res.status(500).json({ error: errorMessage });
+    return res.status(500).json({ error: message });
   }
 });
@@
-router.post('/rewrite', authenticateToken, async (req: AuthRequest, res: Response) => {
-  try {
-    const { platform, voice, style, mood, existingCaption, imageUrl, nsfw } = req.body || {};
-
-    if (!platform || !existingCaption) {
-      return res.status(400).json({ error: "platform and existingCaption are required" });
-    }
-
-    // Validate platform
-    const validPlatforms = ["instagram", "x", "reddit", "tiktok"];
-    if (!validPlatforms.includes(platform)) {
-      return res.status(400).json({ error: "Invalid platform. Must be one of: instagram, x, reddit, tiktok" });
-    }
+router.post('/rewrite', authenticateToken, async (req: AuthRequest, res: Response) => {
+  try {
+    const { platform, voice, style, mood, existingCaption, imageUrl, nsfw } = rewriteSchema.parse(req.body ?? {});
@@
-  } catch (e: unknown) {
-    console.error('Caption rewrite error:', e);
-    const errorMessage = e instanceof Error ? e.message : "rewrite failed";
+  } catch (e: unknown) {
+    const message = e instanceof Error ? e.message : "rewrite failed";
+    logger.error('Caption rewrite error', { error: message });
     if (e instanceof InvalidImageError) {
-      return res.status(422).json({ error: errorMessage });
+      return res.status(422).json({ error: message });
     }
-    return res.status(500).json({ error: errorMessage });
+    return res.status(500).json({ error: message });
   }
 });
