 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/tests/integration/analytics-security.test.ts b/tests/integration/analytics-security.test.ts
index c07cc3fd1a779004db2e45bb300be0fb961a22d4..313c43938f46e0dcc72ddd3ac014b38266d10a22 100644
--- a/tests/integration/analytics-security.test.ts
+++ b/tests/integration/analytics-security.test.ts
@@ -1,33 +1,37 @@
 import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
 import request from 'supertest';
 import express, { type Express, type Request, type Response, type NextFunction } from 'express';
+import { db } from '../../server/db.ts';
+import { userSessions } from '../../shared/schema.ts';
 
 interface MockUser { id: number }
 
 type AuthenticatedRequest = Request & { user?: MockUser };
 
+type SessionRecord = typeof userSessions.$inferSelect;
+
 let authImpl: (req: AuthenticatedRequest, res: Response, next: NextFunction) => void = (_req, _res, next) => next();
 
 vi.mock('../../server/middleware/auth.ts', () => ({
   authenticateToken: (req: AuthenticatedRequest, res: Response, next: NextFunction) => authImpl(req, res, next)
 }));
 
 import * as analyticsModule from '../../server/analytics-routes.ts';
 import { storage } from '../../server/storage.ts';
 
 const { registerAnalyticsRoutes, analyticsService } = analyticsModule;
 
 function createApp(): Express {
   const app = express();
   app.use(express.json());
   registerAnalyticsRoutes(app);
   return app;
 }
 
 describe('Analytics route authentication', () => {
   beforeEach(() => {
     authImpl = (_req, _res, next) => next();
     vi.restoreAllMocks();
   });
 
   afterEach(() => {
diff --git a/tests/integration/analytics-security.test.ts b/tests/integration/analytics-security.test.ts
index c07cc3fd1a779004db2e45bb300be0fb961a22d4..313c43938f46e0dcc72ddd3ac014b38266d10a22 100644
--- a/tests/integration/analytics-security.test.ts
+++ b/tests/integration/analytics-security.test.ts
@@ -128,26 +132,94 @@ describe('Analytics route authentication', () => {
       topPerformingPosts: [],
       platformDistribution: { reddit: 7, instagram: 5 }
     });
 
     const app = createApp();
     const response = await request(app).get('/api/stats');
 
     expect(response.status).toBe(200);
     expect(response.body).toEqual({
       totalGenerations: 12,
       successfulGenerations: 9,
       failedGenerations: 3,
       successRate: 75,
       thisWeek: 3,
       thisMonth: 6,
       dailyStreak: 4,
       platformDistribution: {
         reddit: 7,
         instagram: 5
       }
     });
 
     expect(storageSpy).toHaveBeenCalledWith(7);
     expect(analyticsSpy).toHaveBeenCalledWith(7, expect.any(Date), expect.any(Date));
   });
-});
+
+  it('rejects unauthenticated session analytics requests', async () => {
+    const selectSpy = vi.spyOn(db, 'select');
+    const app = createApp();
+
+    const response = await request(app).get('/api/analytics/sessions?limit=25');
+
+    expect(response.status).toBe(401);
+    expect(response.body).toEqual({ error: 'Authentication required' });
+    expect(selectSpy).not.toHaveBeenCalled();
+  });
+
+  it('returns session analytics for authenticated users', async () => {
+    authImpl = (req, _res, next) => {
+      req.user = { id: 123 };
+      next();
+    };
+
+    const mockSessions: SessionRecord[] = [
+      {
+        id: 1,
+        sessionId: 'sess-1',
+        userId: 123,
+        ipAddress: '127.0.0.1',
+        userAgent: 'Mozilla/5.0',
+        referrer: null,
+        utmSource: 'newsletter',
+        utmMedium: 'email',
+        utmCampaign: 'spring-launch',
+        deviceType: 'desktop',
+        browser: 'Chrome',
+        os: 'macOS',
+        country: 'USA',
+        city: 'New York',
+        startedAt: new Date('2024-01-01T00:00:00.000Z'),
+        endedAt: null,
+        duration: 180,
+        pageCount: 5,
+        revokedAt: null,
+        createdAt: new Date('2024-01-01T00:10:00.000Z'),
+      },
+    ];
+
+    const selectSpy = vi.spyOn(db, 'select').mockReturnValue({
+      from: (table: unknown) => {
+        expect(table).toBe(userSessions);
+        return {
+          where: () => ({
+            orderBy: () => ({
+              limit: async (limitValue: number) => {
+                expect(limitValue).toBe(25);
+                return mockSessions;
+              },
+            }),
+          }),
+        };
+      },
+    } as unknown as ReturnType<typeof db.select>);
+
+    const expectedSessions = JSON.parse(JSON.stringify(mockSessions));
+
+    const app = createApp();
+    const response = await request(app).get('/api/analytics/sessions?limit=25');
+
+    expect(response.status).toBe(200);
+    expect(response.body).toEqual(expectedSessions);
+    expect(selectSpy).toHaveBeenCalledTimes(1);
+  });
+});
 
EOF
)