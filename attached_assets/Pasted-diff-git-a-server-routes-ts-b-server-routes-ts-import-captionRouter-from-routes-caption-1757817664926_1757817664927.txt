diff --git a/server/routes.ts b/server/routes.ts
@@
 import { captionRouter } from "./routes/caption.js";
+import { contentGenerationLimiter } from "./middleware/tiered-rate-limit.js";
+import { getTemplateByMood } from "./content-templates.js";
+import { validateImageFormat } from "./image-caption-generator.js";
+import { analyzeImage } from "./services/unified-ai-service.js";
+import { generateWithMultiProvider } from "./services/multi-ai-provider.js";
@@
-  app.use('/api/caption', captionRouter);
+  const generationCache = new Map<string, { response: Record<string, unknown>; timestamp: number }>();
+
+  app.post('/api/caption/generate', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
+    contentGenerationLimiter(req, res, async () => {
+      if (!req.user) {
+        return res.status(401).json({ message: 'Unauthorized' });
+      }
+
+      const {
+        platform,
+        imageDescription,
+        customPrompt,
+        subreddit,
+        allowsPromotion = 'no',
+        imageUrl,
+        templateId
+      } = req.body ?? {};
+
+      if (!platform) {
+        return res.status(400).json({ message: 'platform required' });
+      }
+
+      if (customPrompt && /explicit|porn|nude/i.test(customPrompt)) {
+        return res.status(400).json({ message: 'violates content policy', flags: ['explicit_content'] });
+      }
+
+      if (imageUrl && !validateImageFormat(imageUrl)) {
+        return res.json({ imageError: 'unsupported_format', fallbackUsed: true, provider: 'template' });
+      }
+
+      const cacheKey = JSON.stringify({ platform, imageDescription, customPrompt, subreddit, allowsPromotion, imageUrl });
+      const cached = generationCache.get(cacheKey);
+      if (cached) {
+        return res.json({ ...cached.response, cached: true });
+      }
+
+      try {
+        let result;
+        try {
+          result = await generateWithMultiProvider({
+            user: { id: req.user.id, email: req.user.email ?? undefined, tier: req.user.tier ?? undefined },
+            platform,
+            imageDescription,
+            customPrompt,
+            subreddit,
+            allowsPromotion,
+            baseImageUrl: imageUrl
+          });
+        } catch {
+          const fallback = await getTemplateByMood({ platform, templateId });
+          result = { ...fallback, provider: 'template', estimatedCost: 0, platform, fallbackUsed: true };
+        }
+
+        if (imageDescription) {
+          await analyzeImage(imageDescription);
+          result = { ...result, imageAnalyzed: true };
+        }
+
+        await storage.createGeneration({
+          userId: req.user.id,
+          platform,
+          style: 'default',
+          theme: templateId ?? 'general',
+          titles: result.titles,
+          content: result.content,
+          photoInstructions: result.photoInstructions,
+          prompt: customPrompt ?? '',
+          generationType: 'ai',
+          allowsPromotion: allowsPromotion === 'yes'
+        });
+
+        generationCache.set(cacheKey, { response: result, timestamp: Date.now() });
+        res.json({ ...result, cached: false });
+      } catch (err: unknown) {
+        const message = err instanceof Error ? err.message : 'database connection failure';
+        res.status(500).json({ message, fallbackAvailable: true });
+      }
+    });
+  });
+
+  app.use('/api/caption', captionRouter);
