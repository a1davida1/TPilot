 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/api-routes.ts b/server/api-routes.ts
index faa188ed1e226941d9915037575557a66d44de40..03673b9e284d10543e57baa450278aeaa81161c9 100644
--- a/server/api-routes.ts
+++ b/server/api-routes.ts
@@ -1,44 +1,46 @@
 import type { Express, Response } from "express";
 import { db } from "./db.js";
 import { storage } from "./storage.js";
 import { AiService } from "./lib/ai-service.js";
 import { generateEnhancedContent } from "./services/enhanced-ai-service.js";
 import { AppError, CircuitBreaker } from "./lib/errors.js";
 import { MediaManager } from "./lib/media.js";
 import { CCBillProcessor } from "./lib/billing.js";
 import { PolicyLinter } from "./lib/policyLinter.js";
 import { PostScheduler } from "./lib/scheduling.js";
 import { addJob, QueueNames } from "./lib/queue/index.js";
 import { getErrorMessage } from "./utils/error.js";
 import { RedditManager } from "./lib/reddit.js";
 import { postJobs, subscriptions, mediaAssets, creatorAccounts, users, userSamples } from "@shared/schema";
 import { eq, desc, sql } from "drizzle-orm";
 import multer from "multer";
 import type { Request, NextFunction } from 'express';
 import { authenticateToken, type AuthRequest } from './middleware/auth.js';
 import { z, ZodError } from "zod";
+import { API_PREFIX } from './lib/api-prefix.js';
+import { mountMetrics } from './observability/metrics.js';
 
 type AiHistoryDependencies = {
   getUserHistory?: (userId: number, limit?: number) => Promise<unknown[]>;
 };
 
 export function createAiHistoryHandler(
   dependencies: AiHistoryDependencies = {}
 ) {
   const { getUserHistory = AiService.getUserHistory } = dependencies;
 
   return async (req: AuthRequest, res: Response) => {
     try {
       const userId = req.user?.id;
 
       if (!userId) {
         return res.status(500).json({ error: 'Authenticated user context missing' });
       }
 
       const limitQuery = Array.isArray(req.query.limit)
         ? req.query.limit[0]
         : req.query.limit;
       const parsedLimit = typeof limitQuery === 'string'
         ? Number.parseInt(limitQuery, 10)
         : undefined;
       const limit = Number.isFinite(parsedLimit) && parsedLimit && parsedLimit > 0
diff --git a/server/api-routes.ts b/server/api-routes.ts
index faa188ed1e226941d9915037575557a66d44de40..03673b9e284d10543e57baa450278aeaa81161c9 100644
--- a/server/api-routes.ts
+++ b/server/api-routes.ts
@@ -62,51 +64,53 @@ interface PostingJobPayload {
   bodyFinal: string;
   mediaKey?: string;
 }
 
 // Create a proper User type alias from the schema
 type UserType = typeof users.$inferSelect;
 
 // Augment Express namespace to add user property
 declare global {
   namespace Express {
     interface Request {
       user?: UserType;
     }
   }
 }
 
 
 // Multer configuration for file uploads
 const upload = multer({
   storage: multer.memoryStorage(),
   limits: {
     fileSize: 50 * 1024 * 1024, // 50MB limit
   },
 });
 
-export function registerApiRoutes(app: Express) {
+export function registerApiRoutes(app: Express, apiPrefix: string = API_PREFIX) {
+
+  mountMetrics(app, apiPrefix);
 
   const aiServiceBreaker = new CircuitBreaker(AiService.generateContent);
   const enhancedContentBreaker = new CircuitBreaker(generateEnhancedContent);
 
   // AI Content Generation
   app.post('/api/ai/generate', authenticateToken, async (req: Request, res, next: NextFunction) => {
     try {
       const schema = z.object({
         prompt: z.string().optional(),
         platforms: z.array(z.string()).min(1),
         styleHints: z.array(z.string()).optional(),
         variants: z.number().min(1).max(5).default(1),
       });
       const data: z.infer<typeof schema> = schema.parse(req.body);
       if (!req.user?.id) {
         return res.status(401).json({ error: 'Authentication required' });
       }
       const result = await aiServiceBreaker.call({
         ...data,
         platforms: data.platforms || [],
         userId: req.user.id,
       });
       res.json(result);
     } catch (error: unknown) {
       // Handle Zod validation errors specifically
diff --git a/server/api-routes.ts b/server/api-routes.ts
index faa188ed1e226941d9915037575557a66d44de40..03673b9e284d10543e57baa450278aeaa81161c9 100644
--- a/server/api-routes.ts
+++ b/server/api-routes.ts
@@ -446,45 +450,26 @@ export function registerApiRoutes(app: Express) {
         toneOfVoice: z.string().optional(),
         contentStyle: z.string().optional(),
         personalBrand: z.string().optional(),
         contentLength: z.string().optional(),
         includeEmojis: z.boolean().optional(),
         promotionLevel: z.string().optional()
       })
     });
     const body = preferenceSchema.parse({
       contentPreferences: {
         toneOfVoice: req.body.toneOfVoice,
         contentStyle: req.body.contentStyle,
         personalBrand: req.body.personalBrand,
         contentLength: req.body.contentLength,
         includeEmojis: req.body.includeEmojis,
         promotionLevel: req.body.promotionLevel
       }
     });
     await storage.updateUserPreferences(req.user.id, { userId: req.user.id, ...body });
     res.json(req.body);
   });
 
   // AI Generation History
   app.get('/api/ai/history', authenticateToken, createAiHistoryHandler());
 
-  // Public metrics for landing pages
-  app.get('/api/metrics', async (_req, res) => {
-    try {
-      const [userCount, postCount, engagement] = await Promise.all([
-        db.select({ count: sql<number>`count(*)` }).from(users),
-        db.select({ count: sql<number>`count(*)` }).from(postJobs),
-        db.select({ avg: sql<number>`COALESCE(AVG(${userSamples.performanceScore}), 0)` }).from(userSamples)
-      ]);
-
-      res.json({
-        creators: userCount[0]?.count || 0,
-        posts: postCount[0]?.count || 0,
-        engagement: Math.round(engagement[0]?.avg || 0)
-      });
-    } catch (error: unknown) {
-      console.error('Failed to fetch metrics:', error);
-      res.status(500).json({ error: 'Internal server error' });
-    }
-  });
 }
 
EOF
)