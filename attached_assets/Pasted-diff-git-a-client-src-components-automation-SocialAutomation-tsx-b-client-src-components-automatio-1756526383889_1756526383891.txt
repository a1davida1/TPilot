diff --git a/client/src/components/automation/SocialAutomation.tsx b/client/src/components/automation/SocialAutomation.tsx
index bfbabca78fbe749044d32952752b248de3d02942..0b44f4141f52a5b1d45fde643e7ec0677ea329b9 100644
--- a/client/src/components/automation/SocialAutomation.tsx
+++ b/client/src/components/automation/SocialAutomation.tsx
@@ -1,41 +1,82 @@
-import { useState } from 'react';
+import { useState, useEffect } from 'react';
 import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
 import { Button } from '@/components/ui/button';
 import { Switch } from '@/components/ui/switch';
 import { Badge } from '@/components/ui/badge';
 import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
 import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
 import { Slider } from '@/components/ui/slider';
 import { Clock, Zap, Target, TrendingUp, Settings, Users, BarChart3, Calendar } from 'lucide-react';
 
 export function SocialAutomation() {
   const [autoPostingEnabled, setAutoPostingEnabled] = useState(false);
   const [engagementOptimization, setEngagementOptimization] = useState(true);
   const [trendAnalysis, setTrendAnalysis] = useState(true);
   const [postFrequency, setPostFrequency] = useState([3]);
   const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>(['reddit', 'twitter']);
+  const [jobId, setJobId] = useState<string | null>(null);
+  const [posts, setPosts] = useState<any[]>([]);
+
+  const handleQuickPost = async () => {
+    const caption = localStorage.getItem('latestCaption') || '';
+    const image = localStorage.getItem('latestImage');
+    try {
+      const res = await fetch('/api/social-media/quick-post', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
+        },
+        body: JSON.stringify({ content: { text: caption, mediaUrls: image ? [image] : [] } })
+      });
+      const data = await res.json();
+      if (data.jobId) {
+        setJobId(data.jobId);
+      }
+    } catch (err) {
+      console.error('Quick post failed:', err);
+    }
+  };
+
+  useEffect(() => {
+    if (!jobId) return;
+    const interval = setInterval(async () => {
+      try {
+        const res = await fetch('/api/social-media/posts', {
+          headers: {
+            'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
+          }
+        });
+        const data = await res.json();
+        setPosts(data.posts || []);
+      } catch (err) {
+        console.error('Failed to fetch posts:', err);
+      }
+    }, 5000);
+    return () => clearInterval(interval);
+  }, [jobId]);
 
   const automationFeatures = [
     {
       id: 'auto-posting',
       title: 'Smart Auto-Posting',
       description: 'AI-powered posting at optimal times across platforms',
       icon: Clock,
       enabled: autoPostingEnabled,
       toggle: setAutoPostingEnabled,
       stats: { success: '94%', posts: '847', engagement: '+23%' }
     },
     {
       id: 'engagement-opt',
       title: 'Engagement Optimization',
       description: 'Real-time optimization of content for maximum engagement',
       icon: Target,
       enabled: engagementOptimization,
       toggle: setEngagementOptimization,
       stats: { boost: '+45%', reach: '156K', interactions: '2.3K' }
     },
     {
       id: 'trend-analysis',
       title: 'Trend Intelligence',
       description: 'AI-powered trend detection and content suggestions',
       icon: TrendingUp,
diff --git a/client/src/components/automation/SocialAutomation.tsx b/client/src/components/automation/SocialAutomation.tsx
index bfbabca78fbe749044d32952752b248de3d02942..0b44f4141f52a5b1d45fde643e7ec0677ea329b9 100644
--- a/client/src/components/automation/SocialAutomation.tsx
+++ b/client/src/components/automation/SocialAutomation.tsx
@@ -66,53 +107,56 @@ export function SocialAutomation() {
       description: 'Automatically include trending hashtags relevant to your content',
       platforms: ['twitter', 'instagram'],
       status: 'active'
     },
     {
       id: 'cross-platform',
       name: 'Cross-Platform Optimization',
       description: 'Adapt content format and messaging for each platform',
       platforms: ['reddit', 'twitter', 'instagram'],
       status: 'learning'
     }
   ];
 
   return (
     <div className="space-y-6">
       {/* Header */}
       <div className="flex items-center justify-between">
         <div>
           <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
             Social Automation
           </h2>
           <p className="text-muted-foreground mt-1">
             Advanced AI-powered social media automation and optimization
           </p>
         </div>
-        <Badge variant="secondary" className="bg-purple-500/10 text-purple-400 border-purple-500/20">
-          Phase 4 • Automation
-        </Badge>
+        <div className="flex items-center gap-2">
+          <Button size="sm" onClick={handleQuickPost}>Quick Post</Button>
+          <Badge variant="secondary" className="bg-purple-500/10 text-purple-400 border-purple-500/20">
+            Phase 4 • Automation
+          </Badge>
+        </div>
       </div>
 
       <Tabs defaultValue="overview" className="space-y-4">
         <TabsList className="grid w-full grid-cols-4">
           <TabsTrigger value="overview" data-testid="tab-overview">Overview</TabsTrigger>
           <TabsTrigger value="platforms" data-testid="tab-platforms">Platforms</TabsTrigger>
           <TabsTrigger value="rules" data-testid="tab-rules">Rules</TabsTrigger>
           <TabsTrigger value="analytics" data-testid="tab-analytics">Analytics</TabsTrigger>
         </TabsList>
 
         <TabsContent value="overview" className="space-y-4">
           {/* Automation Features */}
           <div className="grid gap-4">
             {automationFeatures.map((feature) => {
               const IconComponent = feature.icon;
               return (
                 <Card key={feature.id} className="bg-gradient-to-r from-gray-900/50 to-gray-800/50 border-gray-700/50">
                   <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
                     <div className="flex items-center space-x-3">
                       <div className="p-2 rounded-lg bg-purple-500/20">
                         <IconComponent className="h-5 w-5 text-purple-400" />
                       </div>
                       <div>
                         <CardTitle className="text-lg text-white">{feature.title}</CardTitle>
                         <p className="text-sm text-gray-400">{feature.description}</p>
diff --git a/client/src/components/automation/SocialAutomation.tsx b/client/src/components/automation/SocialAutomation.tsx
index bfbabca78fbe749044d32952752b248de3d02942..0b44f4141f52a5b1d45fde643e7ec0677ea329b9 100644
--- a/client/src/components/automation/SocialAutomation.tsx
+++ b/client/src/components/automation/SocialAutomation.tsx
@@ -166,52 +210,67 @@ export function SocialAutomation() {
                 <label className="text-sm font-medium text-gray-300">Active Platforms</label>
                 <div className="flex flex-wrap gap-2">
                   {platforms.map((platform) => (
                     <Badge
                       key={platform.id}
                       variant={selectedPlatforms.includes(platform.id) ? 'default' : 'outline'}
                       className={`cursor-pointer ${
                         selectedPlatforms.includes(platform.id)
                           ? 'bg-purple-500 hover:bg-purple-600'
                           : 'border-gray-600 hover:border-purple-500'
                       }`}
                       onClick={() => {
                         setSelectedPlatforms(prev =>
                           prev.includes(platform.id)
                             ? prev.filter(p => p !== platform.id)
                             : [...prev, platform.id]
                         );
                       }}
                       data-testid={`platform-${platform.id}`}
                     >
                       {platform.name}
                     </Badge>
                   ))}
                 </div>
               </div>
-            </CardContent>
+          </CardContent>
           </Card>
+          {posts.length > 0 && (
+            <Card className="bg-gradient-to-r from-gray-900/50 to-gray-800/50 border-gray-700/50">
+              <CardHeader>
+                <CardTitle className="text-white">Post Status</CardTitle>
+              </CardHeader>
+              <CardContent className="space-y-2">
+                {posts.map(post => (
+                  <div key={post.id} className="flex justify-between text-sm text-gray-400">
+                    <span>{post.platform}</span>
+                    <span>{post.status}</span>
+                  </div>
+                ))}
+              </CardContent>
+            </Card>
+          )}
         </TabsContent>
 
         <TabsContent value="platforms" className="space-y-4">
           <div className="grid gap-4">
             {platforms.map((platform) => (
               <Card key={platform.id} className="bg-gradient-to-r from-gray-900/50 to-gray-800/50 border-gray-700/50">
                 <CardHeader className="flex flex-row items-center justify-between space-y-0">
                   <div>
                     <CardTitle className="text-white">{platform.name}</CardTitle>
                     <p className="text-sm text-gray-400">
                       {platform.posts} posts • {platform.engagement.toFixed(1)}% avg engagement
                     </p>
                   </div>
                   <Badge
                     variant={
                       platform.status === 'connected' ? 'default' :
                       platform.status === 'pending' ? 'secondary' : 'outline'
                     }
                     className={
                       platform.status === 'connected' ? 'bg-green-500/20 text-green-400 border-green-500/20' :
                       platform.status === 'pending' ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/20' :
                       'border-gray-600'
                     }
                   >
                     {platform.status}
