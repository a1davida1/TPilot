You are a senior TS/Next.js engineer working on ThottoPilot. Implement the **Policy Linter & Preview Gate** (core safety) with minimal diffs, full typing, and basic tests. Do NOT touch unrelated areas.

## Goals
1) Real-time subreddit rule checking in the composer (ok/warn/block).
2) Store previews; only allow queueing posts after ≥3 “ok” previews in the last 14 days.
3) Enforce the gate server-side (no client bypass).
4) Unit tests for the linter + gate logic.

## Stack assumptions
- Next.js App Router + TypeScript
- Prisma + Postgres
- Existing auth (keep intact)

## Prisma (create if missing)
- Add models or reuse if present.

model SubredditRule {
  id        String   @id @default(cuid())
  subreddit String   @unique
  rulesJson Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PostPreview {
  id           String   @id @default(cuid())
  userId       String
  subreddit    String
  titlePreview String
  bodyPreview  String
  policyState  String   // "ok" | "warn" | "block"
  warnings     Json
  createdAt    DateTime @default(now())
}

- Run prisma migrate for these if not already present.

## Linter
- Create src/lib/policyLinter.ts
  export type PolicyResult = { state: "ok"|"warn"|"block"; warnings: string[] }
  export type RuleSpec = {
    bannedWords?: string[]
    titleRegexes?: string[]   // strings of regex
    bodyRegexes?: string[]
    flairRequired?: boolean
    linkPolicy?: "no-link"|"one-link"|"ok"
    requiredTags?: string[]   // e.g. "[F]" etc
  }
  export async function lintCaption(input: {
    subreddit: string
    title: string
    body: string
    hasLink: boolean
  }): Promise<PolicyResult> {
    // Load SubredditRule.rulesJson; if absent, apply sane defaults.
    // Apply checks; hard fails => "block"; soft suggestions => "warn"; else "ok".
    // Return aggregated warnings.
  }

## API routes (App Router)
- POST /api/preview
  Body: { subreddit, title, body, hasLink:boolean }
  1) run lintCaption()
  2) write PostPreview { policyState, warnings }
  3) return { policyState, warnings }
- GET /api/user/previewStats
  Return { okCount14d: number } counting PostPreview with policyState="ok" and createdAt >= now-14d.

## Gate enforcement
- Server util src/lib/gate.ts
  export async function canQueuePosts(userId: string) { return okCount14d >= 3 }
- In the server code path that creates post jobs (e.g., POST /api/postJobs):
  - Before creating/queueing a job, call canQueuePosts(). If false, return 403 with {reason:"PREVIEW_GATE_NOT_MET", required:3, have:okCount}.
  - KEEP this check server-side even if the client hides the button.

## Composer UI
- Wire a small client component:
  - Calls /api/preview on “Preview” button; shows live warnings (yellow) and blocks (red).
  - Shows a progress banner: “Preview gate: X/3 clean previews in last 14 days.”
  - Disable “Queue Post” button until okCount14d >= 3 AND current lint result != "block".
  - If policyState="warn" and feature flag policy.blockOnWarn (default false) is true, disable; else allow with a warning tooltip.

## Feature flag (optional, stored in DB if you already have a FeatureFlag model)
- key: "policy.blockOnWarn" (default false). If absent, treat as false.

## Seed data
- Insert a couple of SubredditRule rows with generic NSFW-safe constraints (no explicit words; one link max; example tag patterns). Keep neutral demo data.

## Tests (vitest/jest)
- tests/unit/policyLinter.test.ts
  - blocked on banned words / regexes
  - warn on soft issues (missing tag, etc.)
  - ok when clean
- tests/unit/previewGate.test.ts
  - with 2 ok previews in last 14d => canQueue=false
  - with 3 ok previews in last 14d => canQueue=true
  - previews older than 14d are ignored

## Acceptance Criteria
- [ ] POST /api/preview returns deterministic {policyState,warnings} and writes PostPreview
- [ ] GET /api/user/previewStats returns correct okCount14d
- [ ] POST /api/postJobs rejects with 403 if gate unmet (server-side)
- [ ] Composer shows live linter warnings and preview gate progress; “Queue” disabled until gate passes
- [ ] Unit tests above pass

Implement now and summarize changed files + any env/migrations required.
