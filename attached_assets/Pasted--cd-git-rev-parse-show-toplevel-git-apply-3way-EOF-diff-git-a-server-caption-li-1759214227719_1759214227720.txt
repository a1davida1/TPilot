 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/caption/lib/images.ts b/server/caption/lib/images.ts
index 4a35c322574d0aab62e296d95c9cb1361b98136a..641e1ee3a158869eb4df9d9848fd78de5ba1c067 100644
--- a/server/caption/lib/images.ts
+++ b/server/caption/lib/images.ts
@@ -41,50 +41,61 @@ export function validateImageUrl(input: string, minLength = 100): boolean {
   if (!input) return false;
   
   // HTTPS URLs are always valid
   if (/^https?:\/\//i.test(input)) return true;
   
   // Extract base64 content from data URL
   let base64Content = input;
   if (input.startsWith('data:')) {
     const commaIndex = input.indexOf(',');
     if (commaIndex === -1) return false;
     base64Content = input.substring(commaIndex + 1);
   }
   
   // Remove whitespace and check length
   const cleanBase64 = base64Content.replace(/\s+/g, '');
   return cleanBase64.length >= minLength;
 }
 
 /**
  * Logs image info for debugging while keeping sensitive data safe
  * @param imageUrl The image URL to log
  * @param requestId Optional request ID for tracking
  */
 export function logImageInfo(imageUrl: string, requestId?: string): void {
   const prefix = requestId ? `[${requestId}] ` : '';
-  
+
   if (!imageUrl) {
     console.error(`${prefix}Image URL is empty`);
     return;
   }
-  
+
   if (/^https?:\/\//i.test(imageUrl)) {
-    console.error(`${prefix}Using HTTPS image URL: ${imageUrl.substring(0, 100)}...`);
+    const protocol = imageUrl.startsWith('https:') ? 'https' : 'http';
+    console.error(`${prefix}Using remote image URL (protocol: ${protocol}, length: ${imageUrl.length})`);
     return;
   }
-  
+
   if (imageUrl.startsWith('data:')) {
     const commaIndex = imageUrl.indexOf(',');
     if (commaIndex !== -1) {
       const header = imageUrl.substring(0, commaIndex);
-      const base64 = imageUrl.substring(commaIndex + 1).replace(/\s+/g, '');
-      const first16 = base64.substring(0, 16);
-      const last16 = base64.substring(Math.max(0, base64.length - 16));
-      console.error(`${prefix}Using data URL: ${header}, base64[${base64.length}]: ${first16}...${last16}`);
+      const mimeMatch = header.match(/^data:([^;]+)/i);
+      const mimeType = mimeMatch ? mimeMatch[1] : 'unknown';
+      const base64Length = imageUrl.length - (commaIndex + 1);
+      const approxBytes = Math.floor((base64Length * 3) / 4);
+      console.error(
+        `${prefix}Using data URL (mime: ${mimeType}, approxBytes: ${approxBytes})`
+      );
+    } else {
+      console.error(`${prefix}Malformed data URL header`);
     }
     return;
   }
-  
-  console.error(`${prefix}Unknown image format (length: ${imageUrl.length})`);
+
+  if (/^[A-Za-z0-9+/=]+$/.test(imageUrl)) {
+    console.error(`${prefix}Received raw base64 payload (length: ${imageUrl.length})`);
+    return;
+  }
+
+  console.error(`${prefix}Unrecognized image input (length: ${imageUrl.length})`);
 }
 
EOF
)