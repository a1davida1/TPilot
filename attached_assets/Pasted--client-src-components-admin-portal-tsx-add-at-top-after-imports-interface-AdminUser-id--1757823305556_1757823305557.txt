# client/src/components/admin-portal.tsx (add at top after imports)
+ interface AdminUser {
+   id: string;
+   username: string;
+   email: string;
+   tier: string;
+   createdAt: string;
+   trialEndsAt?: string;
+ }
+ 
+ interface LiveDataType {
+   realTime?: {
+     activeUsers: number;
+     onlineNow: number;
+     contentBeingGenerated: number;
+     apiCallsPerMinute: number;
+   };
+   systemHealth?: {
+     database: string;
+     ai: string;
+     storage: string;
+     api: string;
+   };
+   alerts?: Array<{
+     id: string;
+     type: string;
+     title: string;
+     message: string;
+     acknowledged: boolean;
+   }>;
+   recentActivity?: Array<{
+     user: string;
+     action: string;
+     target?: string;
+     platform?: string;
+     time: string;
+   }>;
+ }
+ 
+ interface MetricsType {
+   uptime?: number;
+   memoryUsage?: { heapUsed: number };
+   database?: { connections: number; avgQueryTime: string };
+   api?: { totalRequests: number; avgResponseTime: string; errorRate: string };
+   services?: {
+     ai?: { gemini: boolean; openai: boolean };
+     email?: boolean;
+     storage?: boolean;
+   };
+ }

# Line 683 - fix Date constructor
- {Math.ceil((new Date(user.trialEndsAt).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days left
+ {user.trialEndsAt ? Math.ceil((new Date(user.trialEndsAt).getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : 0} days left

# Lines 818-864 - Add type assertion
- {liveData?.realTime?.activeUsers || 0}
+ {(liveData as LiveDataType)?.realTime?.activeUsers || 0}
# Apply same pattern to all liveData accesses

# Lines 885-896 - Type the map
- {liveData?.alerts?.map((alert: unknown) => (
+ {(liveData as LiveDataType)?.alerts?.map((alert) => (

# Lines 916-924 - Type activity
- {liveData?.recentActivity?.map((activity: unknown, index: number) => (
+ {(liveData as LiveDataType)?.recentActivity?.map((activity, index) => (

# Lines 973-991 - Type IP data
- {ipData?.map((ip: unknown) => (
+ {(ipData as Array<{ip: string; users: number; location: string; lastSeen: string; flagged: boolean}>)?.map((ip) => (

# Lines 1011-1030 - Type sessions
- {userActivity?.map((session: unknown) => (
+ {(userActivity as Array<{id: string; ipAddress: string; isActive: boolean; deviceType: string; browser: string; os: string; location?: {city: string; country: string}; loginAt: string; lastActivity: string}>)?.map((session) => (

# Lines 1081-1200 - Type metrics
- {formatUptime(metrics?.uptime || 0)}
+ {formatUptime((metrics as MetricsType)?.uptime || 0)}
# Apply same pattern to all metrics accesses

# Lines 1151-1166 - Type logs
- {logs?.map((log: unknown) => (
+ {(logs as Array<{id: string; level: string; message: string; service: string; ipAddress?: string; createdAt: string}>)?.map((log) => (

# Lines 1221-1268 - Type action data
- switch (data.action) {
+ switch ((data as any).action) {

- if (variables.action === 'reset-password') {
+ if ((variables as any).action === 'reset-password') {

- userId: selectedUser.id,
+ userId: (selectedUser as any).id,

- actionData.hours = parseInt(duration);
+ (actionData as any).hours = parseInt(duration);

# Lines 1370, 1375
- {/* Action Modal */}
+ <>{/* Action Modal */}</>

- {selectedUser.username}
+ {(selectedUser as any).username}