diff --git a/server/analytics-routes.ts b/server/analytics-routes.ts
@@
-import { Request, Response, Express } from 'express';
-import Stripe from 'stripe';
-import { z } from 'zod';
-import { db } from './db.js';
-import {
-  userSessions,
-  pageViews,
-  contentViews,
-  engagementEvents,
-  socialMetrics,
-  analyticsMetrics,
-  contentGenerations,
-  users
-} from '@shared/schema';
-import { eq, desc, gte, lte, and, count, sum, avg, sql } from 'drizzle-orm';
-import { Reader, type CityResponse } from '@maxmind/geoip2-node';
+import { Request, Response, Express } from 'express';
+import Stripe from 'stripe';
+import { z } from 'zod';
+import { db } from './db.js';
+import {
+  userSessions,
+  pageViews,
+  contentViews,
+  engagementEvents,
+  socialMetrics,
+  analyticsMetrics,
+  contentGenerations,
+  users
+} from '@shared/schema';
+import { eq, desc, gte, lte, and, count, sum, avg, sql } from 'drizzle-orm';
+import { Reader, type CityResponse } from '@maxmind/geoip2-node';
@@
-// Validation schemas
-const analyticsEventSchema = z.object({
-  eventType: z.string().min(1),
-  sessionId: z.string().min(1),
-  userId: z.string().optional(),
-  timestamp: z.string(),
-  userAgent: z.string().optional(),
-  url: z.string().url(),
-  referrer: z.string().optional(),
-}).passthrough(); // Allow additional properties
-
-const eventsPayloadSchema = z.object({
-  events: z.array(analyticsEventSchema).min(1).max(50) // Limit batch size
-});
+// Validation schemas
+const baseEventSchema = z.object({
+  eventType: z.string().min(1),
+  sessionId: z.string().min(1),
+  userId: z.string().optional(),
+  timestamp: z.string(),
+  userAgent: z.string().optional(),
+  url: z.string().url(),
+  referrer: z.string().optional(),
+});
+
+const pageViewSchema = baseEventSchema.extend({
+  eventType: z.literal('page_view'),
+  path: z.string(),
+  title: z.string(),
+});
+
+const pageEndSchema = baseEventSchema.extend({
+  eventType: z.literal('page_end'),
+  path: z.string(),
+  timeOnPage: z.number().optional(),
+  scrollDepth: z.number().optional(),
+  exitPage: z.boolean().optional(),
+});
+
+const engagementEventSchema = baseEventSchema.extend({
+  eventType: z.literal('engagement_event'),
+  type: z.string(),
+  element: z.string().optional(),
+  page: z.string().optional(),
+  metadata: z.unknown().optional(),
+  value: z.number().optional(),
+});
+
+const contentViewSchema = baseEventSchema.extend({
+  eventType: z.literal('content_view'),
+  contentId: z.number(),
+  platform: z.string().optional(),
+  subreddit: z.string().optional(),
+  viewType: z.string().optional(),
+  timeSpent: z.number().optional(),
+});
+
+const sessionEndSchema = baseEventSchema.extend({
+  eventType: z.literal('session_end'),
+  duration: z.number().optional(),
+});
+
+const analyticsEventSchema = z.discriminatedUnion('eventType', [
+  pageViewSchema,
+  pageEndSchema,
+  engagementEventSchema,
+  contentViewSchema,
+  sessionEndSchema,
+]);
+
+const eventsPayloadSchema = z.object({
+  events: z.array(analyticsEventSchema).min(1).max(50),
+});
+
+type BaseAnalyticsEvent = z.infer<typeof baseEventSchema>;
+type PageViewEvent = z.infer<typeof pageViewSchema>;
+type PageEndEvent = z.infer<typeof pageEndSchema>;
+type EngagementEvent = z.infer<typeof engagementEventSchema>;
+type ContentViewEvent = z.infer<typeof contentViewSchema>;
+type SessionEndEvent = z.infer<typeof sessionEndSchema>;
+type AnalyticsEvent = z.infer<typeof analyticsEventSchema>;
@@
-      // Process each event
-      for (const event of events) {
-        await processAnalyticsEvent(event as AnalyticsEvent, ipAddress);
-      }
+      // Process each event
+      for (const event of events) {
+        await processAnalyticsEvent(event, ipAddress);
+      }
@@
-// Helper Functions
-interface BaseAnalyticsEvent extends z.infer<typeof analyticsEventSchema> {}
-
-interface PageViewEvent extends BaseAnalyticsEvent {
-  eventType: 'page_view';
-  path: string;
-  title: string;
-}
-
-interface PageEndEvent extends BaseAnalyticsEvent {
-  eventType: 'page_end';
-  path: string;
-  timeOnPage?: number;
-  scrollDepth?: number;
-  exitPage?: boolean;
-}
-
-interface EngagementEvent extends BaseAnalyticsEvent {
-  eventType: 'engagement_event';
-  type: string;
-  element?: string;
-  page?: string;
-  metadata?: unknown;
-  value?: number;
-}
-
-interface ContentViewEvent extends BaseAnalyticsEvent {
-  eventType: 'content_view';
-  contentId: number;
-  platform?: string;
-  subreddit?: string;
-  viewType?: string;
-  timeSpent?: number;
-}
-
-interface SessionEndEvent extends BaseAnalyticsEvent {
-  eventType: 'session_end';
-  duration?: number;
-}
-
-type AnalyticsEvent =
-  | PageViewEvent
-  | PageEndEvent
-  | EngagementEvent
-  | ContentViewEvent
-  | SessionEndEvent;
-
-interface DeviceInfo {
+// Helper Functions
+interface DeviceInfo {
   deviceType: string;
   browser: string;
   os: string;
 }
