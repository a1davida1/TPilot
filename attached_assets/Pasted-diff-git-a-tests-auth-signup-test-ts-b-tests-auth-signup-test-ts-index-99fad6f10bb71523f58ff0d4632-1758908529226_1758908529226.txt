diff --git a/tests/auth/signup.test.ts b/tests/auth/signup.test.ts
index 99fad6f10bb71523f58ff0d4632530c4b794ab80..509877503b107d94df8caa1cc94285da6d68eaef 100644
--- a/tests/auth/signup.test.ts
+++ b/tests/auth/signup.test.ts
@@ -61,26 +61,53 @@ describe('Signup and email verification', () => {
       .post('/api/auth/signup')
       .send({ username: 'alice', password: 'Password123!', email: 'alice@example.com' });
 
     expect(signupRes.status).toBe(201);
     expect(signupRes.body.message).toMatch(/verification email sent/i);
     
     const { emailService } = await import('../../server/services/email-service');
     expect(emailService.sendVerificationEmail).toHaveBeenCalled();
 
     const token = tokens[0].token;
 
     const loginBefore = await request(app)
       .post('/api/auth/login')
       .send({ username: 'alice', password: 'Password123!' });
     expect(loginBefore.status).toBe(403);
 
     const verifyRes = await request(app).get(`/api/auth/verify-email?token=${token}`);
     expect([200, 302]).toContain(verifyRes.status);
 
     const loginAfter = await request(app)
       .post('/api/auth/login')
       .send({ username: 'alice', password: 'Password123!' });
     expect(loginAfter.status).toBe(200);
     expect(loginAfter.body.token).toBeDefined();
   });
-});
+
+  it('sets a secure auth cookie on production signup', async () => {
+    const originalNodeEnv = process.env.NODE_ENV;
+    process.env.NODE_ENV = 'production';
+
+    try {
+      const app = express();
+      app.use(express.json());
+      setupAuth(app);
+
+      const signupRes = await request(app)
+        .post('/api/auth/signup')
+        .send({ username: 'bob', password: 'Password123!', email: 'bob@example.com' });
+
+      expect(signupRes.status).toBe(201);
+      const cookies = signupRes.headers['set-cookie'];
+      expect(cookies).toBeDefined();
+
+      const authCookie = cookies?.find(cookie => cookie.startsWith('authToken='));
+      expect(authCookie).toBeDefined();
+      expect(authCookie).toMatch(/HttpOnly/i);
+      expect(authCookie).toMatch(/Secure/i);
+      expect(authCookie).toMatch(/SameSite=Strict/i);
+    } finally {
+      process.env.NODE_ENV = originalNodeEnv;
+    }
+  });
+});
