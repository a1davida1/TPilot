diff --git a/server/routes.ts b/server/routes.ts
index 2c8211b4e151db2eacde931d4219cad3d526e977..9c490e7ece9430f7f1ed2d4f9a51f517d1115aba 100644
--- a/server/routes.ts
+++ b/server/routes.ts
@@ -716,84 +716,86 @@ export async function registerRoutes(app: Express, apiPrefix: string = '/api'):
     }
   });
 
   // ==========================================
   // REGISTER EXISTING ROUTE MODULES
   // ==========================================
   
   // Register new enterprise API routes
   registerApiRoutes(app);
   
   // Register Policy Routes
   registerPolicyRoutes(app);
   
   // Register Reddit Routes  
   registerRedditRoutes(app);
   
   // Register Analytics Routes
   registerAnalyticsRoutes(app);
 
   // Register Social Media Routes
   registerSocialMediaRoutes(app);
 
   // Register Expense Routes (Tax Tracker API)
   registerExpenseRoutes(app);
 
-  const generationCache = new Map<string, { response: Record<string, unknown>; timestamp: number }>();
+  const generationCache = new Map<string, { response: unknown; timestamp: number }>();
+  type MultiAIResponse = Awaited<ReturnType<typeof generateWithMultiProvider>>;
 
   app.post('/api/caption/generate', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
     contentGenerationLimiter(req, res, async () => {
       if (!req.user) {
         return res.status(401).json({ message: 'Unauthorized' });
       }
 
       const {
         platform,
         imageDescription,
         customPrompt,
         subreddit,
         allowsPromotion = 'no',
         imageUrl,
         templateId
       } = req.body ?? {};
 
       if (!platform) {
         return res.status(400).json({ message: 'platform required' });
       }
 
       if (customPrompt && /explicit|porn|nude/i.test(customPrompt)) {
         return res.status(400).json({ message: 'violates content policy', flags: ['explicit_content'] });
       }
 
       if (imageUrl && !validateImageFormat(imageUrl)) {
         return res.json({ imageError: 'unsupported_format', fallbackUsed: true, provider: 'template' });
       }
 
       const cacheKey = JSON.stringify({ platform, imageDescription, customPrompt, subreddit, allowsPromotion, imageUrl });
       const cached = generationCache.get(cacheKey);
       if (cached) {
-        return res.json({ ...cached.response, cached: true });
+        const cachedResponse = cached.response as MultiAIResponse;
+        return res.json({ ...cachedResponse, cached: true });
       }
 
       try {
         let result;
         try {
           result = await generateWithMultiProvider({
             user: { id: req.user.id, email: req.user.email ?? undefined, tier: req.user.tier ?? undefined },
             platform,
             imageDescription,
             customPrompt,
             subreddit,
             allowsPromotion,
             baseImageUrl: imageUrl
           });
         } catch {
           const fallback = await getTemplateByMood(templateId ?? 'casual');
           result = { ...fallback, provider: 'template', estimatedCost: 0, platform, fallbackUsed: true };
         }
 
         if (imageDescription) {
           await analyzeImage(imageDescription);
           result = { ...result, imageAnalyzed: true };
         }
 
         await storage.createGeneration({
