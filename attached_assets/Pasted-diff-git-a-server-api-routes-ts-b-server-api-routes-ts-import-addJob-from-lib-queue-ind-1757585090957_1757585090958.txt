diff --git a/server/api-routes.ts b/server/api-routes.ts
@@
 import { addJob } from "./lib/queue/index.js";
+
+interface PostingJobPayload {
+  userId: number;
+  postJobId: number;
+  subreddit: string;
+  titleFinal: string;
+  bodyFinal: string;
+  mediaKey?: string;
+}
@@
-      await addJob('posting' as any, {
+      await addJob<PostingJobPayload>('posting', {
         userId,
         postJobId: jobId,
         subreddit,
         titleFinal,
         bodyFinal,
diff --git a/server/bootstrap/logger.ts b/server/bootstrap/logger.ts
@@
-    const SentryModule = await import("@sentry/node" as any).catch(() => null);
-    if (SentryModule) {
-      Sentry = SentryModule;
+    let SentryModule: (typeof import("@sentry/node")) | null = null;
+    try {
+      SentryModule = await import("@sentry/node");
+    } catch {
+      SentryModule = null;
+    }
+    if (SentryModule) {
+      Sentry = SentryModule;
diff --git a/server/routes/webhooks.stripe.ts b/server/routes/webhooks.stripe.ts
@@
-import { stripe } from "../lib/billing/stripe.js";
+import { stripe } from "../lib/billing/stripe.js";
+import type Stripe from "stripe";
@@
-    let event;
+    let event: Stripe.Event;
@@
-        const sub = event.data.object as any;
+        const sub = event.data.object as Stripe.Subscription;
@@
-        const inv = event.data.object as any;
+        const inv = event.data.object as Stripe.Invoice;
diff --git a/server/middleware/performance.ts b/server/middleware/performance.ts
@@
-import { Request, Response, NextFunction } from 'express';
+import { Request, Response, NextFunction } from 'express';
+
+declare module 'express-serve-static-core' {
+  interface Response {
+    monitoredEnd?: Response['end'];
+  }
+}
@@
-      const originalEnd = res.end;
+      const originalEnd = res.end.bind(res);
@@
-      (res as any).end = (...args: any[]) => {
-        res.end = originalEnd;
+      res.end = function monitoredEnd(...args: Parameters<Response['end']>): Response {
+        res.end = originalEnd;
@@
-        originalEnd(...args);
-      };
+        return originalEnd(...args);
+      };
diff --git a/server/middleware/streaming-upload.ts b/server/middleware/streaming-upload.ts
@@
-      const fields: Record<string, any> = {};
+      interface UploadFields {
+        [key: string]: string | string[];
+      }
+      const fields: UploadFields = {};
diff --git a/server/routes.ts b/server/routes.ts
@@
-const SESSION_SECRET = process.env.SESSION_SECRET!;
+const rawSessionSecret = process.env.SESSION_SECRET;
+if (!rawSessionSecret) {
+  throw new Error('SESSION_SECRET missing');
+}
+const SESSION_SECRET: string = rawSessionSecret;
diff --git a/server/index.ts b/server/index.ts
@@
-const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(",").map(o => o.trim());
-app.use(cors({ origin: allowedOrigins, credentials: true }));
+const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(",").map(o => o.trim()) ?? [];
+app.use(cors({
+  origin(origin, cb) {
+    if (!origin || allowedOrigins.includes(origin)) cb(null, true);
+    else cb(new Error("Origin not allowed"));
+  },
+  credentials: true
+}));
@@
-      if (capturedJsonResponse) {
-        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
-      }
+      if (capturedJsonResponse) {
+        const safe = (({ token, email, ...rest }) => rest)(capturedJsonResponse as Record<string, unknown>);
+        logLine += ` :: ${JSON.stringify(safe)}`;
+      }
diff --git a/shared/schema.ts b/shared/schema.ts
@@
   passwordResetAt: timestamp("password_reset_at"),
+  deletedAt: timestamp("deleted_at"),
 });
diff --git a/server/storage.ts b/server/storage.ts
@@
-    try {
-      await db.delete(users).where(eq(users.id, userId));
-    } catch (error) {
+    try {
+      await db
+        .update(users)
+        .set({ deletedAt: new Date(), email: null, username: `deleted_${userId}` })
+        .where(eq(users.id, userId));
+    } catch (error) {
       safeLog('error', 'Storage operation failed - deleting user:', { error: error.message });
       throw error;
     }
