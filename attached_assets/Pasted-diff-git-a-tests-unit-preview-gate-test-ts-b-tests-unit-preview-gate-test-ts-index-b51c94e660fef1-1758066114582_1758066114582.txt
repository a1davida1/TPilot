diff --git a/tests/unit/preview-gate.test.ts b/tests/unit/preview-gate.test.ts
index b51c94e660fef10f717a9db02fd91325ca683f9f..3ade8c6268d81866ba4b8cb9d0464fd6b3dd58db 100644
--- a/tests/unit/preview-gate.test.ts
+++ b/tests/unit/preview-gate.test.ts
@@ -1,42 +1,50 @@
 import { eq } from "drizzle-orm";
 import { getPreviewStats, canQueuePosts, checkPreviewGate } from '../../server/lib/preview-gate';
 import { db } from '../../server/db';
 import { postPreviews, contentGenerations, users } from '@shared/schema.js';
 
 describe('Preview Gate', () => {
   const testUserId = 999; // Test user ID
   
   beforeAll(async () => {
     // Create test user
+    const uniqueSuffix = `${Date.now()}-${Math.floor(Math.random() * 1000)}`;
+
     await db.insert(users).values({
       id: testUserId,
-      username: 'testuser',
-      email: 'test@example.com',
+      username: `testuser-${uniqueSuffix}`,
+      email: `test-${uniqueSuffix}@example.com`,
       password: 'hashedpassword',
       tier: 'free'
     }).onConflictDoNothing();
+
+    const insertedUser = await db.select().from(users).where(eq(users.id, testUserId));
+
+    if (insertedUser.length === 0) {
+      throw new Error('Failed to insert test user for preview gate tests');
+    }
   });
 
   beforeEach(async () => {
     // Clean up test data before each test
     await db.delete(postPreviews).where(eq(postPreviews.userId, testUserId));
   });
 
   afterAll(async () => {
     // Cleanup - delete in correct order
     await db.delete(contentGenerations).where(eq(contentGenerations.userId, testUserId));
     await db.delete(postPreviews).where(eq(postPreviews.userId, testUserId));
     await db.delete(users).where(eq(users.id, testUserId));
   });
 
   describe('Preview Statistics', () => {
     test('returns correct stats with no previews', async () => {
       const stats = await getPreviewStats(testUserId);
 
       expect(stats.okCount14d).toBe(0);
       expect(stats.totalPreviews14d).toBe(0);
       expect(stats.canQueue).toBe(false);
       expect(stats.required).toBe(3);
     });
 
     test('counts OK previews in last 14 days', async () => {
