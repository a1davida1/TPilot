Implement conditional rendering in dashboard
Sep 22 · a1davida1/TPilot · main
+606-109
1. In `client/src/components/modern-dashboard.tsx`, use the `isRedditConnected` prop (and optionally posting history) to drive conditional rendering—e.g., show a hero card with a “Connect Reddit to start” CTA until the account is linked, then progressively reveal other action cards.
2. Refactor the `actionCards` array so early-stage users only see the core Reddit loop (connect, pick subreddits, quick post); move secondary utilities (tax tracker, takedown scanning, analytics) behind tier checks or a “More tools” expander.
3. Persist onboarding progress (local storage, user profile flag, or backend field) and update the dashboard to resume users where they left off; cover the gating logic with component tests to ensure each milestone unlocks the right UI.

Summary

    Persisted Reddit onboarding milestones in local storage, synchronized them with connection status and posting activity, and used the stored state to drive the hero CTA sequence and progress pills on the dashboard.

Reorganized the dashboard action cards into core, growth, and advanced sets with milestone checks, tier gating, and a “More tools” expander so that secondary utilities stay hidden until the user is ready.

Added React Testing Library coverage to confirm each onboarding milestone unlocks the expected cards and expander behavior for different tiers.

Testing

    ✅ npm run lint

    ⚠️ npm test *(fails because the broader suite depends on external services/API keys; numerous unrelated specs error before completion)*


client/src/components/__tests__/modern-dashboard.test.tsx
New
+107-0
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { ModernDashboard, MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY } from '../modern-dashboard';

vi.mock('@tanstack/react-query', () => ({
  useQuery: () => ({ data: undefined, isLoading: false, error: null }),
}));

vi.mock('@/hooks/useAuth', () => ({
  useAuth: () => ({ user: null }),
}));

vi.mock('@/hooks/use-toast', () => ({
  useToast: () => ({ toast: vi.fn() }),
}));

describe('ModernDashboard onboarding gating', () => {
  beforeEach(() => {
    window.localStorage.clear();
  });

  const renderDashboard = (props: Partial<React.ComponentProps<typeof ModernDashboard>> = {}) => {
    return render(
      <ModernDashboard
        isRedditConnected={false}
        userTier="free"
        {...props}
      />
    );
  };

  it('prompts users to connect Reddit before showing other actions', () => {
    renderDashboard();

    expect(
      screen.getByText(/connect your reddit account to sync communities/i)
    ).toBeInTheDocument();

    expect(screen.getByRole('button', { name: /connect reddit to start/i })).toBeInTheDocument();
    expect(screen.getByText('Connect Reddit')).toBeInTheDocument();
    expect(screen.queryByText('Find Subreddits')).not.toBeInTheDocument();
    expect(screen.queryByText('Quick Post')).not.toBeInTheDocument();
  });

  it('unlocks subreddit discovery once Reddit is connected', () => {
    window.localStorage.setItem(
      MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY,
      JSON.stringify({ connectedReddit: true, selectedCommunities: false, createdFirstPost: false })
    );

    renderDashboard({ isRedditConnected: true });

    expect(screen.getByText(/pick your top subreddits next/i)).toBeInTheDocument();
    expect(screen.getByText('Find Subreddits')).toBeInTheDocument();
    expect(screen.queryByText('Quick Post')).not.toBeInTheDocument();
  });

  it('reveals quick post and growth tools after choosing communities', () => {
    window.localStorage.setItem(
      MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY,
      JSON.stringify({ connectedReddit: true, selectedCommunities: true, createdFirstPost: false })
    );

    renderDashboard({ isRedditConnected: true });

    expect(screen.getByText(/ship your first reddit post/i)).toBeInTheDocument();
    expect(screen.getByText('Quick Post')).toBeInTheDocument();
    expect(screen.getByText('Generate Caption')).toBeInTheDocument();
  });

  it('exposes advanced tools behind the expander after the first post', async () => {
    window.localStorage.setItem(
      MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY,
      JSON.stringify({ connectedReddit: true, selectedCommunities: true, createdFirstPost: true })
    );

    renderDashboard({ isRedditConnected: true, userTier: 'pro' });

    expect(screen.getByText(/you're ready for deeper automation/i)).toBeInTheDocument();

    const toggle = screen.getByRole('button', { name: /show more tools/i });
    const user = userEvent.setup();
    await user.click(toggle);

    expect(screen.getByText('Tax Tracker')).toBeInTheDocument();
    expect(screen.getByText('Scan Takedowns')).toBeInTheDocument();
  });

  it('asks lower tiers to upgrade when advanced tools are locked', async () => {
    window.localStorage.setItem(
      MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY,
      JSON.stringify({ connectedReddit: true, selectedCommunities: true, createdFirstPost: true })
    );

    renderDashboard({ isRedditConnected: true, userTier: 'free' });

    const toggle = screen.getByRole('button', { name: /show more tools/i });
    const user = userEvent.setup();
    await user.click(toggle);

    expect(
      screen.getByText(/upgrade your plan to unlock analytics, takedown scanning, and finance workflows/i)
    ).toBeInTheDocument();
    expect(screen.queryByText('Tax Tracker')).not.toBeInTheDocument();
  });
});
client/src/components/modern-dashboard.tsx
+499-109
import React, { useState, useEffect, useRef } from "react";
import React, { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { useAuth } from "@/hooks/useAuth";
import { 
  Upload,
  Sparkles,
  Shield,
  Target,
  Scale,
  BarChart3,
  Calculator,
  Gift,
  Menu,
  X,
  Clock,
  Bell,
  Settings,
  ChevronRight,
  Home,
  Brain,
  Users,
  Hash,
  History,
  ImageIcon,
  Wand2,
  Zap,
  ListChecks,
  Command
  Command,
  CheckCircle2
} from "lucide-react";
import { FaReddit } from "react-icons/fa";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";

interface ModernDashboardProps {
  isRedditConnected?: boolean;
  user?: { id: number; username: string; email?: string; tier?: string; isVerified?: boolean };
  userTier?: 'guest' | 'free' | 'basic' | 'starter' | 'pro' | 'premium' | 'admin';
  isAdmin?: boolean;
}

type UserTier = NonNullable<ModernDashboardProps['userTier']>;

interface OnboardingProgress {
  connectedReddit: boolean;
  selectedCommunities: boolean;
  createdFirstPost: boolean;
}

type OnboardingMilestone = keyof OnboardingProgress;

export const MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY = 'modern-dashboard:onboarding-progress';

const onboardingDefaults: OnboardingProgress = {
  connectedReddit: false,
  selectedCommunities: false,
  createdFirstPost: false,
};

const tierHierarchy: Record<UserTier, number> = {
  guest: 0,
  free: 1,
  basic: 2,
  starter: 3,
  pro: 4,
  premium: 5,
  admin: 6,
};

interface ActionCardConfig {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  route: string | null;
  comingSoon?: boolean;
  premium?: boolean;
  requiredTier?: UserTier;
  requiredMilestones?: OnboardingMilestone[];
  group: 'core' | 'growth' | 'secondary';
  completeMilestone?: OnboardingMilestone;
}

interface DashboardStatsResponse {
  postsToday: number;
  engagementRate: number;
  takedownsFound: number;
  estimatedTaxSavings: number;
}

interface DashboardActivityResponse {
  recentMedia: Array<{
    id: number;
    url: string;
    alt: string;
    createdAt: string | null;
  }>;
}

export type { DashboardStatsResponse, DashboardActivityResponse };

const numberFormatter = new Intl.NumberFormat('en-US');

function formatNumber(value: number): string {
  return numberFormatter.format(value);
}

function formatPercentage(value: number): string {
  if (!Number.isFinite(value)) {
    return '0%';
  }
  const fractionDigits = Number.isInteger(value) ? 0 : 1;
  return `${value.toFixed(fractionDigits)}%`;
}

function formatCurrency(value: number): string {
  if (!Number.isFinite(value)) {
    return '$0';
  }
  const minimumFractionDigits = Number.isInteger(value) ? 0 : 2;
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits,
    maximumFractionDigits: 2,
  }).format(value);
}

function readStoredProgress(): OnboardingProgress {
  if (typeof window === 'undefined') {
    return onboardingDefaults;
  }

  try {
    const raw = window.localStorage.getItem(MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY);
    if (!raw) {
      return onboardingDefaults;
    }

    const parsed = JSON.parse(raw) as Partial<OnboardingProgress> | null;
    if (!parsed || typeof parsed !== 'object') {
      return onboardingDefaults;
    }

    return {
      connectedReddit: typeof parsed.connectedReddit === 'boolean' ? parsed.connectedReddit : onboardingDefaults.connectedReddit,
      selectedCommunities:
        typeof parsed.selectedCommunities === 'boolean' ? parsed.selectedCommunities : onboardingDefaults.selectedCommunities,
      createdFirstPost:
        typeof parsed.createdFirstPost === 'boolean' ? parsed.createdFirstPost : onboardingDefaults.createdFirstPost,
    };
  } catch (error) {
    return onboardingDefaults;
  }
}

function hasTierAccess(currentTier: UserTier, requiredTier: UserTier | undefined, isAdminUser: boolean): boolean {
  if (!requiredTier) {
    return true;
  }

  if (isAdminUser) {
    return true;
  }

  return tierHierarchy[currentTier] >= tierHierarchy[requiredTier];
}

export function ModernDashboard({ isRedditConnected = false, user, userTier = 'free', isAdmin = false }: ModernDashboardProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [selectedCard, setSelectedCard] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [showMoreTools, setShowMoreTools] = useState(false);
  const [onboardingProgress, setOnboardingProgress] = useState<OnboardingProgress>(() => readStoredProgress());
  const { toast } = useToast();
  const [, setLocation] = useLocation();
  const { user: authUser } = useAuth();
  
  const resolvedTier = (authUser?.tier as ModernDashboardProps['userTier'] | undefined) ?? userTier;
  const resolvedUser = authUser ?? user;
  const isAdminUser = Boolean(authUser?.isAdmin || authUser?.role === 'admin' || resolvedTier === 'admin' || isAdmin);
  const isPremium = isAdminUser || resolvedTier === 'premium' || resolvedTier === 'pro';
  const displayName = resolvedUser?.username ?? resolvedUser?.email ?? 'Creator';
  const dashboardPrompt = isAdminUser
    ? 'Review platform performance and respond to creator needs.'
    : 'What would you like to do today?';

  const {
    data: statsData,
    isLoading: statsLoading,
    error: statsError,
  } = useQuery<DashboardStatsResponse>({
    queryKey: ['/api/dashboard/stats'],
    enabled: Boolean(resolvedUser?.id),
  });

  const {
    data: activityData,
    isLoading: activityLoading,
@@ -127,203 +208,443 @@ export function ModernDashboard({ isRedditConnected = false, user, userTier = 'f
    if (statsError instanceof Error) {
      toast({
        title: "Unable to load dashboard stats",
        description: statsError.message,
      });
    }
  }, [statsError, toast]);

  useEffect(() => {
    if (activityError instanceof Error) {
      toast({
        title: "Unable to load media activity",
        description: activityError.message,
      });
    }
  }, [activityError, toast]);
  
  // Get current time greeting
  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return "Good morning";
    if (hour < 18) return "Good afternoon";
    return "Good evening";
  };

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const statsLoadingWithoutData = statsLoading && !statsData;
  const statsUnavailable = (!statsLoading && !statsData && statsError instanceof Error) || statsLoadingWithoutData;
  const statsSummary = {
    postsToday: statsData?.postsToday ?? 0,
    engagementRate: statsData?.engagementRate ?? 0,
    takedownsFound: statsData?.takedownsFound ?? 0,
    estimatedTaxSavings: statsData?.estimatedTaxSavings ?? 0,
  } satisfies DashboardStatsResponse;

  const statsCards = [
    {
      label: "Posts Today",
      value: statsUnavailable ? "--" : formatNumber(statsSummary.postsToday),
      icon: <Upload className="h-5 w-5" />,
      color: "text-purple-400"
    },
    {
      label: "Engagement Rate",
      value: statsUnavailable ? "--" : formatPercentage(statsSummary.engagementRate),
      icon: <Target className="h-5 w-5" />,
      color: "text-green-400"
    },
    {
      label: "Takedowns Found",
      value: statsUnavailable ? "--" : formatNumber(statsSummary.takedownsFound),
      icon: <Shield className="h-5 w-5" />,
      color: "text-yellow-400"
    },
    {
      label: "Estimated Tax Savings",
      value: statsUnavailable ? "--" : formatCurrency(statsSummary.estimatedTaxSavings),
      icon: <Calculator className="h-5 w-5" />,
      color: "text-blue-400"
    }
  ];

  const galleryItems = activityData?.recentMedia ?? [];
  const showGalleryEmptyState = !activityLoading && galleryItems.length === 0;
  const postsDetected = (statsSummary.postsToday > 0) || galleryItems.length > 0;

  const actionCards = [
  useEffect(() => {
    setOnboardingProgress((previous) => {
      const connected = Boolean(isRedditConnected);
      if (previous.connectedReddit === connected) {
        return previous;
      }
      return { ...previous, connectedReddit: connected };
    });
  }, [isRedditConnected]);

  useEffect(() => {
    if (!postsDetected) {
      return;
    }

    setOnboardingProgress((previous) => {
      if (previous.createdFirstPost) {
        return previous;
      }
      return { ...previous, createdFirstPost: true };
    });
  }, [postsDetected]);

  useEffect(() => {
    if (typeof window === 'undefined') {
      return;
    }

    window.localStorage.setItem(
      MODERN_DASHBOARD_ONBOARDING_STORAGE_KEY,
      JSON.stringify(onboardingProgress)
    );
  }, [onboardingProgress]);

  useEffect(() => {
    if (onboardingProgress.createdFirstPost || isAdminUser) {
      return;
    }

    if (showMoreTools) {
      setShowMoreTools(false);
    }
  }, [onboardingProgress.createdFirstPost, isAdminUser, showMoreTools]);

  const allActionCards: ActionCardConfig[] = [...coreActionCards, ...growthActionCards, ...secondaryActionCards];

  const hasTierForCard = (card: ActionCardConfig) => hasTierAccess(resolvedTier, card.requiredTier, isAdminUser);

  const isCardUnlocked = (card: ActionCardConfig) => {
    if (!card.requiredMilestones) {
      return true;
    }

    return card.requiredMilestones.every((milestone) => onboardingProgress[milestone]);
  };

  const coreCardsToRender = coreActionCards.filter(isCardUnlocked);
  const showGrowthSection = onboardingProgress.connectedReddit && onboardingProgress.selectedCommunities;
  const growthCardsToRender = growthActionCards.filter((card) => isCardUnlocked(card) && hasTierForCard(card));
  const canAccessAdvancedTools = onboardingProgress.createdFirstPost || isAdminUser;
  const advancedCardsToRender = secondaryActionCards.filter((card) => isCardUnlocked(card) && hasTierForCard(card));

  const heroStage: 'connect' | 'communities' | 'post' | 'growth' = !onboardingProgress.connectedReddit
    ? 'connect'
    : !onboardingProgress.selectedCommunities
      ? 'communities'
      : !onboardingProgress.createdFirstPost
        ? 'post'
        : 'growth';

  const greeting = getGreeting();

  const heroContent: {
    stageLabel: string;
    title: string;
    description: string;
    ctaLabel?: string;
    ctaCardId?: ActionCardConfig['id'];
  } = (() => {
    switch (heroStage) {
      case 'connect':
        return {
          stageLabel: 'Step 1 of 3',
          title: `${greeting}, ${displayName}!`,
          description: 'Connect your Reddit account to sync communities, analytics, and automations.',
          ctaLabel: 'Connect Reddit to start',
          ctaCardId: 'connect-reddit',
        };
      case 'communities':
        return {
          stageLabel: 'Step 2 of 3',
          title: 'Pick your top subreddits next',
          description: `${displayName}, you're linked. Choose the communities that match your posting plan to unlock quick posting.`,
          ctaLabel: 'Discover communities',
          ctaCardId: 'find-subreddits',
        };
      case 'post':
        return {
          stageLabel: 'Step 3 of 3',
          title: 'Ship your first Reddit post',
          description: 'Use the quick post workflow to publish and unlock advanced automations.',
          ctaLabel: 'Open quick post',
          ctaCardId: 'quick-post',
        };
      default:
        return {
          stageLabel: 'Growth mode',
          title: `${greeting}, ${displayName}!`,
          description: "You're ready for deeper automation. Explore optimization, protection, and analytics tools below.",
        };
    }
  })();

  const heroActionCard = heroContent.ctaCardId
    ? allActionCards.find((card) => card.id === heroContent.ctaCardId)
    : undefined;

  const progressSteps: Array<{ label: string; complete: boolean }> = [
    { label: 'Connect Reddit', complete: onboardingProgress.connectedReddit },
    { label: 'Pick communities', complete: onboardingProgress.selectedCommunities },
    { label: 'Post to Reddit', complete: onboardingProgress.createdFirstPost },
  ];

  const milestoneByCardId: Partial<Record<ActionCardConfig['id'], OnboardingMilestone>> = {
    'connect-reddit': 'connectedReddit',
    'find-subreddits': 'selectedCommunities',
    'quick-post': 'createdFirstPost',
  };

  const coreActionCards: ActionCardConfig[] = [
    {
      id: "quick-post",
      title: "Quick Post",
      description: "Upload a post in seconds",
      id: 'connect-reddit',
      title: 'Connect Reddit',
      description: 'Link your Reddit account to unlock automations',
      icon: <FaReddit className="h-6 w-6" />,
      color: 'from-orange-500 to-orange-600',
      route: '/reddit-accounts',
      group: 'core',
    },
    {
      id: 'find-subreddits',
      title: 'Find Subreddits',
      description: 'Discover the best communities for your content',
      icon: <Target className="h-6 w-6" />,
      color: 'from-purple-500 to-purple-600',
      route: '/communities',
      group: 'core',
      requiredMilestones: ['connectedReddit'],
      completeMilestone: 'selectedCommunities',
    },
    {
      id: 'quick-post',
      title: 'Quick Post',
      description: 'Publish across your connected communities',
      icon: <Upload className="h-6 w-6" />,
      color: "from-purple-500 to-purple-600",
      route: "/reddit"
      color: 'from-red-500 to-red-600',
      route: '/reddit',
      group: 'core',
      requiredMilestones: ['connectedReddit', 'selectedCommunities'],
    },
  ];

  const growthActionCards: ActionCardConfig[] = [
    {
      id: "generate-caption",
      title: "Generate Caption",
      description: "AI-powered content",
      id: 'generate-caption',
      title: 'Generate Caption',
      description: 'AI-crafted copy tuned for Reddit engagement',
      icon: <Sparkles className="h-6 w-6" />,
      color: "from-blue-500 to-blue-600",
      route: "/caption-generator"
      color: 'from-blue-500 to-blue-600',
      route: '/caption-generator',
      group: 'growth',
      requiredMilestones: ['selectedCommunities'],
    },
    {
      id: "protect-image",
      title: "Protect Image",
      description: "Image/Video protection",
      id: 'protect-image',
      title: 'Protect Image',
      description: 'Guard your media before posting',
      icon: <Shield className="h-6 w-6" />,
      color: "from-green-500 to-green-600",
      route: "/imageshield"
    },
    {
      id: "find-subreddits",
      title: "Find Subreddits",
      description: "Best communities for you",
      icon: <Target className="h-6 w-6" />,
      color: "from-orange-500 to-orange-600",
      route: "/communities"
      color: 'from-green-500 to-green-600',
      route: '/imageshield',
      group: 'growth',
      requiredMilestones: ['selectedCommunities'],
    },
  ];

  const secondaryActionCards: ActionCardConfig[] = [
    {
      id: "scan-takedowns",
      title: "Scan Takedowns",
      description: "Find leaked content",
      id: 'scan-takedowns',
      title: 'Scan Takedowns',
      description: 'Detect leaked or stolen content across the web',
      icon: <Scale className="h-6 w-6" />,
      color: "from-red-500 to-red-600",
      color: 'from-red-500 to-red-600',
      route: null,
      comingSoon: true
      comingSoon: true,
      group: 'secondary',
      requiredMilestones: ['createdFirstPost'],
      requiredTier: 'pro',
    },
    {
      id: "view-analytics",
      title: "View Analytics",
      description: "Performance insights",
      id: 'view-analytics',
      title: 'View Analytics',
      description: 'Performance and earnings insights',
      icon: <BarChart3 className="h-6 w-6" />,
      color: "from-indigo-500 to-indigo-600",
      color: 'from-indigo-500 to-indigo-600',
      route: null,
      comingSoon: true
      comingSoon: true,
      group: 'secondary',
      requiredMilestones: ['createdFirstPost'],
      requiredTier: 'starter',
    },
    {
      id: "tax-tracker",
      title: "Tax Tracker",
      description: "Track expenses",
      id: 'tax-tracker',
      title: 'Tax Tracker',
      description: 'Track revenue and write-offs in one place',
      icon: <Calculator className="h-6 w-6" />,
      color: "from-teal-500 to-teal-600",
      route: "/tax-tracker"
      color: 'from-teal-500 to-teal-600',
      route: '/tax-tracker',
      group: 'secondary',
      requiredMilestones: ['createdFirstPost'],
      requiredTier: 'starter',
    },
    {
      id: "pro-perks",
      title: "ProPerks",
      description: "Exclusive deals",
      id: 'pro-perks',
      title: 'Pro Perks',
      description: 'Unlock partner discounts and revenue boosters',
      icon: <Gift className="h-6 w-6" />,
      color: "from-pink-500 to-pink-600",
      color: 'from-pink-500 to-pink-600',
      route: null,
      premium: true
    }
      group: 'secondary',
      requiredMilestones: ['createdFirstPost'],
      requiredTier: 'pro',
      premium: true,
    },
  ];

  const handleCardClick = (card: typeof actionCards[0]) => {
  const formatTierLabel = (tier?: UserTier) => {
    if (!tier) {
      return 'Upgrade';
    }

    return tier.charAt(0).toUpperCase() + tier.slice(1);
  };

  const handleMilestoneComplete = (milestone: OnboardingMilestone) => {
    setOnboardingProgress((previous) => {
      if (previous[milestone]) {
        return previous;
      }

      return { ...previous, [milestone]: true };
    });
  };

  const handleCardClick = (card: ActionCardConfig) => {
    if (!hasTierForCard(card)) {
      toast({
        title: 'Upgrade required',
        description: `Upgrade to ${formatTierLabel(card.requiredTier)} to unlock ${card.title}.`,
      });
      return;
    }

    if (card.premium && !isPremium && !isAdminUser) {
      toast({
        title: 'Premium feature',
        description: 'Upgrade to Pro to access this feature.',
      });
      return;
    }

    if (card.route) {
      setLocation(card.route);
    } else if (card.comingSoon) {
      toast({
        title: "Coming Soon",
        description: `${card.title} feature is being developed.`,
      });
    } else if (card.premium && !isPremium) {
      toast({
        title: "Premium Feature",
        description: "Upgrade to Pro to access this feature.",
        title: 'Coming soon',
        description: `${card.title} is being finalized for release.`,
      });
    }

    if (card.completeMilestone) {
      handleMilestoneComplete(card.completeMilestone);
    }
  };

  const handleQuickAction = () => {
    toast({
      title: "Quick Actions",
      description: "Quick action menu opening...",
    });
  };

  const handleCommandCenter = () => {
    setSidebarOpen(!sidebarOpen);
  };

  const handleTaskFlow = () => {
    toast({
      title: "Task Flow",
      description: "Guided workflow starting...",
    });
  };

  const renderActionCard = (card: ActionCardConfig) => {
    const milestoneKey = milestoneByCardId[card.id];
    const isComplete = milestoneKey ? onboardingProgress[milestoneKey] : false;
    const lockedByTier = !hasTierForCard(card);
    const lockedByPremium = card.premium && !isPremium && !isAdminUser;
    const isDisabled = card.comingSoon || lockedByTier || lockedByPremium;

    return (
      <Card
        key={card.id}
        className={cn(
          'bg-gray-800 border-gray-700 transition-all',
          isDisabled ? 'cursor-not-allowed opacity-70' : 'cursor-pointer hover:scale-105',
          selectedCard === card.id && !isDisabled && 'ring-2 ring-purple-500'
        )}
        onClick={() => handleCardClick(card)}
        onMouseEnter={() => setSelectedCard(card.id)}
        onMouseLeave={() => setSelectedCard(null)}
      >
        <CardContent className="p-6">
          <div
            className={cn(
              'w-12 h-12 rounded-lg bg-gradient-to-br flex items-center justify-center mb-4',
              card.color
            )}
          >
            {card.icon}
          </div>
          <h3 className="text-white font-semibold mb-1">{card.title}</h3>
          <p className="text-gray-400 text-sm">{card.description}</p>
          <div className="flex flex-wrap gap-2 mt-3">
            {card.comingSoon && <Badge className="bg-gray-700 text-gray-200">Coming soon</Badge>}
            {isComplete && (
              <Badge className="bg-green-500/10 text-green-300 border-green-400/60">Complete</Badge>
            )}
            {lockedByTier && (
              <Badge variant="outline" className="text-orange-200 border-orange-500/60">
                {formatTierLabel(card.requiredTier)}
              </Badge>
            )}
            {card.premium && !lockedByTier && lockedByPremium && (
              <Badge variant="outline" className="text-purple-200 border-purple-400/60">
                Pro
              </Badge>
            )}
          </div>
        </CardContent>
      </Card>
    );
  };


  return (
    <div className="min-h-screen bg-gradient-purple">
      {/* Sidebar Overlay */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-40"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Sidebar */}
      <aside
        className={cn(
          "fixed left-0 top-0 h-full w-[280px] bg-gray-900 border-r border-gray-800 z-50 transform transition-transform duration-300",
          sidebarOpen ? "translate-x-0" : "-translate-x-full"
        )}
      >
        <div className="p-6">
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center">
                <img 
                  src="/logo.png" 
                  alt="ThottoPilot" 
@@ -431,106 +752,175 @@ export function ModernDashboard({ isRedditConnected = false, user, userTier = 'f
                onClick={handleCommandCenter}
                className="bg-gray-800 hover:bg-gray-700 text-white"
              >
                <Command className="h-4 w-4 mr-2" />
                Command Center
              </Button>
              <Button
                onClick={handleTaskFlow}
                className="bg-gray-800 hover:bg-gray-700 text-white"
              >
                <ListChecks className="h-4 w-4 mr-2" />
                Task Flow
              </Button>
            </div>
            <div className="flex gap-3">
              <Button variant="ghost" size="icon" className="text-white">
                <Bell className="h-5 w-5" />
              </Button>
              <Button variant="ghost" size="icon" className="text-white">
                <Settings className="h-5 w-5" />
              </Button>
            </div>
          </div>
        </div>

        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-2">
            {getGreeting()}, {displayName}! 👋
          </h1>
          <p className="text-xl text-gray-300">
            {dashboardPrompt}
          </p>
        </div>
        {/* Onboarding Hero */}
        <Card className="mb-8 bg-gray-900 border border-purple-500/40 shadow-xl">
          <CardContent className="p-6 md:p-8 flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
            <div className="max-w-2xl">
              <Badge variant="outline" className="border-purple-400/60 text-purple-200 bg-purple-500/10 mb-3">
                {heroContent.stageLabel}
              </Badge>
              <h1 className="text-3xl md:text-4xl font-bold text-white">{heroContent.title}</h1>
              <p className="text-lg text-gray-300 mt-3">{heroContent.description}</p>
              <p className="text-sm text-gray-400 mt-2">{dashboardPrompt}</p>
              <div className="flex flex-wrap gap-2 mt-4">
                {progressSteps.map((step) => (
                  <div
                    key={step.label}
                    className={cn(
                      'flex items-center gap-2 px-3 py-1.5 rounded-full border text-sm',
                      step.complete
                        ? 'border-green-500/60 text-green-200 bg-green-500/10'
                        : 'border-gray-700 text-gray-400 bg-gray-800/80'
                    )}
                  >
                    {step.complete ? (
                      <CheckCircle2 className="h-4 w-4 text-green-300" />
                    ) : (
                      <Clock className="h-4 w-4 text-gray-400" />
                    )}
                    <span>{step.label}</span>
                  </div>
                ))}
              </div>
            </div>
            {heroContent.ctaLabel && heroActionCard && (
              <Button
                className="bg-purple-600 hover:bg-purple-700 text-white w-full sm:w-auto"
                onClick={() => handleCardClick(heroActionCard)}
              >
                {heroContent.ctaLabel}
                <ChevronRight className="h-4 w-4 ml-2" />
              </Button>
            )}
          </CardContent>
        </Card>

        {/* Stats Row */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {statsCards.map((stat) => (
            <Card key={stat.label} className="bg-gray-800 border-gray-700">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-2">
                  <span className={stat.color}>{stat.icon}</span>
                  <span className="text-2xl font-bold text-white">{stat.value}</span>
                </div>
                <p className="text-gray-400 text-sm">{stat.label}</p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Action Cards Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          {actionCards.map((card) => (
            <Card
              key={card.id}
              className={cn(
                "bg-gray-800 border-gray-700 cursor-pointer transition-all hover:scale-105",
                selectedCard === card.id && "ring-2 ring-purple-500"
              )}
              onClick={() => handleCardClick(card)}
              onMouseEnter={() => setSelectedCard(card.id)}
              onMouseLeave={() => setSelectedCard(null)}
            >
              <CardContent className="p-6">
                <div className={cn(
                  "w-12 h-12 rounded-lg bg-gradient-to-br flex items-center justify-center mb-4",
                  card.color
                )}>
                  {card.icon}
        {/* Guided Action Sections */}
        <div className="space-y-8 mb-8">
          <section>
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-xl font-semibold text-white">Core Reddit loop</h2>
                <p className="text-sm text-gray-400">Stay focused on the connect → discover → post flow.</p>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {coreCardsToRender.map(renderActionCard)}
            </div>
          </section>

          {showGrowthSection && (
            <section>
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-xl font-semibold text-white">Boost every drop</h3>
                  <p className="text-sm text-gray-400">Enhance captions and protect media before you post.</p>
                </div>
                <h3 className="text-white font-semibold mb-1">{card.title}</h3>
                <p className="text-gray-400 text-sm">{card.description}</p>
                {card.comingSoon && (
                  <Badge className="mt-2" variant="outline">Coming Soon</Badge>
                )}
                {card.premium && !isPremium && (
                  <Badge className="mt-2" variant="outline">Pro</Badge>
                )}
              </CardContent>
            </Card>
          ))}
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {growthCardsToRender.map(renderActionCard)}
              </div>
            </section>
          )}

          {canAccessAdvancedTools && (
            <section>
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-xl font-semibold text-white">More tools</h3>
                  <p className="text-sm text-gray-400">Unlock analytics, takedown scanning, and finance workflows.</p>
                </div>
                <Button
                  variant="outline"
                  className="border-purple-500/60 text-purple-200 hover:bg-purple-600/20"
                  onClick={() => setShowMoreTools((value) => !value)}
                >
                  {showMoreTools ? 'Hide more tools' : 'Show more tools'}
                  <ChevronRight
                    className={cn('h-4 w-4 ml-2 transition-transform', showMoreTools && 'rotate-90')}
                  />
                </Button>
              </div>
              {showMoreTools ? (
                advancedCardsToRender.length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    {advancedCardsToRender.map(renderActionCard)}
                  </div>
                ) : (
                  <Card className="bg-gray-800 border-gray-700">
                    <CardContent className="p-6 text-gray-300 text-sm">
                      Upgrade your plan to unlock analytics, takedown scanning, and finance workflows.
                    </CardContent>
                  </Card>
                )
              ) : (
                <Card className="bg-gray-800 border-gray-700">
                  <CardContent className="p-6 text-gray-300 text-sm">
                    Tap "Show more tools" to explore takedown scanning, analytics, and finance workflows.
                  </CardContent>
                </Card>
              )}
            </section>
          )}
        </div>

        {/* Bottom Sections */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Recent Gallery */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white">Recent Gallery</CardTitle>
              <CardDescription className="text-gray-400">
                Your latest uploads
              </CardDescription>
            </CardHeader>
            <CardContent>
              {activityLoading ? (
                <div className="grid grid-cols-4 gap-2">
                  {Array.from({ length: 4 }).map((_, i) => (
                    <div key={i} className="aspect-square bg-gray-700 rounded-lg animate-pulse" />
                  ))}
                </div>
              ) : showGalleryEmptyState ? (
                <div className="text-center py-8 text-gray-400">
                  <ImageIcon className="h-12 w-12 mx-auto mb-2 opacity-50" />
                  <p>No recent media</p>
                  <p className="text-sm">Upload some content to see it here</p>
                </div>
