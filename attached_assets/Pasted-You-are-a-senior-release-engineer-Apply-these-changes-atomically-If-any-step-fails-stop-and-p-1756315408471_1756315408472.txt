You are a senior release engineer. Apply these changes **atomically**. If any step fails, stop and print the error and context. Use TypeScript (.ts) where appropriate. Keep coding style consistent with existing files. Then run the verification suite at the end.

## GOALS
1) Auto ImageShield in upload pipeline (EXIF strip; watermark ON for Free; Starter/Pro can disable/change watermark).
2) Caption “Re-roll” endpoint that reuses existing caption pipelines.
3) “Quick Post” endpoint: takes protected image + caption + chosen subreddits; validates rules; posts now or enqueues.
4) Automation Portal skeleton (React) with tabs: Schedules, Queue, Runs/Logs, Settings.

## PRE-FLIGHT
- Confirm Node 20+, TypeScript build OK.
- Ensure env vars exist (at least): DATABASE_URL, STORAGE_BUCKET/S3 (or your current storage), STRIPE_* (if present), REDDIT_OAUTH_*. Do NOT fail if Stripe/Reddit missing; only warn.
- Confirm tsconfig path aliases (@shared/*, @server/*) and that `tsc-alias` runs post-build.

Run:
- `node -v`
- `npm run build || true`

## 1) SERVER – IMAGE PROTECTION

Create file: `server/lib/imageshield.ts`

```ts
import sharp from "sharp";

export type ShieldOptions = {
  blurSigma?: number; // e.g. 0 = none, 3 = light, 6 = medium
  watermark?: { text: string; opacity?: number; size?: number; margin?: number } | null;
  stripExif?: boolean;
};

export async function protectImage(input: Buffer, opts: ShieldOptions): Promise<Buffer> {
  const base = sharp(input, { failOn: "none" });
  const meta = await base.metadata();
  let img = base;

  // Blur (preview safety)
  if (opts.blurSigma && opts.blurSigma > 0) {
    img = img.blur(opts.blurSigma);
  }

  // Always strip metadata if requested
  if (opts.stripExif !== false) {
    img = img.withMetadata({ exif: undefined, icc: undefined, iptc: undefined, xmp: undefined });
  }

  // Render watermark if provided
  if (opts.watermark && opts.watermark.text) {
    const wmSize = opts.watermark.size ?? 28;
    const margin = opts.watermark.margin ?? 24;
    const opacity = Math.max(0, Math.min(1, opts.watermark.opacity ?? 0.35));

    const svg = Buffer.from(
      `<svg xmlns="http://www.w3.org/2000/svg" width="${(meta.width ?? 1000)}" height="${(meta.height ?? 1000)}">
         <style>
           .wm { fill: rgba(255,255,255,${opacity}); font-size: ${wmSize}px; font-family: Arial, sans-serif; }
         </style>
         <text x="${(meta.width ?? 1000) - margin}" y="${(meta.height ?? 1000) - margin}" text-anchor="end" class="wm">${opts.watermark.text}</text>
       </svg>`
    );
    img = img.composite([{ input: svg, gravity: "southwest" }]);
  }

  return await img.jpeg({ quality: 92 }).toBuffer();
}
