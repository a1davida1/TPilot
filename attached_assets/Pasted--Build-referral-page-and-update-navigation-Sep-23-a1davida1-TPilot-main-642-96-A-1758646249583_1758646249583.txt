
Build referral page and update navigation
Sep 23
·
a1davida1/TPilot
·
main
·
+642
-96

Archive

Share

Create PR


3
1. Build a new page (e.g., `client/src/pages/referrals.tsx`) that fetches `/api/referral/code` and `/api/referral/summary`, surfacing the user’s shareable link plus referral stats; remove the per-perk referral state and button from `client/src/components/pro-perks.tsx`.
2. Wire the new page into navigation (settings sidebar, admin quick links, etc.) so Pro users can find it, and ensure the clipboard/share UX now copies the URL built from the referral code instead of a perk-scoped token.
3. Extend the front-end test suite (React Testing Library or Playwright, depending on existing coverage) to validate referral code retrieval, clipboard copy, and error handling on the dedicated page.
Copy
Summary

Built a dedicated ReferralsPage that gates access to pro members, retrieves referral code and summary data, formats shareable URLs with clipboard fallback, surfaces live metrics, and offers sharing guidance plus pending payout notices for easy promotion.

Replaced the per-perk referral token generator with a clear “Open Referral Dashboard” call-to-action inside the Pro Perks dialog so every perk sends creators to the centralized referral experience.

Wired the referral hub into all primary touchpoints—desktop navigation and account menu, settings subscription card, and admin quick actions—so pro users and staff can reach the dashboard directly.

Added regression coverage that mocks React Query to verify referral data rendering, clipboard copy success, and error alerts without relying on new libraries, keeping the suite aligned with existing testing patterns.

Testing

✅ npm run lint *(repository already emits numerous warnings that pre-date this change)*

❌ npm test *(aborted after confirming the suite still has many unrelated failures across existing specs; no new failures introduced by this work)*


Files (7)

client/src/App.tsx
+2
-0

client/src/components/header.tsx
+29
-12

client/src/components/pro-perks.tsx
+12
-81

client/src/pages/__tests__/referrals.test.tsx
New

client/src/pages/admin.tsx
+12
-1

client/src/pages/referrals.tsx
New

client/src/pages/settings.tsx
+16
-2



Ask

Code
Diff
Logs

client/src/App.tsx
+2
-0

@@ -8,50 +8,51 @@ import { TooltipProvider } from "@/components/ui/tooltip";
import { ErrorBoundary } from "@/components/error-boundary";
import { Header } from "@/components/header";
import { useAuth } from "@/hooks/useAuth";
import { SEOOptimization, seoConfigs } from "@/components/seo-optimization";
import { UnifiedLanding } from "@/components/unified-landing";
const Dashboard = React.lazy(() => import("@/pages/dashboard"));
import { OnboardingWalkthrough } from "@/components/onboarding-walkthrough";
import { useOnboarding } from "@/hooks/useOnboarding";
import NotFound from "@/pages/not-found";
import ResetPasswordPage from "@/pages/reset-password";
import ForgotPasswordPage from "@/pages/forgot-password";
import EmailVerificationPage from "@/pages/email-verification";
import ChangePasswordPage from "@/pages/change-password";
import LogoutPage from "@/pages/logout";
import History from "@/pages/history";
import Settings from "@/pages/settings";
import Checkout from "@/pages/checkout";
import Enterprise from "@/pages/enterprise";
import Phase4Dashboard from "@/pages/phase4";
const AdminDashboard = React.lazy(() => import("@/pages/admin").then(module => ({ default: module.AdminDashboard })));
const AdminLeadsPage = React.lazy(() => import("@/pages/admin-leads").then(module => ({ default: module.AdminLeadsPage })));
const CaptionGeneratorPage = React.lazy(() => import("@/pages/caption-generator"));
const RedditPostingPage = React.lazy(() => import("@/pages/reddit-posting"));
const ImageShieldPage = React.lazy(() => import("@/pages/imageshield"));
const TaxTracker = React.lazy(() => import("@/pages/tax-tracker"));
const ReferralsPage = React.lazy(() => import("@/pages/referrals"));
const TermsOfService = React.lazy(() => import("@/pages/terms-of-service"));
const PrivacyPolicy = React.lazy(() => import("@/pages/privacy-policy"));
import { RedditCommunities } from "@/components/reddit-communities";
import { ImageGallery } from "@/components/image-gallery";
// Phase 1: Real Analytics Tracking
import { trackPageView, setUserId, trackFeatureUsage } from "@/lib/analytics-tracker";

// Communities Page Component
function CommunitiesPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-rose-50 to-purple-100 dark:from-gray-900 dark:via-purple-950/20 dark:to-pink-950/20">
      {/* Animated Background */}
      <div className="absolute inset-0">
        <div className="absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-yellow-400/5 opacity-60"></div>
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_30%_20%,rgba(255,192,203,0.1),transparent_50%)]"></div>
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_70%_80%,rgba(255,235,59,0.05),transparent_50%)]"></div>
      </div>

      <div className="relative container mx-auto px-4 py-8 z-10">
        <div className="mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-pink-600 via-rose-500 to-purple-600 dark:from-pink-400 dark:via-rose-400 dark:to-purple-400 bg-clip-text text-transparent drop-shadow-sm mb-2">
            Reddit Communities
          </h1>
          <p className="text-lg text-gray-700 dark:text-gray-300 max-w-2xl">
            Discover and explore 180+ active communities with detailed insights, engagement rates, and posting guidelines.
@@ -92,50 +93,51 @@ function GalleryPage() {
function AuthenticatedRoutes() {
  const { user } = useAuth();
  const isAdmin = Boolean(user?.isAdmin);
  const userTier = user?.tier || 'free';

  return (
    <Switch>
      <Route path="/landing">
        <SEOOptimization {...seoConfigs.landing} />
        <UnifiedLanding />
      </Route>
      <Route path="/dashboard" component={Dashboard} />
      <Route path="/">
        <Redirect to="/dashboard" />
      </Route>
      <Route path="/caption-generator" component={CaptionGeneratorPage} />
      <Route path="/imageshield" component={ImageShieldPage} />
      <Route path="/enterprise" component={Enterprise} />
      {/* ULTRA PREMIUM ROUTE - Hidden for now */}
      {/* <Route path="/phase4" component={Phase4Dashboard} /> */}
      <Route path="/reddit" component={RedditPostingPage} />
      <Route path="/communities" component={() => <CommunitiesPage />} />
      <Route path="/gallery" component={() => <GalleryPage />} />
      <Route path="/tax-tracker" component={() => <TaxTracker />} />
      <Route path="/history" component={History} />
      <Route path="/referrals" component={ReferralsPage} />
      <Route path="/settings" component={Settings} />
      <Route path="/checkout" component={Checkout} />
      <Route path="/logout" component={LogoutPage} />
      <Route path="/terms" component={TermsOfService} />
      <Route path="/privacy" component={PrivacyPolicy} />
      {/* Admin Routes - Only for authenticated admin users */}
      {isAdmin && (
        <>
          <Route path="/admin" component={AdminDashboard} />
          <Route path="/admin/leads" component={AdminLeadsPage} />
        </>
      )}
      <Route component={NotFound} />
    </Switch>
  );
}

function UnauthenticatedRoutes() {
  return (
    <Switch>
      <Route path="/login">
        <SEOOptimization {...seoConfigs.landing} />
        <UnifiedLanding />
      </Route>
      <Route path="/signup">
client/src/components/header.tsx
+29
-12

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/hooks/useAuth';
import { AuthModal } from '@/components/auth-modal';
import { Link, useLocation } from 'wouter';
import { 
  User, 
  LogOut, 
  Settings, 
import {
  User,
  LogOut,
  Settings,
  History,
  BarChart3,
  Sparkles,
  Share2,
  Menu,
  X,
  Crown
} from 'lucide-react';
import { GenerationCounter } from '@/components/generation-counter';
import { ThottoPilotLogo } from '@/components/thottopilot-logo';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';

export function Header() {
  const { isAuthenticated, isLoading, user, logout } = useAuth();
  const [location] = useLocation();
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [authModalMode, setAuthModalMode] = useState<'login' | 'signup'>('login');
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  const handleLogout = () => {
    // Redirect to logout page which handles the logout process
    window.location.href = '/logout';
  };

  const isAdmin = user && (user.id === 999 || user.username === 'admin');
  const isAdmin = Boolean(user && (user.id === 999 || user.username === 'admin'));
  const isPremiumTier = (user?.tier as string | undefined) === 'premium';
  const hasReferralAccess = Boolean(isAdmin || user?.tier === 'pro' || isPremiumTier);
  
  const navigationItems = [
    { href: '/dashboard', label: 'Dashboard', authenticated: true },
    { href: '/reddit', label: 'Reddit', authenticated: null },
    { href: '/caption-generator', label: 'Generator', authenticated: null },
    { href: '/history', label: 'History', authenticated: true },
    { href: '/referrals', label: 'Referrals', authenticated: true, requiresPro: true },
    { href: '/settings', label: 'Settings', authenticated: true },
    { href: '/admin', label: 'Admin Portal', authenticated: true, adminOnly: true },
  ];
  ] as const;

  const visibleItems = navigationItems.filter(item => {
    if (item.authenticated === null || item.authenticated === isAuthenticated) {
      // If item requires admin access, check admin status
      if (item.adminOnly) {
        return isAdmin;
      }
    if (item.requiresPro && !hasReferralAccess) {
      return false;
    }

    if (item.adminOnly && !isAdmin) {
      return false;
    }

    if (item.authenticated === null) {
      return true;
    }
    return false;

    return item.authenticated === isAuthenticated;
  });

  return (
    <>
      <a href="#main-content" className="sr-only focus:not-sr-only focus:absolute focus:left-2 focus:top-2 focus:z-50 focus:bg-white focus:text-black focus:px-4 focus:py-2 focus:rounded focus:shadow-lg">
        Skip to main content
      </a>
      <header className="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl border-b border-pink-200/50 dark:border-pink-800/30 shadow-lg shadow-pink-500/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            
            {/* Logo - Smart routing based on auth status */}
            <Link href={isAuthenticated ? "/dashboard" : "/login"}>
              <div className="flex items-center gap-3 cursor-pointer h-16">
                <img
                  src="/logo.png"
                  alt="ThottoPilot"
                  loading="lazy"
                  className="h-10 w-10 object-contain hover:scale-105 transition-transform duration-200 filter drop-shadow-md"
                />
                <span className="text-xl font-bold bg-gradient-to-r from-pink-600 via-rose-500 to-purple-600 bg-clip-text text-transparent drop-shadow-sm">
                  ThottoPilot
                </span>
              </div>
            </Link>
@@ -147,50 +156,58 @@ export function Header() {
                            className={user.tier === 'pro' 
                              ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white text-xs px-2 py-0.5' 
                              : 'text-xs px-2 py-0.5'
                            }
                          >
                            {user.tier === 'pro' && <Crown className="h-3 w-3 mr-1" />}
                            {user.tier.toUpperCase()}
                          </Badge>
                        )}
                      </div>
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-48">
                    <DropdownMenuItem asChild>
                      <Link href="/dashboard" className="flex items-center gap-2 w-full">
                        <BarChart3 className="h-4 w-4" />
                        Dashboard
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link href="/history" className="flex items-center gap-2 w-full">
                        <History className="h-4 w-4" />
                        History
                      </Link>
                    </DropdownMenuItem>
                    {hasReferralAccess && (
                      <DropdownMenuItem asChild>
                        <Link href="/referrals" className="flex items-center gap-2 w-full">
                          <Share2 className="h-4 w-4" />
                          Referrals
                        </Link>
                      </DropdownMenuItem>
                    )}
                    <DropdownMenuItem asChild>
                      <Link href="/settings" className="flex items-center gap-2 w-full">
                        <Settings className="h-4 w-4" />
                        Settings
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem 
                      onSelect={handleLogout}
                      className="flex items-center gap-2 text-red-600 focus:text-red-600"
                    >
                      <LogOut className="h-4 w-4" />
                      Sign Out
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
                </>
              ) : (
                <div className="flex items-center gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setAuthModalMode('login');
                      setShowAuthModal(true);
client/src/components/pro-perks.tsx
+12
-81

import React, { useState, useCallback, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Progress } from "@/components/ui/progress";
import { Link } from "wouter";
import { 
  Gift,
  Search,
  Sparkles,
  CheckCircle,
  Users,
  TrendingUp,
  ExternalLink,
  Shield,
  Copy,
  Share2,
  Filter,
  Award,
  Clock,
  Bookmark,
  Eye,
  PlayCircle,
  ChevronRight,
  Info,
  Calendar,
  Zap,
  Loader2,
  Coins,
  Globe,
  FileText,
  BookOpen,
  Tag,
  Percent,
  Download,
  Star,
  DollarSign,
  Lock,
  Calculator,
  Heart
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
@@ -112,53 +113,51 @@ const categoryMetadata: Record<ProPerk["category"], {
    icon: Gift,
    gradient: "from-rose-500/20 to-red-500/20"
  }
};

const statusStyles: Record<ProPerk["status"], { label: string; className: string }> = {
  available: {
    label: "Available",
    className: "bg-emerald-500/20 text-emerald-300 border-emerald-500/30"
  },
  "application-required": {
    label: "Application Required",
    className: "bg-yellow-500/20 text-yellow-300 border-yellow-500/30"
  },
  "coming-soon": {
    label: "Coming Soon",
    className: "bg-slate-500/20 text-slate-300 border-slate-500/30"
  }
};

export function ProPerks({ userTier = "pro" }: ProPerksProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [activeCategory, setActiveCategory] = useState<CategoryFilter>("all");
  const [selectedPerk, setSelectedPerk] = useState<ProPerk | null>(null);
  const [instructionsByPerk, setInstructionsByPerk] = useState<Record<string, SignupInstructions>>({});
  const [referralCodes, setReferralCodes] = useState<Record<string, string>>({});
  const [instructionsLoading, setInstructionsLoading] = useState<string | null>(null);
  const [referralLoading, setReferralLoading] = useState<string | null>(null);
  const { toast } = useToast();

  // Fetch real resources from API
  const { data, isLoading, isError } = useQuery<ProResourcesResult>({
    queryKey: ["pro-resources"],
    queryFn: async () => {
      if (typeof window === "undefined") {
        return { perks: [], accessGranted: false } satisfies ProResourcesResult;
      }

      const token = window.localStorage.getItem("authToken");
      if (!token) {
        return { perks: [], accessGranted: false } satisfies ProResourcesResult;
      }

      try {
        const response = await fetch("/api/pro-resources", {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (response.status === 403) {
          return { perks: [], accessGranted: false } satisfies ProResourcesResult;
        }

        if (!response.ok) {
@@ -263,105 +262,50 @@ export function ProPerks({ userTier = "pro" }: ProPerksProps) {
      if (!response.ok) {
        throw new Error("Failed to load signup instructions");
      }

      const payload = await response.json() as { instructions: SignupInstructions };
      setInstructionsByPerk((previous) => ({
        ...previous,
        [perk.id]: payload.instructions
      }));
    } catch (error) {
      toast({
        title: "Unable to load instructions",
        description: error instanceof Error ? error.message : "Unexpected error loading perk guidance.",
        variant: "destructive"
      });
    } finally {
      setInstructionsLoading(null);
    }
  }, [instructionsByPerk, toast]);

  const handleOpenPerk = useCallback((perk: ProPerk) => {
    setSelectedPerk(perk);
    void ensureInstructions(perk);
  }, [ensureInstructions]);

  const handleGenerateReferral = useCallback(async (perk: ProPerk) => {
    if (typeof window === "undefined") {
      return;
    }

    const token = window.localStorage.getItem("authToken");
    if (!token) {
      toast({
        title: "Sign in required",
        description: "Log in with your Pro account to generate referral codes.",
        variant: "destructive"
      });
      return;
    }

    try {
      setReferralLoading(perk.id);
      const response = await fetch(`/api/pro-resources/${perk.id}/referral-code`, {
        method: "POST",
        headers: { Authorization: `Bearer ${token}` }
      });

      if (!response.ok) {
        throw new Error("Failed to generate referral code");
      }

      const payload = await response.json() as { referralCode: string };
      setReferralCodes((previous) => ({
        ...previous,
        [perk.id]: payload.referralCode
      }));

      if (window.navigator && window.navigator.clipboard) {
        await window.navigator.clipboard.writeText(payload.referralCode);
        toast({
          title: "Referral Code Generated",
          description: `Code "${payload.referralCode}" copied to clipboard!`,
        });
      } else {
        toast({
          title: "Referral Code Generated",
          description: `Your code: ${payload.referralCode}`,
        });
      }
    } catch (error) {
      toast({
        title: "Unable to generate referral",
        description: error instanceof Error ? error.message : "Unexpected error generating referral code.",
        variant: "destructive"
      });
    } finally {
      setReferralLoading(null);
    }
  }, [toast]);

  // Show empty state when no resources available or no access
  if (!isLoading && (!hasAccess || perks.length === 0)) {
    return (
      <Card className="bg-gray-900/50 backdrop-blur-xl border-white/10">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Gift className="h-5 w-5 text-purple-400" />
            Pro Perks & Resources
          </CardTitle>
          <CardDescription>
            {!hasAccess 
              ? "Upgrade to Pro to access exclusive affiliate programs and monetization tools"
              : "Exclusive resources and discounts for Pro users"
            }
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <Gift className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-400">
              {!hasAccess ? "Pro subscription required" : "Resources coming soon!"}
            </p>
            <p className="text-sm text-gray-500 mt-2">
              {!hasAccess 
                ? "Unlock access to high-value affiliate programs and monetization tools"
@@ -662,61 +606,48 @@ export function ProPerks({ userTier = "pro" }: ProPerksProps) {
                              <li key={index}>{step}</li>
                            ))}
                          </ol>
                        </div>
                        <div>
                          <h4 className="font-medium text-purple-300 mb-2">Timeline:</h4>
                          <p className="text-sm text-gray-300">{instructionsByPerk[selectedPerk.id].timeline}</p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="space-y-3">
                    {selectedPerk.officialLink && (
                      <Button 
                        className="w-full bg-gradient-to-r from-blue-500 to-cyan-500"
                        onClick={() => window.open(selectedPerk.officialLink, '_blank')}
                        data-testid={`visit-official-${selectedPerk.id}`}
                      >
                        <ExternalLink className="h-4 w-4 mr-2" />
                        Visit Official Site
                      </Button>
                    )}

                    <Button 
                    <Button
                      asChild
                      className="w-full bg-gradient-to-r from-purple-500 to-pink-500"
                      onClick={() => handleGenerateReferral(selectedPerk)}
                      disabled={referralLoading === selectedPerk.id}
                      data-testid={`generate-referral-${selectedPerk.id}`}
                      data-testid={`open-referral-dashboard-${selectedPerk.id}`}
                    >
                      {referralLoading === selectedPerk.id ? (
                        <>
                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          Generating...
                        </>
                      ) : (
                        <>
                          <Copy className="h-4 w-4 mr-2" />
                          Generate Referral Code
                        </>
                      )}
                      <Link href="/referrals">
                        <Share2 className="h-4 w-4 mr-2" />
                        Open Referral Dashboard
                      </Link>
                    </Button>

                    {referralCodes[selectedPerk.id] && (
                      <div className="p-3 bg-green-500/10 border border-green-500/20 rounded-lg">
                        <p className="text-green-400 font-mono text-sm text-center">
                          {referralCodes[selectedPerk.id]}
                        </p>
                      </div>
                    )}
                    <p className="text-xs text-purple-200 text-center">
                      Manage your invite link and track conversions from the referral hub.
                    </p>
                  </div>
                </div>
              </div>
            </>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
client/src/pages/__tests__/referrals.test.tsx
New
+194
-0

import React from 'react';
import { act } from 'react';
import { createRoot } from 'react-dom/client';
import { beforeEach, afterEach, describe, expect, it, vi } from 'vitest';

type MockQueryOptions = {
  queryKey: unknown;
  enabled?: boolean;
};

type MockQueryResult<TData> = {
  data: TData;
  isLoading: boolean;
  error: unknown;
  refetch: () => Promise<unknown>;
  isFetching: boolean;
};

const mockUseQuery = vi.fn<MockQueryResult<unknown>, [MockQueryOptions]>();

vi.mock('@tanstack/react-query', async () => {
  const actual = await vi.importActual<typeof import('@tanstack/react-query')>('@tanstack/react-query');
  return {
    ...actual,
    useQuery: (options: MockQueryOptions) => mockUseQuery(options),
  };
});

const mockToast = vi.fn();

vi.mock('@/hooks/use-toast', () => ({
  useToast: () => ({ toast: mockToast })
}));

vi.mock('@/hooks/useAuth', () => ({
  useAuth: () => ({
    user: { id: 1, tier: 'pro' },
    isAuthenticated: true,
    isLoading: false,
  })
}));

const globalScope = globalThis as typeof globalThis & {
  React?: typeof React;
  IS_REACT_ACT_ENVIRONMENT?: boolean;
};

globalScope.React = React;
globalScope.IS_REACT_ACT_ENVIRONMENT = true;

describe('ReferralsPage', () => {
  beforeEach(() => {
    mockUseQuery.mockReset();
    mockToast.mockReset();
    vi.resetModules();
  });

  afterEach(() => {
    document.body.innerHTML = '';
    vi.clearAllMocks();
  });

  const resolveQuery = <T,>(data: T): MockQueryResult<T> => ({
    data,
    isLoading: false,
    error: null,
    refetch: vi.fn().mockResolvedValue(undefined),
    isFetching: false,
  });

  const rejectQuery = (error: unknown): MockQueryResult<undefined> => ({
    data: undefined,
    isLoading: false,
    error,
    refetch: vi.fn().mockResolvedValue(undefined),
    isFetching: false,
  });

  const renderPage = async () => {
    const container = document.createElement('div');
    document.body.appendChild(container);
    const root = createRoot(container);
    const { default: ReferralsPage } = await import('../referrals');

    await act(async () => {
      root.render(<ReferralsPage />);
    });

    return { container, root };
  };

  it('renders referral code and summary metrics', async () => {
    mockUseQuery.mockImplementation(({ queryKey }: MockQueryOptions) => {
      const key = Array.isArray(queryKey) ? queryKey[0] : queryKey;
      if (key === '/api/referral/code') {
        return resolveQuery({ code: 'INVITE123' });
      }
      if (key === '/api/referral/summary') {
        return resolveQuery({
          totalReferrals: 12,
          activeReferrals: 5,
          totalCommission: 75,
          conversionRate: 0.5,
        });
      }
      return resolveQuery(undefined);
    });

    const { container, root } = await renderPage();

    const input = container.querySelector('[data-testid="referral-share-input"]') as HTMLInputElement | null;
    expect(input?.value).toContain('INVITE123');
    expect(container.textContent).toContain('Total signups');
    expect(container.textContent).toContain('Active subscribers');

    await act(async () => {
      root.unmount();
    });
    container.remove();
  });

  it('copies the referral link to the clipboard', async () => {
    const clipboardDescriptor = Object.getOwnPropertyDescriptor(navigator, 'clipboard');
    const writeText = vi.fn().mockResolvedValue(undefined);
    Object.defineProperty(navigator, 'clipboard', { value: { writeText }, configurable: true });

    mockUseQuery.mockImplementation(({ queryKey }: MockQueryOptions) => {
      const key = Array.isArray(queryKey) ? queryKey[0] : queryKey;
      if (key === '/api/referral/code') {
        return resolveQuery({ code: 'SHAREME' });
      }
      if (key === '/api/referral/summary') {
        return resolveQuery({
          totalReferrals: 3,
          activeReferrals: 1,
          totalCommission: 15,
          conversionRate: 0.25,
        });
      }
      return resolveQuery(undefined);
    });

    const { container, root } = await renderPage();

    const copyButton = container.querySelector('[data-testid="referral-copy-button"]');
    expect(copyButton).not.toBeNull();

    await act(async () => {
      copyButton?.dispatchEvent(new MouseEvent('click', { bubbles: true }));
    });

    expect(writeText).toHaveBeenCalledWith(expect.stringContaining('SHAREME'));
    expect(mockToast).toHaveBeenCalledWith(expect.objectContaining({ title: 'Referral link copied' }));

    if (clipboardDescriptor) {
      Object.defineProperty(navigator, 'clipboard', clipboardDescriptor);
    } else {
      delete (navigator as Record<string, unknown>).clipboard;
    }

    await act(async () => {
      root.unmount();
    });
    container.remove();
  });

  it('shows an error alert when fetching fails', async () => {
    mockUseQuery.mockImplementation(({ queryKey }: MockQueryOptions) => {
      const key = Array.isArray(queryKey) ? queryKey[0] : queryKey;
      if (key === '/api/referral/code') {
        return rejectQuery(new Error('Failed to load referral'));
      }
      if (key === '/api/referral/summary') {
        return resolveQuery({
          totalReferrals: 0,
          activeReferrals: 0,
          totalCommission: 0,
          conversionRate: 0,
        });
      }
      return resolveQuery(undefined);
    });

    const { container, root } = await renderPage();

    const alert = container.querySelector('[data-testid="referral-error"]');
    expect(alert?.textContent).toContain('Failed to load referral');

    await act(async () => {
      root.unmount();
    });
    container.remove();
  });
});
client/src/pages/admin.tsx
+12
-1

import { useState, useEffect, Suspense, lazy } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';
import { Link } from 'wouter';
import { AdminCommunitiesPanel } from '@/components/admin/admin-communities-panel';

// Lazy load compliance dashboard
const ComplianceStatusDashboard = lazy(() => 
  import('@/components/compliance/ComplianceStatusDashboard').then(module => ({
    default: module.ComplianceStatusDashboard
  }))
);
import { 
  Users, 
  DollarSign, 
  TrendingUp, 
  Settings, 
  Shield,
  Activity,
  Database,
  CreditCard,
  Eye,
  BarChart3,
  Ban,
  Clock3,
  Key,
  AlertCircle,
  CheckCircle,
  XCircle,
  Target,
  Smartphone,
  Calendar,
  VideoIcon,
  MessageSquare,
  Globe,
  Zap,
  Share2,
  Gift,
  Headphones,
  MonitorPlay,
  FileCheck
} from 'lucide-react';

interface AdminStats {
  totalUsers: number;
  revenue: number;
  activeUsers: number;
  contentGenerated: number;
  newUsersToday: number;
  trialUsers: number;
  freeUsers: number;
  proUsers: number;
  premiumUsers: number;
  jwtConfigured: boolean;
  emailConfigured: boolean;
}

interface User {
  id: number;
  username: string;
  email: string;
  tier: string;
@@ -1026,62 +1028,71 @@ export function AdminDashboard() {
                    className="w-full justify-start bg-green-100 hover:bg-green-200 border-green-300 text-green-800"
                    onClick={() => {
                      toast({
                        title: "Revenue Tracking",
                        description: "View revenue metrics in Revenue tab"
                      });
                    }}
                  >
                    <DollarSign className="h-4 w-4 mr-2" />
                    Revenue Reports
                  </Button>

                  <Button 
                    className="w-full justify-start bg-purple-100 hover:bg-purple-200 border-purple-300 text-purple-800"
                    onClick={() => {
                      toast({
                        title: "System Status",
                        description: "Check system health in System tab"
                      });
                    }}
                  >
                    <Activity className="h-4 w-4 mr-2" />
                    System Health
                  </Button>

                  <Button 
                  <Button
                    className="w-full justify-start bg-pink-100 hover:bg-pink-200 border-pink-300 text-pink-800"
                    onClick={() => {
                      toast({
                        title: "Provider Analytics",
                        description: "Monitor AI provider costs and performance"
                      });
                    }}
                  >
                    <BarChart3 className="h-4 w-4 mr-2" />
                    Provider Analytics
                  </Button>
                  <Button
                    asChild
                    className="w-full justify-start bg-indigo-100 hover:bg-indigo-200 border-indigo-300 text-indigo-800"
                  >
                    <Link href="/referrals">
                      <Share2 className="h-4 w-4 mr-2" />
                      Referral Dashboard
                    </Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Action Modal */}
      {selectedUser && actionType && (
        <Dialog open={true} onOpenChange={() => { setSelectedUser(null); setActionType(null); setReason(''); setTempPassword(''); }}>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle className="text-red-600">
                {actionType === 'user-details' ? 'User Details' : 
                 actionType === 'tier-management' ? 'Tier Management' : 
                 actionType === 'reset-password' ? 'Reset Password' : 
                 actionType.toUpperCase()} - {selectedUser.username}
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-4">
              {actionType === 'user-details' && (
                <div className="space-y-3">
                  <div className="p-4 bg-gray-50 rounded-lg">
                    <h4 className="font-medium mb-2">Account Information</h4>
client/src/pages/referrals.tsx
New
+377
-0

import React, { useCallback, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Link } from "wouter";
import {
  Users,
  CheckCircle,
  TrendingUp,
  DollarSign,
  Share2,
  RefreshCw,
  Crown,
  Shield,
  Copy,
  AlertTriangle
} from "lucide-react";

type ReferralCodeResponse = {
  code: string;
  link?: string;
};

type ReferralSummaryResponse = {
  totalReferrals: number;
  activeReferrals: number;
  totalCommission: number;
  conversionRate: number;
  pendingRewards?: number;
  lastPayoutDate?: string;
};

const currencyFormatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  maximumFractionDigits: 2
});

const percentFormatter = new Intl.NumberFormat("en-US", {
  style: "percent",
  maximumFractionDigits: 1
});

export default function ReferralsPage() {
  const { user, isLoading: authLoading } = useAuth();
  const { toast } = useToast();

  const isEligibleForReferrals = Boolean(user?.isAdmin || user?.tier === "pro");

  const {
    data: referralCode,
    isLoading: codeLoading,
    error: codeError,
    refetch: refetchCode,
    isFetching: codeFetching
  } = useQuery<ReferralCodeResponse>({
    queryKey: ["/api/referral/code"],
    enabled: isEligibleForReferrals,
  });

  const {
    data: referralSummary,
    isLoading: summaryLoading,
    error: summaryError,
    refetch: refetchSummary,
    isFetching: summaryFetching
  } = useQuery<ReferralSummaryResponse>({
    queryKey: ["/api/referral/summary"],
    enabled: isEligibleForReferrals,
  });

  const isLoading = authLoading || codeLoading || summaryLoading;
  const isRefreshing = codeFetching || summaryFetching;

  const shareUrl = useMemo(() => {
    if (!referralCode?.code) {
      return "";
    }

    if (referralCode.link) {
      return referralCode.link;
    }

    if (typeof window !== "undefined" && window.location) {
      const origin = window.location.origin.replace(/\/?$/, "");
      return `${origin}/signup?ref=${referralCode.code}`;
    }

    const fallbackOrigin = process.env.APP_BASE_URL ?? "https://thottopilot.com";
    return `${fallbackOrigin.replace(/\/?$/, "")}/signup?ref=${referralCode.code}`;
  }, [referralCode]);

  const handleCopyLink = useCallback(async () => {
    if (!shareUrl) {
      return;
    }

    try {
      if (navigator.clipboard?.writeText) {
        await navigator.clipboard.writeText(shareUrl);
      } else {
        const textArea = document.createElement("textarea");
        textArea.value = shareUrl;
        textArea.style.position = "fixed";
        textArea.style.opacity = "0";
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand("copy");
        document.body.removeChild(textArea);
      }

      toast({
        title: "Referral link copied",
        description: "Share this link to earn rewards for new subscribers.",
      });
    } catch (error) {
      toast({
        title: "Unable to copy link",
        description: error instanceof Error ? error.message : "Unexpected clipboard error.",
        variant: "destructive",
      });
    }
  }, [shareUrl, toast]);

  const handleRefresh = useCallback(async () => {
    await Promise.all([refetchCode(), refetchSummary()]);
    toast({
      title: "Referral data refreshed",
      description: "Your referral code and stats are up to date.",
    });
  }, [refetchCode, refetchSummary, toast]);

  const combinedError = codeError ?? summaryError;
  const errorMessage = combinedError instanceof Error ? combinedError.message : undefined;

  const summary = referralSummary ?? {
    totalReferrals: 0,
    activeReferrals: 0,
    totalCommission: 0,
    conversionRate: 0,
    pendingRewards: 0,
  } satisfies ReferralSummaryResponse;

  if (!isEligibleForReferrals && !authLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 py-12">
        <div className="max-w-4xl mx-auto px-4">
          <Card className="bg-white/5 border border-white/10 backdrop-blur-xl text-white">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-2xl">
                <Shield className="h-6 w-6 text-purple-300" />
                Unlock the Referral Program
              </CardTitle>
              <CardDescription className="text-slate-300">
                Upgrade to ThottoPilot Pro to generate referral links and earn revenue from the creators you invite.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex flex-wrap gap-3 items-center">
                <Badge className="bg-purple-500/20 text-purple-200 border-purple-500/40">Pro Exclusive</Badge>
                <Badge className="bg-blue-500/20 text-blue-200 border-blue-500/40">Earn recurring rewards</Badge>
              </div>
              <p className="text-slate-200 text-sm leading-relaxed">
                Share a single invite link, track your signups, and earn lifetime commissions when referred creators go Pro. Upgrade today to access your personal referral dashboard.
              </p>
              <Button asChild className="bg-gradient-to-r from-purple-500 via-pink-500 to-orange-500">
                <Link href="/settings">Upgrade to Pro</Link>
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 py-12" data-testid="referrals-page">
      <div className="max-w-5xl mx-auto px-4 space-y-8 text-white">
        <div className="flex flex-wrap items-center justify-between gap-4">
          <div>
            <h1 className="text-3xl font-semibold tracking-tight flex items-center gap-3">
              <Share2 className="h-7 w-7 text-purple-300" />
              Referral Hub
            </h1>
            <p className="text-slate-300 max-w-xl">
              Track your invite performance, share your personal referral link, and watch your rewards grow.
            </p>
          </div>
          <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 flex items-center gap-2">
            <Crown className="h-4 w-4" />
            Pro Member Access
          </Badge>
        </div>

        {errorMessage && (
          <Alert variant="destructive" data-testid="referral-error" className="bg-red-500/10 border-red-500/40">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle>We hit a snag</AlertTitle>
            <AlertDescription>
              {errorMessage}
              <Button
                variant="outline"
                size="sm"
                className="ml-3"
                onClick={() => {
                  void refetchCode();
                  void refetchSummary();
                }}
              >
                Try again
              </Button>
            </AlertDescription>
          </Alert>
        )}

        <Card className="bg-white/5 border border-white/10 backdrop-blur-xl">
          <CardHeader className="flex flex-col gap-3">
            <div className="flex flex-wrap items-center gap-3">
              <CardTitle className="text-2xl font-semibold flex items-center gap-2">
                <Share2 className="h-5 w-5 text-purple-300" />
                Your invite link
              </CardTitle>
              <Badge className="bg-purple-500/20 text-purple-200 border-purple-500/40">
                Referral code: {referralCode?.code ?? "—"}
              </Badge>
            </div>
            <CardDescription className="text-slate-300">
              Share this URL with creators you trust. They&apos;ll join with your invite and you&apos;ll earn rewards when they subscribe.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {isLoading ? (
              <div className="h-12 w-full rounded-xl bg-white/10 animate-pulse" />
            ) : (
              <div className="flex flex-col gap-3">
                <div className="flex flex-col md:flex-row md:items-center gap-3">
                  <Input
                    value={shareUrl}
                    readOnly
                    data-testid="referral-share-input"
                    className="bg-black/40 border border-white/10 text-white font-mono"
                  />
                  <Button
                    onClick={() => {
                      void handleCopyLink();
                    }}
                    disabled={!shareUrl}
                    className="md:w-auto w-full bg-gradient-to-r from-purple-500 via-pink-500 to-orange-500"
                    data-testid="referral-copy-button"
                  >
                    <Copy className="h-4 w-4" />
                    Copy link
                  </Button>
                </div>
                <div className="flex flex-wrap items-center gap-3">
                  <Button
                    variant="outline"
                    onClick={() => {
                      void handleRefresh();
                    }}
                    disabled={isRefreshing}
                    className="border-white/20 text-slate-200 hover:bg-white/10"
                  >
                    <RefreshCw className={`h-4 w-4 ${isRefreshing ? "animate-spin" : ""}`} />
                    Refresh data
                  </Button>
                  <span className="text-sm text-slate-300">
                    Keep your link pinned in your Linktree, social bios, or onboarding emails.
                  </span>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="bg-white/5 border border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold flex items-center gap-2">
              <Users className="h-5 w-5 text-purple-300" />
              Referral performance
            </CardTitle>
            <CardDescription className="text-slate-300">
              Real-time stats from your invite pipeline. Updated whenever a creator activates their account.
            </CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Array.from({ length: 4 }).map((_, index) => (
                  <div key={index} className="h-32 rounded-xl bg-white/10 animate-pulse" />
                ))}
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="rounded-2xl border border-white/10 bg-black/20 p-5 space-y-3">
                  <div className="flex items-center gap-3 text-slate-300">
                    <Users className="h-5 w-5 text-purple-200" />
                    Total signups
                  </div>
                  <p className="text-4xl font-bold">{summary.totalReferrals}</p>
                  <p className="text-sm text-slate-400">Creators who joined using your invite link.</p>
                </div>
                <div className="rounded-2xl border border-white/10 bg-black/20 p-5 space-y-3">
                  <div className="flex items-center gap-3 text-slate-300">
                    <CheckCircle className="h-5 w-5 text-emerald-200" />
                    Active subscribers
                  </div>
                  <p className="text-4xl font-bold">{summary.activeReferrals}</p>
                  <p className="text-sm text-slate-400">Creators with an active paid plan.</p>
                </div>
                <div className="rounded-2xl border border-white/10 bg-black/20 p-5 space-y-3">
                  <div className="flex items-center gap-3 text-slate-300">
                    <TrendingUp className="h-5 w-5 text-pink-200" />
                    Conversion rate
                  </div>
                  <p className="text-4xl font-bold">{percentFormatter.format(summary.conversionRate)}</p>
                  <p className="text-sm text-slate-400">Percentage of referred creators who activate a subscription.</p>
                </div>
                <div className="rounded-2xl border border-white/10 bg-black/20 p-5 space-y-3">
                  <div className="flex items-center gap-3 text-slate-300">
                    <DollarSign className="h-5 w-5 text-amber-200" />
                    Total rewards
                  </div>
                  <p className="text-4xl font-bold">{currencyFormatter.format(summary.totalCommission)}</p>
                  <p className="text-sm text-slate-400">Lifetime referral commissions earned.</p>
                </div>
              </div>
            )}
            {typeof summary.pendingRewards === "number" && summary.pendingRewards > 0 && (
              <div className="mt-6 rounded-xl border border-yellow-500/30 bg-yellow-500/10 p-4 text-sm text-yellow-100 flex items-center gap-3">
                <AlertTriangle className="h-5 w-5" />
                <div>
                  <p className="font-medium">Pending rewards</p>
                  <p>Your next payout includes {currencyFormatter.format(summary.pendingRewards)} in commissions waiting for approval.</p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        <Separator className="bg-white/10" />

        <Card className="bg-white/5 border border-white/10 backdrop-blur-xl">
          <CardHeader>
            <CardTitle className="text-xl font-semibold flex items-center gap-2">
              <Shield className="h-5 w-5 text-purple-300" />
              How to share with impact
            </CardTitle>
            <CardDescription className="text-slate-300">
              Make it effortless for creators to join and start protecting their brand.
            </CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4 md:grid-cols-3 text-slate-200">
            <div className="rounded-2xl border border-white/10 bg-black/20 p-5 space-y-2">
              <h3 className="font-semibold text-white">Feature it in bios</h3>
              <p className="text-sm text-slate-300">Add your invite link to Linktree, OnlyFans welcome messages, or pinned posts.</p>
            </div>
            <div className="rounded-2xl border border-white/10 bg-black/20 p-5 space-y-2">
              <h3 className="font-semibold text-white">Welcome new creators</h3>
              <p className="text-sm text-slate-300">Send a quick DM template explaining ThottoPilot&apos;s takedown automations and analytics.</p>
            </div>
            <div className="rounded-2xl border border-white/10 bg-black/20 p-5 space-y-2">
              <h3 className="font-semibold text-white">Track your wins</h3>
              <p className="text-sm text-slate-300">Visit this dashboard anytime to monitor conversions and payouts.</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
client/src/pages/settings.tsx
+16
-2

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { 
  Settings, 
  User, 
  Bell, 
  Shield, 
  CreditCard, 
  Moon, 
  Sun, 
  Globe, 
  Download, 
  Globe,
  Share2,
  Download,
  Trash2, 
  Key,
  ArrowLeft,
  Crown,
  Zap
} from 'lucide-react';
import { Link, useLocation } from 'wouter';

export default function SettingsPage() {
  const [theme, setTheme] = useState('light');
  const [notifications, setNotifications] = useState(true);
  const [emailUpdates, setEmailUpdates] = useState(true);
  const [autoSave, setAutoSave] = useState(true);
  const [defaultPlatform, setDefaultPlatform] = useState('reddit');
  const [apiUsage] = useState({ used: 0, limit: 1000 });
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: _userSettings } = useQuery({
    queryKey: ['/api/user/settings'],
  });

  const { data: subscriptionData } = useQuery<{
    subscription: { id: string; status: string; plan: string; nextBillDate?: string; amount?: number } | null;
    isPro: boolean;
@@ -160,50 +161,63 @@ export default function SettingsPage() {
                  <p className="text-sm text-gray-600">
                    {subscriptionData?.subscription?.plan === 'admin' ? 'Admin' : 
                     subscriptionData?.subscription?.plan || 'Free'} Plan
                  </p>
                </div>
                <div className="text-right">
                  <Badge 
                    className={`mb-2 ${
                      subscriptionData?.subscription?.plan === 'admin' ? 'bg-gradient-to-r from-red-600 to-orange-600 text-white' :
                      subscriptionData?.subscription?.plan === 'pro' ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white' :
                      subscriptionData?.subscription?.plan === 'starter' ? 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white' :
                      'bg-gray-100 text-gray-800 border border-gray-300'
                    }`}
                  >
                    {subscriptionData?.subscription?.plan === 'admin' ? 'ADMIN' : 
                     subscriptionData?.subscription?.plan === 'free' ? 'Free' : 
                     subscriptionData?.subscription?.plan || 'Free'}
                  </Badge>
                  <br />
                  {subscriptionData?.subscription?.plan !== 'admin' && (
                    <Button onClick={handleUpgrade} className="bg-gradient-to-r from-purple-600 to-blue-600">
                      <Zap className="h-4 w-4 mr-2" />
                      Upgrade Plan
                    </Button>
                  )}
                  {subscriptionData?.isPro && (
                    <Button
                      asChild
                      variant="outline"
                      size="sm"
                      className="mt-3 w-full border-purple-200 text-purple-700 hover:bg-purple-50"
                    >
                      <Link href="/referrals">
                        <Share2 className="h-4 w-4 mr-2" />
                        Referral Dashboard
                      </Link>
                    </Button>
                  )}
                </div>
              </div>
              
              <Separator />
              
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">API Usage This Month</span>
                  <span className="text-sm text-gray-600">{apiUsage.used} / {apiUsage.limit}</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${(apiUsage.used / apiUsage.limit) * 100}%` }}
                  ></div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Profile Settings */}
          <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center">
                <User className="h-5 w-5 mr-2 text-blue-600" />
