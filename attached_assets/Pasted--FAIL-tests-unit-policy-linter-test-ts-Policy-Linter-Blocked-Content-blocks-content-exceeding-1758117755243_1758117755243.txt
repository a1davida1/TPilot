 FAIL  tests/unit/policy-linter.test.ts > Policy Linter > Blocked Content > blocks content exceeding length limits
AssertionError: expected [ 'Missing required tags', 'too long' ] to include StringContaining "too long"
 ❯ tests/unit/policy-linter.test.ts:74:31
     72| 
     73|       expect(result.state).toBe('warn'); // Length limits are warnings, not blocks
     74|       expect(result.warnings).toContain(expect.stringContaining('too long'));
       |                               ^
     75|     });
     76|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/22]⎯

 FAIL  tests/unit/policy-linter.test.ts > Policy Linter > Warning Content > warns on missing required tags
AssertionError: expected [ 'Missing required tags' ] to include StringContaining "required tags"
 ❯ tests/unit/policy-linter.test.ts:88:31
     86| 
     87|       expect(result.state).toBe('warn');
     88|       expect(result.warnings).toContain(expect.stringContaining('required tags'));
       |                               ^
     89|     });
     90| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/22]⎯

 FAIL  tests/unit/policy-linter.test.ts > Policy Linter > Warning Content > warns on short content
AssertionError: expected [ Array(2) ] to include StringContaining "too short"
 ❯ tests/unit/policy-linter.test.ts:100:31
     98| 
     99|       expect(result.state).toBe('warn');
    100|       expect(result.warnings).toContain(expect.stringContaining('too short'));
       |                               ^
    101|     });
    102|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/22]⎯

 FAIL  tests/unit/policy-linter.test.ts > Policy Linter > Clean Content > handles unknown subreddits with default rules
AssertionError: expected 'block' to be 'ok' // Object.is equality

Expected: "ok"
Received: "block"

 ❯ tests/unit/policy-linter.test.ts:125:28
    123|       });
    124| 
    125|       expect(result.state).toBe('ok');
       |                            ^
    126|     });
    127|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/22]⎯

 FAIL  tests/unit/auth/email-verification-redirect.test.ts > Email Verification Redirect Tests > should redirect to dashboard with success params on valid token
Error: expected 302 "Found", got 200 "OK"
 ❯ tests/unit/auth/email-verification-redirect.test.ts:58:8
     56|     const response = await request(app)
     57|       .get(`/api/auth/verify-email?token=${validToken}`)
     58|       .expect(302); // Expect redirect
       |        ^
     59| 
     60|     expect(response.headers.location).toBe('/dashboard?verified=true&welcome=true');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/22]⎯

 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > Environment Variable Validation > should handle missing all API keys gracefully
 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > Environment Variable Validation > should log warning when API keys are missing
 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > AI Provider Failure Handling > should handle quota exceeded errors
 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > AI Provider Failure Handling > should handle network timeout errors
 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > AI Provider Failure Handling > should handle malformed JSON responses
 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > Success Path Validation > should handle successful AI generation
 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > Success Path Validation > should validate required environment variables on startup
 FAIL  tests/unit/image-generator/enhanced-ai-service.test.ts > Enhanced AI Service - Failure Scenarios > Error Recovery Strategies > should retry with different providers on failure
TypeError: EnhancedAIService is not a constructor
 ❯ tests/unit/image-generator/enhanced-ai-service.test.ts:38:15
     36|   beforeEach(() => {
     37|     vi.clearAllMocks();
     38|     service = new EnhancedAIService();
       |               ^
     39|     
     40|     // Reset environment variables
