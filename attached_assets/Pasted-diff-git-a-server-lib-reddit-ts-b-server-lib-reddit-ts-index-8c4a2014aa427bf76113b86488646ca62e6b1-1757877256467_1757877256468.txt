diff --git a/server/lib/reddit.ts b/server/lib/reddit.ts
index 8c4a2014aa427bf76113b86488646ca62e6b12fa..5e4586f9f194376ae94e9ffd0b8990f94c563275 100644
--- a/server/lib/reddit.ts
+++ b/server/lib/reddit.ts
@@ -1,68 +1,84 @@
 import snoowrap from 'snoowrap';
 import { db } from '../db.js';
-import { users, creatorAccounts } from '@shared/schema.js';
+import { creatorAccounts } from '@shared/schema.js';
 import { eq, and } from 'drizzle-orm';
 import { decrypt } from '../services/state-store.js';
 
+function requireEnv(name: string): string {
+  const value = process.env[name];
+  if (!value) {
+    const message = `Missing required environment variable: ${name}`;
+    console.warn(message);
+    throw new Error(message);
+  }
+  return value;
+}
+
+const REDDIT_CLIENT_ID = requireEnv('REDDIT_CLIENT_ID');
+const REDDIT_CLIENT_SECRET = requireEnv('REDDIT_CLIENT_SECRET');
+const REDDIT_USER_AGENT = requireEnv('REDDIT_USER_AGENT');
+requireEnv('REDDIT_USERNAME');
+requireEnv('REDDIT_PASSWORD');
+
 export interface RedditPostOptions {
   subreddit: string;
   title: string;
   body?: string;
   url?: string;
   nsfw?: boolean;
   spoiler?: boolean;
 }
 
 export interface RedditPostResult {
   success: boolean;
   postId?: string;
   url?: string;
   error?: string;
 }
 
 export interface PostingPermission {
   canPost: boolean;
   reason?: string;
   nextAllowedPost?: Date;
 }
 
 interface RedditSubmission {
   id: string;
   permalink: string;
 }
 
 export class RedditManager {
   private reddit: snoowrap;
   private userId: number;
 
   constructor(accessToken: string, refreshToken: string, userId: number) {
     this.userId = userId;
     this.reddit = new snoowrap({
-      userAgent: 'ThottoPilot/1.0 (Content scheduling bot)',
-      clientId: process.env.REDDIT_CLIENT_ID!,
-      clientSecret: process.env.REDDIT_CLIENT_SECRET!,
+      userAgent: REDDIT_USER_AGENT,
+      clientId: REDDIT_CLIENT_ID,
+      clientSecret: REDDIT_CLIENT_SECRET,
       accessToken,
       refreshToken,
     });
   }
 
   /**
    * Get Reddit manager for a specific user
    */
   static async forUser(userId: number): Promise<RedditManager | null> {
     try {
       const [account] = await db
         .select()
         .from(creatorAccounts)
         .where(
           and(
             eq(creatorAccounts.userId, userId),
             eq(creatorAccounts.platform, 'reddit'),
             eq(creatorAccounts.isActive, true)
           )
         );
 
       if (!account || !account.oauthToken) {
         return null;
       }
 
diff --git a/server/lib/reddit.ts b/server/lib/reddit.ts
index 8c4a2014aa427bf76113b86488646ca62e6b12fa..5e4586f9f194376ae94e9ffd0b8990f94c563275 100644
--- a/server/lib/reddit.ts
+++ b/server/lib/reddit.ts
@@ -489,110 +505,102 @@ export class RedditManager {
       console.error('Reddit connection test failed:', error);
       return false;
     }
   }
 
   /**
    * Refresh access token if needed
    */
   async refreshTokenIfNeeded(): Promise<void> {
     try {
       // snoowrap handles token refresh automatically
       await (this.reddit as unknown as {
         getMe(): Promise<unknown>;
       }).getMe();
     } catch (error) {
       console.error('Token refresh failed:', error);
       throw error;
     }
   }
 }
 
 /**
  * Initialize Reddit OAuth flow
  */
 export function getRedditAuthUrl(state: string): string {
-  if (!process.env.REDDIT_CLIENT_ID) {
-    throw new Error('Reddit OAuth credentials not configured');
-  }
-
   // Always use a consistent redirect URI
   let redirectUri = process.env.REDDIT_REDIRECT_URI;
   
   if (!redirectUri) {
     // Use the primary domain from REPLIT_DOMAINS for consistency
     const domain = process.env.REPLIT_DOMAINS?.split(',')[0] || 'thottopilot.com';
     const protocol = domain.includes('localhost') ? 'http' : 'https';
     redirectUri = `${protocol}://${domain}/api/reddit/callback`;
   }
   
   console.log('Reddit OAuth redirect URI (auth):', redirectUri);
 
   const baseUrl = 'https://www.reddit.com/api/v1/authorize';
   const params = new URLSearchParams({
-    client_id: process.env.REDDIT_CLIENT_ID,
+    client_id: REDDIT_CLIENT_ID,
     response_type: 'code',
     state,
     redirect_uri: redirectUri,
     duration: 'permanent', // Request permanent access
     scope: 'identity submit edit read vote save history mysubreddits',
   });
 
   return `${baseUrl}?${params.toString()}`;
 }
 
 /**
  * Exchange authorization code for access token
  */
 export async function exchangeRedditCode(code: string): Promise<{
   accessToken: string;
   refreshToken: string;
   expiresIn: number;
 }> {
-  if (!process.env.REDDIT_CLIENT_ID || !process.env.REDDIT_CLIENT_SECRET) {
-    throw new Error('Reddit OAuth credentials not configured');
-  }
-
   // Always use a consistent redirect URI (must match exactly)
   let redirectUri = process.env.REDDIT_REDIRECT_URI;
   
   if (!redirectUri) {
     // Use the primary domain from REPLIT_DOMAINS for consistency
     const domain = process.env.REPLIT_DOMAINS?.split(',')[0] || 'thottopilot.com';
     const protocol = domain.includes('localhost') ? 'http' : 'https';
     redirectUri = `${protocol}://${domain}/api/reddit/callback`;
   }
   
   console.log('Reddit OAuth redirect URI (exchange):', redirectUri);
 
   try {
     const response = await fetch('https://www.reddit.com/api/v1/access_token', {
       method: 'POST',
       headers: {
-        'Authorization': `Basic ${Buffer.from(`${process.env.REDDIT_CLIENT_ID}:${process.env.REDDIT_CLIENT_SECRET}`).toString('base64')}`,
+        'Authorization': `Basic ${Buffer.from(`${REDDIT_CLIENT_ID}:${REDDIT_CLIENT_SECRET}`).toString('base64')}`,
         'Content-Type': 'application/x-www-form-urlencoded',
-        'User-Agent': 'ThottoPilot/1.0',
+        'User-Agent': REDDIT_USER_AGENT,
       },
       body: new URLSearchParams({
         grant_type: 'authorization_code',
         code,
         redirect_uri: redirectUri,
       }),
     });
 
     if (!response.ok) {
       const body = await response.text();
       console.error('Reddit token exchange failed:', {
         status: response.status,
         statusText: response.statusText,
         body,
       });
       throw new Error(`Reddit token exchange failed: ${response.statusText}`);
     }
 
     const data = await response.json();
 
     if (!data.refresh_token) {
       console.warn('No refresh token returned from Reddit');
     }
 
     return {
