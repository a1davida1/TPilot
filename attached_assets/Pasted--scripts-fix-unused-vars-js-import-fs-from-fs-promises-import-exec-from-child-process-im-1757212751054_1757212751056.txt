// scripts/fix-unused-vars.js
import fs from 'fs/promises';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function getUnusedVars() {
  try {
    const { stdout } = await execAsync('npx eslint client/src server --format json --ext .ts,.tsx,.js,.jsx');
    const results = JSON.parse(stdout);
    
    const unusedVars = [];
    for (const file of results) {
      for (const message of file.messages) {
        if (message.ruleId === '@typescript-eslint/no-unused-vars') {
          const match = message.message.match(/'(\w+)' is defined but never used/);
          if (match) {
            unusedVars.push({
              file: file.filePath,
              line: message.line,
              column: message.column,
              variable: match[1]
            });
          }
        }
      }
    }
    return unusedVars;
  } catch (error) {
    // ESLint exits with error code when there are lint errors
    return [];
  }
}

async function fixUnusedVars() {
  const unusedVars = await getUnusedVars();
  const fileGroups = {};

  // Group by file
  for (const unused of unusedVars) {
    if (!fileGroups[unused.file]) {
      fileGroups[unused.file] = [];
    }
    fileGroups[unused.file].push(unused);
  }

  for (const [file, vars] of Object.entries(fileGroups)) {
    try {
      let content = await fs.readFile(file, 'utf-8');
      
      // Sort by line number in reverse to avoid offset issues
      vars.sort((a, b) => b.line - a.line);

      for (const { variable } of vars) {
        // Common patterns to prefix with underscore
        const patterns = [
          // Function parameters
          new RegExp(`(\\(|,\\s*)${variable}([:,\\)])`, 'g'),
          // Destructuring
          new RegExp(`{([^}]*\\b)${variable}(\\b[^}]*)}`, 'g'),
          // Variable declarations
          new RegExp(`(const|let|var)\\s+${variable}\\b`, 'g'),
          // Catch blocks
          new RegExp(`catch\\s*\\(\\s*${variable}\\s*\\)`, 'g')
        ];

        for (const pattern of patterns) {
          content = content.replace(pattern, (match, prefix, suffix) => {
            if (prefix && suffix) {
              return `${prefix}_${variable}${suffix}`;
            }
            return match.replace(variable, `_${variable}`);
          });
        }
      }

      await fs.writeFile(file, content);
      console.log(`✅ Fixed ${vars.length} unused variables in ${file}`);
    } catch (error) {
      console.error(`❌ Error processing ${file}: ${error.message}`);
    }
  }
}

await fixUnusedVars();