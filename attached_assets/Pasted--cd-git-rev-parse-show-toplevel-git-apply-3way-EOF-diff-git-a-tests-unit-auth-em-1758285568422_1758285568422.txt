 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/tests/unit/auth/email-verification.test.ts b/tests/unit/auth/email-verification.test.ts
index 38b07a713ffb4a337ff2e937df170f587d6b7702..7ae9d8a8b78d3da8fb9b2b3e4519217e8e15f81a 100644
--- a/tests/unit/auth/email-verification.test.ts
+++ b/tests/unit/auth/email-verification.test.ts
@@ -238,66 +238,68 @@ describe('Email Verification Unit Tests', () => {
   describe('Rate Limiting Boundary Tests', () => {
     it('should handle multiple concurrent verification requests', async () => {
       const token = 'concurrent-test-token';
       const userId = 999;
       const futureDate = new Date(Date.now() + 1 * 60 * 60 * 1000); // 1 hour from now
       
       mockTokens.set(token, {
         token: token,
         userId: userId,
         expiresAt: futureDate
       });
 
       mockUsers.set(userId, {
         id: userId,
         username: 'concurrentuser',
         email: 'concurrent@example.com',
         emailVerified: false
       });
 
       // Send multiple requests concurrently
       const promises = Array.from({ length: 5 }, () =>
         request(app).get('/api/auth/verify-email?token=' + token)
       );
 
       const responses = await Promise.all(promises);
-      
+
       // Send requests with JSON Accept header for consistent testing
-      const promises = Array.from({ length: 5 }, () =>
+      const jsonPromises = Array.from({ length: 5 }, () =>
         request(app)
           .get('/api/auth/verify-email?token=' + token)
           .set('Accept', 'application/json')
       );
 
-      const responses = await Promise.all(promises);
-      
+      const jsonResponses = await Promise.all(jsonPromises);
+
+      expect(responses).toHaveLength(5);
+
       // First request should succeed
-      expect(responses[0].status).toBe(200);
-      
+      expect(jsonResponses[0].status).toBe(200);
+
       // Subsequent requests should fail since token was consumed
-      for (let i = 1; i < responses.length; i++) {
-        expect(responses[i].status).toBe(400);
+      for (let i = 1; i < jsonResponses.length; i++) {
+        expect(jsonResponses[i].status).toBe(400);
       }
     });
   });
 
   describe('Token Expiration Edge Cases', () => {
     it('should reject token that expires exactly now', async () => {
       const token = 'edge-expiry-token';
       const exactlyNow = new Date();
       
       mockTokens.set(token, {
         token: token,
         userId: 111,
         expiresAt: exactlyNow
       });
 
       // Small delay to ensure the token is "expired" when checked
       await new Promise(resolve => setTimeout(resolve, 1));
 
       const response = await request(app)
         .get('/api/auth/verify-email?token=' + token)
         .set('Accept', 'application/json'); // Force JSON response for testing
       
       expect(response.status).toBe(400);
       expect(response.body.message).toBe('Invalid or expired token');
     });
 
EOF
)