Adjust color contrast for light mode
Sep 22 · a1davida1/TPilot · main
+21-23
1. Adjust the light-mode `--primary`/`--primary-foreground` (and any derivative shades) in `client/src/index.css` until `getContrastRatio` from `client/src/lib/theme-utils.ts` reports at least 4.5:1.
2. Update `tests/theme-system.test.ts` so it now expects `results['primary-foreground']` to be true and the explicit contrast assertion to pass once the palette meets the WCAG target.
3. Re-run `npm run test` to make sure the theme regression suite passes with the new color values.

Summary

    Darkened the light-mode --primary token to 271 82 58 and rebuilt the associated scale so white foreground text now clears the WCAG AA 4.5:1 contrast requirement.

Updated the theme regression tests to use the new HSL values and to assert that the primary foreground/background combination now passes the AA threshold.

Testing

    ❌ npm run test *(fails because the broader integration/e2e suite still exercises unreliably mocked services, e.g., caption pipelines and other external-service-dependent specs)*


client/src/index.css
+12-12
@@ -13,64 +13,64 @@
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
  visibility: hidden !important;
}

@layer base {
  :root {
    /* Light Mode - Purple Gradient Theme */
    --background: 0 0 100;
    --foreground: 0 0 8;
    
    /* Card colors with high contrast */
    --card: 0 0 100;
    --card-foreground: 0 0 8;
    --card-border: 271 30 85;
    
    /* Popover colors - Fixed for dropdown visibility */
    --popover: 0 0 98;
    --popover-foreground: 0 0 8;
    
    /* Purple Gradient Primary */
    --primary: 271 91 65;
    --primary: 271 82 58;
    --primary-foreground: 0 0 100;
    --focus-ring: 0 0 0 2px rgba(147,51,234,0.5);
    --primary-50: 271 40 95;
    --primary-100: 271 45 90;
    --primary-200: 271 50 80;
    --primary-300: 271 55 70;
    --primary-400: 271 60 60;
    --primary-500: 271 65 50;
    --primary-600: 271 70 40;
    --primary-700: 271 75 30;
    --primary-800: 271 80 25;
    --primary-900: 271 85 20;
    --primary-950: 271 90 15;
    --primary-50: 271 40 96;
    --primary-100: 271 45 92;
    --primary-200: 271 50 84;
    --primary-300: 271 60 74;
    --primary-400: 271 70 66;
    --primary-500: 271 82 58;
    --primary-600: 271 85 50;
    --primary-700: 271 88 42;
    --primary-800: 271 90 34;
    --primary-900: 271 92 26;
    --primary-950: 271 94 18;
    
    /* Secondary colors */
    --secondary: 271 20 95;
    --secondary-foreground: 0 0 20;
    
    /* Muted colors with high contrast */
    --muted: 271 15 95;
    --muted-foreground: 0 0 45;
    
    /* Accent colors - Purple palette */
    --accent: 271 70 50;
    --accent-foreground: 0 0 100;
    --accent-purple: 271 91 65;
    --accent-violet: 262 83 58;
    --accent-indigo: 239 84 67;
    
    /* State colors with high contrast */
    --destructive: 0 84 60;
    --destructive-foreground: 0 0 100;
    --success: 120 50 30;
    --success-foreground: 0 0 100;
    --warning: 35 70 35;
    --warning-foreground: 0 0 100;
    
    /* Form and interaction colors */
tests/theme-system.test.ts
+9-11
@@ -3,52 +3,52 @@ import { validateThemeColors, getContrastRatio, hslToRgb, meetsWCAGAA } from '..

/**
 * Theme System Tests
 * Ensures WCAG AA compliance and prevents accessibility regressions
 */

describe('Theme System', () => {
  let mockDocumentElement: unknown;

  beforeEach(() => {
    // Mock document element for testing
    mockDocumentElement = {
      style: {
        setProperty: vi.fn(),
      },
    };
    
    // Mock getComputedStyle
    global.getComputedStyle = vi.fn(() => ({
      getPropertyValue: (property: string) => {
        const mockValues: Record<string, string> = {
          '--background': '330 40 98',
          '--foreground': '320 30 10',
          '--card': '330 50 97',
          '--card-foreground': '320 30 15',
          '--primary': '320 85 60',
          '--primary-foreground': '330 40 98',
          '--primary': '271 82 58',
          '--primary-foreground': '0 0 100',
          '--muted': '325 20 88',
          '--muted-foreground': '325 25 25',
        };
        return mockValues[property] || '';
      },
      // Add required CSSStyleDeclaration properties
      length: 0,
      cssText: '',
      parentRule: null,
      cssFloat: '',
      getPropertyPriority: () => '',
      removeProperty: () => '',
      setProperty: () => {},
      item: () => '',
      [Symbol.iterator]: function* () {}
    })) as unknown as typeof window.getComputedStyle;
    
    Object.defineProperty(global, 'document', {
      value: {
        documentElement: mockDocumentElement,
      },
      writable: true,
      configurable: true,
    });

@@ -85,103 +85,101 @@ describe('Theme System', () => {
      expect(whiteOnBlack).toBeCloseTo(21, 1);

      // Same colors should have 1:1 contrast
      const sameColor = getContrastRatio([128, 128, 128], [128, 128, 128]);
      expect(sameColor).toBeCloseTo(1, 1);
    });

    it('should validate WCAG AA compliance', () => {
      // High contrast combinations should pass
      expect(meetsWCAGAA([0, 0, 0], [255, 255, 255])).toBe(true);
      expect(meetsWCAGAA([255, 255, 255], [0, 0, 0])).toBe(true);

      // Low contrast combinations should fail
      expect(meetsWCAGAA([200, 200, 200], [255, 255, 255])).toBe(false);
      expect(meetsWCAGAA([100, 100, 100], [128, 128, 128])).toBe(false);
    });
  });

  describe('Theme Token Validation', () => {
    it('should validate all theme color combinations', () => {
      const results = validateThemeColors();
      
      // All critical combinations should pass WCAG AA
      expect(results['background-foreground']).toBe(true);
      expect(results['card-foreground']).toBe(true);
      // Light primary color fails WCAG; update design or lower expectation
      expect(results['primary-foreground']).toBe(false);
      expect(results['primary-foreground']).toBe(true);
      expect(results['muted-foreground']).toBe(true);
    });

    it('should handle missing CSS variables gracefully', () => {
      global.getComputedStyle = vi.fn(() => ({
        getPropertyValue: () => '', // Return empty for missing variables
        // Add required CSSStyleDeclaration properties
        length: 0,
        cssText: '',
        parentRule: null,
        cssFloat: '',
        getPropertyPriority: () => '',
        removeProperty: () => '',
        setProperty: () => {},
        item: () => '',
        [Symbol.iterator]: function* () {}
      })) as unknown as typeof window.getComputedStyle;

      const results = validateThemeColors();
      
      // Should not throw and should return false for missing variables
      expect(typeof results).toBe('object');
      Object.values(results).forEach(result => {
        expect(typeof result).toBe('boolean');
      });
    });
  });

  describe('Theme Colors WCAG AA Compliance', () => {
    const testColorCombinations = [
      // Light mode combinations
      { bg: [253, 242, 248], fg: [39, 16, 32], name: 'light-background-foreground' },
      { bg: [251, 229, 236], fg: [49, 16, 32], name: 'light-card-foreground' },
      { bg: [236, 72, 153], fg: [253, 242, 248], name: 'light-primary-foreground' },
      { bg: [151, 60, 236], fg: [255, 255, 255], name: 'light-primary-foreground' },
      { bg: [230, 185, 212], fg: [64, 39, 64], name: 'light-muted-foreground' },
      
      // Dark mode combinations (approximate RGB values)
      { bg: [25, 15, 20], fg: [242, 229, 242], name: 'dark-background-foreground' },
      { bg: [31, 20, 25], fg: [242, 229, 242], name: 'dark-card-foreground' },
      { bg: [244, 114, 182], fg: [25, 15, 20], name: 'dark-primary-foreground' },
      { bg: [41, 31, 36], fg: [191, 178, 191], name: 'dark-muted-foreground' },
    ];

    testColorCombinations.forEach(({ bg, fg, name }) => {
      it(`should meet WCAG AA for ${name}`, () => {
        const contrastRatio = getContrastRatio(fg as [number, number, number], bg as [number, number, number]);
        if (name === 'light-primary-foreground') {
          expect(contrastRatio).toBeLessThan(4.5);
        } else {
          expect(contrastRatio).toBeGreaterThanOrEqual(4.5);
        }
        const contrastRatio = getContrastRatio(
          fg as [number, number, number],
          bg as [number, number, number]
        );
        expect(contrastRatio).toBeGreaterThanOrEqual(4.5);
      });
    });
  });

  describe('Anti-Regression Tests', () => {
    it('should prevent hover-only visibility patterns', () => {
      // This would be integrated with ESLint rules in practice
      const problematicClasses = [
        'opacity-0 hover:opacity-100',
        'invisible hover:visible',
        'text-transparent hover:text-gray-900',
      ];

      // In a real implementation, this would check against the ESLint rules
      problematicClasses.forEach(className => {
        expect(className).toMatch(/(opacity-0.*hover:opacity|invisible.*hover:visible|text-transparent.*hover:text)/);
      });
    });

    it('should enforce theme token usage', () => {
      const approvedClasses = [
        'text-foreground',
        'text-muted-foreground',
        'text-readable',
        'text-readable-muted',
