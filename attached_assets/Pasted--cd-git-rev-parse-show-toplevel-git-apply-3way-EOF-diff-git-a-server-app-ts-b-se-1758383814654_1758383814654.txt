 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/app.ts b/server/app.ts
index 139739bec000a131ba3f83c27f8db416d49aec21..053cc4b77cb17367b2ec822602309eb1a242ea36 100644
--- a/server/app.ts
+++ b/server/app.ts
@@ -91,83 +91,90 @@ function applyRequestLogging(app: express.Express): void {
       if (path.startsWith('/api')) {
         let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
         const payload = prepareResponseLogPayload(capturedJsonResponse);
         if (payload) {
           logLine += ` :: ${payload}`;
         }
 
         logger.info(truncateLogLine(logLine), { requestId: req.id });
       }
     });
 
     next();
   });
 }
 
 async function configureStaticAssets(
   app: express.Express,
   server: import('http').Server,
   enableVite: boolean,
 ): Promise<void> {
   const path = await import('path');
   const { fileURLToPath } = await import('url');
   const __dirname = path.dirname(fileURLToPath(import.meta.url));
   const fs = await import('fs');
   
-  // Determine client path based on environment
-  let clientPath: string;
-  if (process.env.NODE_ENV === 'production') {
-    // In production: server runs from dist/server
-    // So '../client' resolves to dist/client (where build script places files)
-    clientPath = path.resolve(__dirname, '..', 'client');
-  } else {
-    // In development: serve built files from client/dist directory
-    clientPath = path.resolve(__dirname, '..', 'client', 'dist');
+  const candidateClientPaths = [
+    path.resolve(__dirname, '..', 'client'),
+    path.resolve(__dirname, '..', '..', 'dist', 'client'),
+    path.resolve(__dirname, '..', 'client', 'dist'),
+  ];
+
+  let clientPath: string | null = null;
+
+  for (const candidate of candidateClientPaths) {
+    const indexPath = path.join(candidate, 'index.html');
+    if (!fs.existsSync(indexPath)) {
+      logger.warn(`Client build not found at ${indexPath}`);
+      continue;
+    }
+
+    clientPath = candidate;
+    logger.info(`Serving client from: ${clientPath}`);
+    break;
   }
-  
-  // Check if index.html exists in the client directory
-  const indexPath = path.join(clientPath, 'index.html');
-  if (!fs.existsSync(indexPath)) {
-    logger.warn(`Client build not found at ${indexPath}`);
+
+  if (!clientPath) {
     if (process.env.NODE_ENV === 'production') {
       logger.error('CRITICAL: Production build missing client files!');
     }
-  } else {
-    logger.info(`Serving client from: ${clientPath}`);
+    logger.error('Unable to locate compiled client assets in any known directory.');
+    process.exit(1);
+    return;
   }
 
   // Debug middleware to trace all requests
   app.use((req, res, next) => {
     if (req.path.startsWith('/assets/')) {
       logger.info(`Asset request received: ${req.method} ${req.path}`);
     }
     next();
   });
 
   // IMPORTANT: Serve static files BEFORE Vite setup to ensure they're accessible
   // Set index: false to prevent serving index.html for directory requests to avoid conflicts
-  app.use(express.static(clientPath, { 
+  app.use(express.static(clientPath, {
     index: false,
     setHeaders: (res, path) => {
       logger.info(`Static file served: ${path}`);
       if (path.endsWith('.js')) {
         res.setHeader('Content-Type', 'application/javascript');
       } else if (path.endsWith('.css')) {
         res.setHeader('Content-Type', 'text/css');
       }
     }
   }));
   
   // Skip Vite in development unless explicitly enabled for diagnostics
   const shouldEnableVite =
     enableVite &&
     app.get('env') === 'development' &&
     process.env.ENABLE_VITE_DEV === 'true';
 
   if (shouldEnableVite) {
     try {
       const { setupVite } = await import('./vite.js');
       await setupVite(app, server);
       logger.info('Vite development server configured');
     } catch (error) {
       logger.warn('Could not setup Vite in development mode:', error);
     }
 
EOF
)