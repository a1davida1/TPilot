You are a full-stack engineer. Goal: make non-image generators (text-only captioning, rewrite, hashtags-only, CTA writer) use the same JSON schema, ranker, and quality gates as the image pipeline.

Tasks:
1) Prompts
- Reuse ./prompts/system.txt, guard.txt, variants.txt, rank.txt.
- Create ./prompts/variants_textonly.txt:
  --------------------------------------------------
  Given:
  PLATFORM: <instagram|x|reddit|tiktok>
  VOICE: <flirty_playful|gamer_nerdy|luxury_minimal|arts_muse|gym_energy|cozy_girl>
  THEME: "<short description of the post>"
  CONTEXT: "<optional notes>"
  Return JSON array of 5 objects ONLY using schema:
  {"caption":"","alt":"","hashtags":[],"cta":"","mood":"","style":"","safety_level":""}
  Rules are the same as variants.txt (platform limits, 5 distinct angles).
  --------------------------------------------------

- Create ./prompts/rewrite.txt:
  --------------------------------------------------
  Given an EXISTING_CAPTION and (optional) IMAGE_FACTS, rewrite into 5 options that fix clarity, voice, platform limits, and add targeted hashtags. Return JSON array of 5 objects using the same schema.
  --------------------------------------------------

2) Code
- Add src/caption/textOnlyPipeline.ts that mirrors geminiPipeline:
  - generateVariantsTextOnly({ platform, voice, theme, context, hint? })
  - rankAndSelect (reuse)
  - platformChecks (reuse)
  - pipelineTextOnly({ platform, voice, theme, context }): create 5 variants → rank → gates → final.

- Add src/caption/rewritePipeline.ts:
  - variantsRewrite({ platform, voice, existingCaption, facts? })
  - rankAndSelect (reuse)
  - pipelineRewrite({ platform, voice, existingCaption, facts? })

3) API
- POST /api/caption/generate-text
  body: { platform, voice?, theme, context? }
  returns: { variants, ranked, final }
- POST /api/caption/rewrite
  body: { platform, voice?, existingCaption, imageUrl? }
  If imageUrl is present, call extractFacts(imageUrl) and pass as facts; else skip.
  returns: { facts?, variants, ranked, final }

4) UI hooks
- On your caption page, add tabs:
  [Image → Caption] (existing) | [Text → Caption] | [Rewrite]
  - Each tab calls the corresponding endpoint and renders the same CaptionPreview card.

5) Acceptance
- All three endpoints return the same JSON contract { variants[5], ranked, final } (+ facts when available).
- “generated content” and other placeholders never appear.
- Platform length/hashtag rules enforced; auto-regen once on failure.
