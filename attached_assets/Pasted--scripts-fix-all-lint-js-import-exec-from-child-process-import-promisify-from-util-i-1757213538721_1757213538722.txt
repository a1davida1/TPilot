// scripts/fix-all-lint.js
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';

const execAsync = promisify(exec);

const PHASES = [
  {
    name: 'Phase 1: Fix Parsing Errors',
    script: 'node scripts/fix-lint.js',
    critical: true
  },
  {
    name: 'Phase 2: ESLint Auto-fix',
    command: 'npx eslint client/src server --fix --ext .ts,.tsx,.js,.jsx',
    critical: false
  },
  {
    name: 'Phase 3: Fix TypeScript Any',
    script: 'node scripts/fix-typescript-any.js',
    critical: false
  },
  {
    name: 'Phase 4: Fix Non-null Assertions',
    script: 'node scripts/fix-non-null-assertions.js',
    critical: false
  },
  {
    name: 'Phase 5: Fix Unused Variables',
    script: 'node scripts/fix-unused-vars.js',
    critical: false
  },
  {
    name: 'Phase 6: Fix Miscellaneous Issues',
    script: 'node scripts/fix-misc-issues.js',
    critical: false
  }
];

async function runPhase(phase) {
  console.log(`\n🚀 ${phase.name}`);
  console.log('='.repeat(50));

  try {
    const command = phase.script || phase.command;
    const { stdout, stderr } = await execAsync(command);
    
    if (stdout) console.log(stdout);
    if (stderr && phase.critical) console.error(stderr);
    
    console.log(`✅ ${phase.name} completed`);
    return true;
  } catch (error) {
    if (phase.critical) {
      console.error(`❌ Critical phase failed: ${phase.name}`);
      console.error(error.message);
      throw error;
    } else {
      console.warn(`⚠️ Non-critical phase failed: ${phase.name}`);
      console.warn(error.message);
      return false;
    }
  }
}

async function generateReport() {
  console.log('\n📊 Generating Final Report...');
  console.log('='.repeat(50));

  try {
    const { stdout } = await execAsync('npx eslint client/src server --format compact --ext .ts,.tsx,.js,.jsx');
    
    // Parse the output to count issues
    const lines = stdout.split('\n');
    const summary = lines[lines.length - 2] || '';
    
    console.log('\n📈 Final Statistics:');
    console.log(summary);
    
    // Save report
    await fs.writeFile('lint-report.txt', stdout);
    console.log('📄 Full report saved to lint-report.txt');
  } catch (error) {
    // ESLint returns non-zero exit code when there are issues
    console.log('📊 Lint check completed (some issues may remain)');
  }
}

async function main() {
  console.log('🔧 Starting Comprehensive Lint Fix Process');
  console.log('='.repeat(50));
  
  const results = [];
  
  for (const phase of PHASES) {
    const success = await runPhase(phase);
    results.push({ phase: phase.name, success });
    
    // Add delay between phases to avoid file conflicts
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\n📝 Summary:');
  console.log('='.repeat(50));
  for (const result of results) {
    const icon = result.success ? '✅' : '⚠️';
    console.log(`${icon} ${result.phase}`);
  }
  
  await generateReport();
  
  console.log('\n✨ Lint fix process complete!');
  console.log('Run "npm run lint" to see remaining issues');
}

// Run the main process
main().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});