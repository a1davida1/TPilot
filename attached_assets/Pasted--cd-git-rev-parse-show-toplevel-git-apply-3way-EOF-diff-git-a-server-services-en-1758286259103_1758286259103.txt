 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/services/enhanced-ai-service.ts b/server/services/enhanced-ai-service.ts
index 4653790b5323b152d06225bfdecf6342a9ca9afd..8ab85494a53cf05bb214f7b02a160c5f21c150cb 100644
--- a/server/services/enhanced-ai-service.ts
+++ b/server/services/enhanced-ai-service.ts
@@ -542,60 +542,150 @@ Create content that feels authentic, drives engagement, and perfectly matches th
       reddit: ['Twitter', 'OnlyFans'],
       twitter: ['Instagram', 'OnlyFans'],
       instagram: ['Twitter', 'TikTok'],
       tiktok: ['Instagram', 'Twitter'],
       onlyfans: ['Twitter', 'Reddit']
     };
 
     return suggestions[currentPlatform] || [];
   }
 
   private estimateEngagement(request: EnhancedAIRequest, content: string): 'high' | 'medium' | 'low' {
     let score = 0;
     
     // Check for engagement factors
     if (content.includes('?')) score++; // Questions increase engagement
     if (request.includePromotion && request.promotionLevel === 'subtle') score++; // Subtle promotion works better
     if (request.style === 'playful' || request.style === 'authentic') score++; // These styles typically perform better
     if (content.length > 50 && content.length < 200) score++; // Optimal length
     
     if (score >= 3) return 'high';
     if (score >= 2) return 'medium';
     return 'low';
   }
 
   private generateFromTemplates(request: EnhancedAIRequest): EnhancedAIResponse {
-    const templates = preGeneratedTemplates.filter(t => 
-      t.style === request.style && 
+    const templates = preGeneratedTemplates.filter(t =>
+      t.style === request.style &&
       t.category === (request.contentType || 'engagement')
     );
-    
+
     const template = templates[0] || preGeneratedTemplates[0];
-    
+
+    const toTitleCase = (value: string): string =>
+      value
+        .split(/\s+/)
+        .map(part => part.charAt(0).toUpperCase() + part.slice(1))
+        .join(' ');
+
+    const formatToken = (value: string): string => toTitleCase(value.replace(/[-_]/g, ' '));
+
+    const shorten = (value: string, maxLength: number): string => {
+      const normalized = value.replace(/\s+/g, ' ').trim();
+      if (normalized.length <= maxLength) {
+        return normalized;
+      }
+      return `${normalized.slice(0, maxLength - 3)}...`;
+    };
+
+    const personalizedInsights: string[] = [];
+
+    if (request.theme) {
+      personalizedInsights.push(`Theme focus: ${formatToken(request.theme)}.`);
+    }
+
+    if (request.prompt) {
+      personalizedInsights.push(
+        `Inspired by your prompt: "${shorten(request.prompt, 120)}".`
+      );
+    }
+
+    if (request.customInstructions) {
+      personalizedInsights.push(`Creator instructions: ${shorten(request.customInstructions, 160)}.`);
+    }
+
+    if (request.targetAudience) {
+      personalizedInsights.push(
+        `Crafted for a ${formatToken(request.targetAudience)} audience.`
+      );
+    }
+
+    if (request.niche) {
+      personalizedInsights.push(`Niche spotlight: ${formatToken(request.niche)}.`);
+    }
+
+    if (request.personalBrand) {
+      personalizedInsights.push(`Brand notes: ${shorten(request.personalBrand, 120)}.`);
+    }
+
+    if (request.subreddit) {
+      personalizedInsights.push(`Perfect for r/${request.subreddit}.`);
+    }
+
+    const fallbackContentSegments = [template.content];
+
+    if (personalizedInsights.length > 0) {
+      fallbackContentSegments.push(personalizedInsights.join(' '));
+    }
+
+    const fallbackContent = fallbackContentSegments.join('\n\n');
+
+    const highlightTokens: string[] = [];
+
+    if (request.theme) {
+      highlightTokens.push(formatToken(request.theme));
+    }
+
+    if (request.niche) {
+      highlightTokens.push(formatToken(request.niche));
+    }
+
+    if (request.targetAudience) {
+      highlightTokens.push(`For ${formatToken(request.targetAudience)}`);
+    }
+
+    const fallbackTitleSet = new Set<string>();
+
+    if (highlightTokens.length > 0) {
+      fallbackTitleSet.add(`${template.title} • ${highlightTokens.join(' • ')}`);
+    }
+
+    if (request.prompt) {
+      fallbackTitleSet.add(`Inspired by: ${shorten(request.prompt, 60)}`);
+    }
+
+    if (request.customInstructions) {
+      fallbackTitleSet.add(`Guided by: ${shorten(request.customInstructions, 60)}`);
+    }
+
+    fallbackTitleSet.add(template.title);
+
+    const fallbackTitles = Array.from(fallbackTitleSet);
+
     return this.enhanceResponse({
-      titles: [template.title],
-      content: template.content,
+      titles: fallbackTitles,
+      content: fallbackContent,
       photoInstructions: {
         lighting: template.photoInstructions || "Natural lighting",
         cameraAngle: "Eye level",
         composition: "Centered",
         styling: "Casual",
         mood: "Relaxed",
         technicalSettings: "Auto settings"
       }
     }, request, {
       provider: 'templates',
       model: 'pre-generated',
       confidence: 0.7,
       generationTime: 100
     });
   }
 
   private generateSafetyFallback(request: EnhancedAIRequest): EnhancedAIResponse {
     return {
       titles: [
         `${request.style.charAt(0).toUpperCase() + request.style.slice(1)} vibes today`,
         "Check out my latest content!",
         "Something special for you"
       ],
       content: `Excited to share this with you! ${request.includePromotion ? 'Full content available on my page.' : 'Let me know what you think!'}`,
       photoInstructions: this.createDetailedPhotoInstructions({}, request),
 
EOF
)