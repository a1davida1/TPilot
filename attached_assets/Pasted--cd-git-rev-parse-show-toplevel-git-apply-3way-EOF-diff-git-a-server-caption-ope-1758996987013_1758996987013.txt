 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/caption/openaiFallback.ts b/server/caption/openaiFallback.ts
index 64cca44a5dc30d3bc8900f92a646da0714276a86..ba5608fe4b6ae95fc0af309363577e40c53b69c3 100644
--- a/server/caption/openaiFallback.ts
+++ b/server/caption/openaiFallback.ts
@@ -1,35 +1,64 @@
 import OpenAI from 'openai';
 import type { ChatCompletionMessageParam } from 'openai/resources/chat/completions';
 import { z } from 'zod';
 import { ensureFallbackCompliance, type FallbackInferenceInput } from './inferFallbackFromFacts';
+import { safeFallbackCaption, safeFallbackCta, safeFallbackHashtags } from './rankingGuards';
 import { CaptionItem } from './schema';
 import { serializePromptField } from './promptUtils';
 import { formatVoiceContext } from './voiceTraits';
 
 const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY || '' });
 
+const SAFE_FALLBACK_ALT_TEXT = 'Engaging social media content';
+
+function buildSafeFallbackResponse(
+  fallbackParams: FallbackInferenceInput,
+  voice?: string
+): z.infer<typeof CaptionItem> {
+  const compliance = ensureFallbackCompliance(
+    {
+      caption: safeFallbackCaption,
+      hashtags: [...safeFallbackHashtags],
+      cta: safeFallbackCta,
+      alt: SAFE_FALLBACK_ALT_TEXT,
+    },
+    fallbackParams
+  );
+
+  return CaptionItem.parse({
+    caption: safeFallbackCaption,
+    hashtags: compliance.hashtags,
+    safety_level: 'normal',
+    mood: voice && voice.includes('flirty') ? 'flirty' : 'engaging',
+    style: 'authentic',
+    cta: compliance.cta,
+    alt: compliance.alt,
+    nsfw: false,
+  });
+}
+
 export interface FallbackParams {
   platform: 'instagram' | 'x' | 'reddit' | 'tiktok';
   voice?: string;
   imageUrl?: string;
   theme?: string;
   context?: string;
   existingCaption?: string;
 }
 
 export async function openAICaptionFallback({
   platform,
   voice = "flirty_playful",
   imageUrl,
   existingCaption,
   context,
   theme,
 }: FallbackParams): Promise<z.infer<typeof CaptionItem>> {
   // Guard against real API calls in test environment
   if (process.env.NODE_ENV === 'test') {
     const base = {
       caption: existingCaption || "Test fallback caption",
       hashtags: ["#test", "#fallback"],
       safety_level: "normal",
       mood: voice?.includes('flirty') ? 'flirty' : 'confident',
       style: "authentic",
diff --git a/server/caption/openaiFallback.ts b/server/caption/openaiFallback.ts
index 64cca44a5dc30d3bc8900f92a646da0714276a86..ba5608fe4b6ae95fc0af309363577e40c53b69c3 100644
--- a/server/caption/openaiFallback.ts
+++ b/server/caption/openaiFallback.ts
@@ -37,63 +66,68 @@ export async function openAICaptionFallback({
       alt: "Test fallback alt text for deterministic testing",
       nsfw: false,
     };
     const compliance = ensureFallbackCompliance(
       {
         caption: base.caption,
         hashtags: base.hashtags,
         cta: base.cta,
         alt: base.alt,
       },
       {
         platform,
         context: context ?? existingCaption,
         existingCaption,
         theme,
       }
     );
 
     return CaptionItem.parse({
       ...base,
       hashtags: compliance.hashtags,
       cta: compliance.cta,
       alt: compliance.alt,
     });
   }
-  let messages: ChatCompletionMessageParam[] = [];
   const sanitizedExistingCaption = existingCaption ? serializePromptField(existingCaption) : undefined;
   const voiceContext = formatVoiceContext(voice);
   const systemVoiceSuffix = voiceContext ? `\n${voiceContext}` : '';
 
   const fallbackContext = context ?? existingCaption ?? sanitizedExistingCaption;
   const fallbackParamsForCompliance: FallbackInferenceInput = {
     platform,
     context: fallbackContext,
     existingCaption,
     theme,
   };
 
+  if (!process.env.OPENAI_API_KEY) {
+    return buildSafeFallbackResponse(fallbackParamsForCompliance, voice);
+  }
+
+  let messages: ChatCompletionMessageParam[] = [];
+
   if (imageUrl && openai) {
     try {
       console.error('OpenAI fallback: Analyzing image for accurate captions');
 
       if (imageUrl.startsWith('data:')) {
         // For data URLs, we can send directly to OpenAI vision
         messages = [
           {
             role: "system",
             content: `You are an expert social media caption writer. Analyze the image carefully and create engaging ${voice} content for ${platform} that directly relates to what you see.${systemVoiceSuffix}
 
 Return ONLY a JSON object with this structure:
 {
   "caption": "engaging caption text that describes what's actually in the image",
   "hashtags": ["#relevant", "#to", "#image"],
   "safety_level": "safe_for_work",
   "mood": "${voice.includes('flirty') ? 'flirty' : 'confident'}",
   "style": "authentic",
   "cta": "relevant call to action",
   "alt": "detailed description of what's actually in the image",
   "nsfw": false
 }`
           },
           {
             role: "user",
diff --git a/server/caption/openaiFallback.ts b/server/caption/openaiFallback.ts
index 64cca44a5dc30d3bc8900f92a646da0714276a86..ba5608fe4b6ae95fc0af309363577e40c53b69c3 100644
--- a/server/caption/openaiFallback.ts
+++ b/server/caption/openaiFallback.ts
@@ -189,49 +223,28 @@ Return ONLY a JSON object with this structure:
 
     const resolvedCaption = typeof jsonData.caption === 'string' && jsonData.caption.trim().length > 0
       ? jsonData.caption
       : (existingCaption && existingCaption.trim().length > 0
         ? existingCaption
         : 'Fallback caption');
 
     return CaptionItem.parse({
       caption: resolvedCaption,
       hashtags: compliance.hashtags,
       safety_level: typeof jsonData.safety_level === 'string' && jsonData.safety_level.trim().length > 0
         ? (jsonData.safety_level as string)
         : 'normal',
       mood: typeof jsonData.mood === 'string' && jsonData.mood.trim().length > 1
         ? (jsonData.mood as string)
         : 'neutral',
       style: typeof jsonData.style === 'string' && jsonData.style.trim().length > 1
         ? (jsonData.style as string)
         : 'fallback',
       cta: compliance.cta,
       alt: compliance.alt,
       nsfw: typeof jsonData.nsfw === 'boolean' ? jsonData.nsfw : false,
     });
   } catch (error) {
     console.error("Error calling OpenAI API:", error);
-    const fallback = ensureFallbackCompliance(
-      {
-        caption: sanitizedExistingCaption,
-        hashtags: [],
-        cta: undefined,
-        alt: undefined,
-      },
-      fallbackParamsForCompliance
-    );
-
-    return CaptionItem.parse({
-      caption: sanitizedExistingCaption
-        ? `Could not generate new caption. Original: ${sanitizedExistingCaption}`
-        : 'Error generating caption.',
-      hashtags: fallback.hashtags,
-      safety_level: 'normal',
-      mood: 'neutral',
-      style: 'error',
-      cta: fallback.cta,
-      alt: fallback.alt,
-      nsfw: false,
-    });
+    return buildSafeFallbackResponse(fallbackParamsForCompliance, voice);
   }
 }
 
EOF
)