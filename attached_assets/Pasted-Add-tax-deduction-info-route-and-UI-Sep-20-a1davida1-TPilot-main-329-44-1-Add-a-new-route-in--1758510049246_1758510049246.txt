Add tax deduction info route and UI
Sep 20 · a1davida1/TPilot · main
+329-44
1. Add a new route in `server/expense-routes.ts` (or a dedicated controller) that returns `storage.getTaxDeductionInfo()` and optionally filters by category.
2. In `client/src/pages/tax-tracker.tsx`, fetch this dataset (with React Query) and render cards that show titles, legal bases, requirements, and risk levels instead of the static arrays.
3. Provide loading/error states for the new guidance section and update tests/documentation to reference the dynamic content.

Summary

    Added a /api/expenses/tax-guidance endpoint that returns tax deduction guidance and supports optional category filtering so the client can request targeted content.

Reworked the Tax Tracker insights tab to fetch guidance with React Query, offer a category selector, and surface loading/refresh and error/empty states while rendering cards with legal basis, requirements, and risk level badges.

Documented the new dynamic guidance workflow for support teams and added unit coverage ensuring the route returns full, filtered, and error responses as expected.

Testing

    ✅ npm run lint

❌ npm test *(fails due to numerous pre-existing suite errors; execution interrupted after observing failing modules such as payment providers and email verification)*


client/src/pages/tax-tracker.tsx
+186-43
import React, { useState, useEffect } from 'react';
import React, { useState, useEffect, useMemo } from 'react';
import {
  Calendar,
  Plus,
  TrendingUp,
  FileText,
  Calculator,
  Info,
  DollarSign,
  Receipt,
  Sparkles,
  Upload,
  X
  X,
  AlertCircle
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest, type ApiError } from '@/lib/queryClient';
// Temporarily disabled framer-motion to fix runtime errors
// import { motion, AnimatePresence } from 'framer-motion';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO } from 'date-fns';

const iconMap: Record<string, React.ComponentType<{ className?: string }>> = {
  Sparkles,
  Receipt,
  Calculator,
  TrendingUp,
  FileText,
  DollarSign
};

@@ -42,129 +43,192 @@ interface TaxTrackerProps {

interface ExpenseCategory {
  id: number;
  name: string;
  deductionPercentage: number;
  icon: string;
  color?: string;
  description?: string;
  examples: string[];
  legalExplanation?: string;
}

interface Expense {
  id: number;
  description: string;
  amount: number;
  categoryId: number;
  expenseDate: string;
  receiptUrl?: string;
  receiptFileName?: string;
  notes?: string;
  category: ExpenseCategory | null;
  date?: string;
}

interface TaxDeductionGuidance {
  id: number;
  title: string;
  category: string;
  description: string;
  legalBasis: string;
  requirements: string[];
  riskLevel: string;
}

const usdFormatter = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2
});

const formatCurrency = (amountInCents: number | null | undefined) =>
  usdFormatter.format((amountInCents ?? 0) / 100);

const riskLevelStyles: Record<string, string> = {
  low: 'bg-green-100 text-green-700',
  medium: 'bg-yellow-100 text-yellow-700',
  high: 'bg-red-100 text-red-700'
};

const getRiskBadgeClassName = (riskLevel: string) => {
  const normalizedRisk = riskLevel.toLowerCase();
  return riskLevelStyles[normalizedRisk] ?? 'bg-gray-100 text-gray-700';
};

const formatRiskLabel = (riskLevel: string) => {
  if (!riskLevel) {
    return 'Unknown';
  }
  return riskLevel.charAt(0).toUpperCase() + riskLevel.slice(1);
};

const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
  const [selectedCategory, setSelectedCategory] = useState<ExpenseCategory | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [showExpenseModal, setShowExpenseModal] = useState(false);
  const [showReceiptModal, setShowReceiptModal] = useState(false);
  const [calendarDate, setCalendarDate] = useState<Date>(new Date());
  const [expenseForm, setExpenseForm] = useState({
    description: '',
    amount: '',
    category: '',
    date: format(new Date(), 'yyyy-MM-dd'),
    notes: ''
  });
  const [receiptFile, setReceiptFile] = useState<File | null>(null);
  const [receiptExpenseId, setReceiptExpenseId] = useState('');
  const [expenseError, setExpenseError] = useState<string | null>(null);
  const [guidanceCategoryFilter, setGuidanceCategoryFilter] = useState<string>('all');
  
  const queryClient = useQueryClient();

  const { data: expenseCategories = [], isLoading: categoriesLoading, error: categoriesError } = useQuery<ExpenseCategory[]>({
    queryKey: ['/api/expense-categories'],
    queryFn: async () => {
      const res = await apiRequest('GET', '/api/expense-categories');
      return res.json();
    }
  });

  useEffect(() => {
    if (!selectedCategory && expenseCategories.length > 0) {
      setSelectedCategory(expenseCategories[0]);
    }
  }, [expenseCategories, selectedCategory]);


  const guidanceCategoryOptions = useMemo(() => {
    const uniqueCategories = new Set<string>();
    expenseCategories.forEach((category) => {
      if (category.name) {
        uniqueCategories.add(category.name);
      }
    });
    return Array.from(uniqueCategories);
  }, [expenseCategories]);


  // Fetch expense totals
  const { data: expenseTotals = { total: 0, deductible: 0, byCategory: {} }, isLoading: totalsLoading, error: totalsError } =
    useQuery({
    queryKey: ['/api/expenses/totals'],
    queryFn: async () => {
      const res = await apiRequest('GET', '/api/expenses/totals');
      return res.json();
    }
  });

  const estimatedSavings = Math.round((expenseTotals?.deductible || 0) * 0.22);

  // Fetch recent expenses
  const { data: recentExpenses = [], isLoading: recentLoading, error: recentError } = useQuery<Expense[]>({
    queryKey: ['/api/expenses'],
    queryFn: async () => {
      const res = await apiRequest('GET', '/api/expenses');
      return res.json();
    }
  });

  // Fetch calendar expenses
  const { data: calendarExpenses = [], isLoading: calendarLoading, error: calendarError } = useQuery<Expense[]>({
    queryKey: ['/api/expenses/range', format(startOfMonth(calendarDate), 'yyyy-MM-dd'), format(endOfMonth(calendarDate), 'yyyy-MM-dd')],
    enabled: activeTab === 'calendar',
    queryFn: async () => {
      const params = new URLSearchParams({
        startDate: format(startOfMonth(calendarDate), 'yyyy-MM-dd'),
        endDate: format(endOfMonth(calendarDate), 'yyyy-MM-dd')
      });
      const res = await apiRequest('GET', `/api/expenses/range?${params.toString()}`);
      return res.json();
    }
  });

  const {
    data: taxGuidance = [],
    isLoading: guidanceLoading,
    isError: guidanceHasError,
    error: guidanceError,
    refetch: refetchGuidance,
    isFetching: guidanceFetching
  } = useQuery<TaxDeductionGuidance[], ApiError>({
    queryKey: ['/api/expenses/tax-guidance', guidanceCategoryFilter],
    queryFn: async ({ queryKey }) => {
      const [endpoint, category] = queryKey as [string, string];
      const params = new URLSearchParams();
      if (category && category !== 'all') {
        params.set('category', category);
      }
      const url = params.size > 0 ? `${endpoint}?${params.toString()}` : endpoint;
      const res = await apiRequest('GET', url);
      return res.json();
    },
    staleTime: 1000 * 60 * 5,
    gcTime: 1000 * 60 * 15
  });

  // Create expense mutation
  const createExpenseMutation = useMutation({
    mutationFn: async (expenseData: Omit<Expense, 'id' | 'category'>) => {
      const response = await apiRequest('POST', '/api/expenses', expenseData);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });
      queryClient.invalidateQueries({ queryKey: ['/api/expenses/totals'] });
      setShowExpenseModal(false);
      setExpenseForm({ description: '', amount: '', category: '', date: format(new Date(), 'yyyy-MM-dd'), notes: '' });
      setExpenseError(null);
    },
    onError: (error: unknown) => {
      const apiError = error as ApiError;
      setExpenseError(apiError.userMessage ?? apiError.message);
    }
  });

  const uploadReceiptMutation = useMutation({
    mutationFn: async ({ expenseId, file }: { expenseId: string; file: File }) => {
      const formData = new FormData();
      formData.append('receipt', file);
      const res = await apiRequest('POST', `/api/expenses/${expenseId}/receipt`, formData);
      return res.json();
@@ -549,93 +613,172 @@ const TaxTracker: React.FC<TaxTrackerProps> = ({ userTier = 'free' }) => {
                        hover:bg-gray-50 transition-colors
                        ${isSameDay(dayData.date, new Date()) ? 'bg-purple-50 border-purple-200' : 'bg-white'}
                      `}
                    >
                      <div className="text-sm font-medium text-gray-900 mb-1">
                        {format(dayData.date, 'd')}
                      </div>
                      {dayData.totalAmount > 0 && (
                        <div className="space-y-1">
                          <div className="text-xs font-medium text-green-600">
                            {formatCurrency(dayData.totalAmount)}
                          </div>
                          <div className="text-xs text-gray-500">
                            {dayData.expenses.length} {dayData.expenses.length === 1 ? 'expense' : 'expenses'}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="insights" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
                <CardHeader>
                  <CardTitle className="text-green-700">✅ What's Deductible</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {[
                    'Beauty treatments & skincare',
                    'Wardrobe & fashion pieces',
                    'Technology & equipment',
                    'Home office expenses',
                    'Travel for content creation',
                    'Marketing & advertising'
                  ].map((item, idx) => (
                    <div key={idx} className="flex items-center space-x-2">
                      <div className="w-2 h-2 rounded-full bg-green-500"></div>
                      <span className="text-sm text-gray-700">{item}</span>
                    </div>
                  ))}
                </CardContent>
              </Card>
            <div className="bg-white/80 backdrop-blur-sm border border-purple-100 shadow-xl rounded-2xl p-6 space-y-4">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-purple-600" />
                    <h3 className="text-xl font-semibold text-gray-900">Tax Deduction Guidance</h3>
                  </div>
                  <p className="text-sm text-gray-600">
                    These cards pull directly from our compliance knowledge base, giving you the latest deduction rules for content creators.
                  </p>
                </div>
                <div className="w-full md:w-auto">
                  <Select value={guidanceCategoryFilter} onValueChange={setGuidanceCategoryFilter}>
                    <SelectTrigger className="w-full md:w-64 border-purple-200">
                      <SelectValue placeholder="Filter by category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All categories</SelectItem>
                      {guidanceCategoryOptions.map((categoryName) => (
                        <SelectItem key={categoryName} value={categoryName}>
                          {categoryName}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              {guidanceFetching && !guidanceLoading ? (
                <p className="text-xs font-medium text-purple-600">Refreshing guidance…</p>
              ) : null}
            </div>

              <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
                <CardHeader>
                  <CardTitle className="text-purple-700">💡 Pro Tips</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {[
                    'Keep all receipts & documentation',
                    'Track business purpose for each expense',
                    'Separate business & personal expenses',
                    'Consider quarterly tax payments',
                    'Consult with a tax professional',
                    'Use this app to stay organized!'
                  ].map((tip, idx) => (
                    <div key={idx} className="flex items-center space-x-2">
                      <div className="w-2 h-2 rounded-full bg-purple-500"></div>
                      <span className="text-sm text-gray-700">{tip}</span>
            {guidanceLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {Array.from({ length: 4 }).map((_, idx) => (
                  <div
                    key={idx}
                    className="animate-pulse rounded-2xl border border-purple-100 bg-white/60 p-6 space-y-4 shadow-inner"
                    data-testid="tax-guidance-skeleton"
                  >
                    <div className="h-5 w-1/2 rounded bg-purple-100" />
                    <div className="h-4 w-1/3 rounded bg-purple-50" />
                    <div className="h-4 w-3/4 rounded bg-gray-100" />
                    <div className="space-y-2 pt-2">
                      <div className="h-3 w-full rounded bg-gray-100" />
                      <div className="h-3 w-5/6 rounded bg-gray-100" />
                      <div className="h-3 w-2/3 rounded bg-gray-100" />
                    </div>
                  ))}
                </CardContent>
              </Card>
            </div>
                  </div>
                ))}
              </div>
            ) : guidanceHasError ? (
              <div className="p-6 bg-red-50 border border-red-200 rounded-2xl flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="flex items-start gap-3">
                  <AlertCircle className="h-6 w-6 text-red-600 mt-0.5" />
                  <div>
                    <p className="font-semibold text-red-700">We couldn't load the latest tax guidance.</p>
                    <p className="text-sm text-red-600">
                      {guidanceError?.userMessage ?? guidanceError?.message ?? 'Please try again in a few moments.'}
                    </p>
                  </div>
                </div>
                <Button
                  type="button"
                  onClick={() => refetchGuidance()}
                  variant="outline"
                  className="border-red-200 text-red-700 hover:bg-red-100"
                >
                  Retry
                </Button>
              </div>
            ) : taxGuidance.length === 0 ? (
              <div className="p-6 bg-purple-50 border border-purple-200 rounded-2xl text-center space-y-2">
                <p className="font-semibold text-purple-700">No guidance available for this category yet.</p>
                <p className="text-sm text-purple-600">
                  Try selecting a different category or check back soon as we expand our compliance coverage.
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {taxGuidance.map((item) => (
                  <Card
                    key={item.id}
                    className="bg-white/80 backdrop-blur-sm border border-purple-100 shadow-xl rounded-2xl h-full"
                    data-testid="tax-guidance-card"
                  >
                    <CardHeader className="space-y-3">
                      <div className="flex items-start justify-between gap-3">
                        <div>
                          <p className="text-xs font-semibold uppercase tracking-wide text-purple-500">{item.category}</p>
                          <CardTitle className="text-lg text-gray-900">{item.title}</CardTitle>
                        </div>
                        <Badge className={getRiskBadgeClassName(item.riskLevel)}>
                          {formatRiskLabel(item.riskLevel)} Risk
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-600 leading-relaxed">{item.description}</p>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <h4 className="text-sm font-semibold text-gray-900">Legal Basis</h4>
                        <p className="text-sm text-gray-600 leading-relaxed">{item.legalBasis}</p>
                      </div>
                      <div>
                        <h4 className="text-sm font-semibold text-gray-900">Requirements</h4>
                        <ul className="space-y-2 mt-2">
                          {(item.requirements ?? []).map((requirement, index) => (
                            <li
                              key={`${item.id}-requirement-${index}`}
                              className="flex items-start gap-2 text-sm text-gray-700"
                            >
                              <span className="mt-1 h-2 w-2 rounded-full bg-purple-400" />
                              <span>{requirement}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>

        {/* Add Expense Modal */}
        <Dialog
          open={showExpenseModal}
          onOpenChange={(open) => {
            setShowExpenseModal(open);
            if (!open) setExpenseError(null);
          }}
        >
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle className="flex items-center space-x-2">
                <Plus className="h-5 w-5 text-purple-600" />
                <span>Add New Expense</span>
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              {expenseError && (
                <p className="text-sm text-red-600" data-testid="expense-error-message">
                  {expenseError}
                </p>
              )}
              <div>
docs/tax-tracker-support.md
+37-1
# Tax Tracker Customer Support Guide

This document provides troubleshooting guidance and solutions for common Tax Tracker issues to help customer support teams resolve user problems efficiently.

## Overview

The Tax Tracker is a comprehensive expense management system designed for content creators to track business expenses and maximize tax deductions. It features automated categorization, receipt upload, real-time calculations, and IRS-compliant documentation.
The Tax Tracker is a comprehensive expense management system designed for content creators to track business expenses and maximize tax deductions. It features automated categorization, receipt upload, real-time calculations, IRS-compliant documentation, and dynamic tax guidance cards powered by the `/api/expenses/tax-guidance` endpoint (with optional `?category=` filtering).

## Common Issues and Solutions

### 1. Receipt Upload Failures

**Symptoms:**
- "No file uploaded" error message
- Receipt upload button not responding
- Files appear to upload but don't save to expense

**Troubleshooting Steps:**

1. **File Format Check**
   - Supported formats: JPEG, PNG, PDF
   - Maximum file size: Check S3 configuration or local storage limits
   - Verify file is not corrupted

2. **Browser Issues**
   - Clear browser cache and cookies
   - Try different browser (Chrome, Firefox, Safari)
   - Disable browser extensions temporarily
   - Ensure JavaScript is enabled

3. **Authentication Issues**
   - Verify user is logged in
@@ -141,86 +141,122 @@ The Tax Tracker is a comprehensive expense management system designed for conten
### 5. Expense Creation/Editing Problems

**Symptoms:**
- Expenses not saving
- Form validation errors
- Amounts not calculating correctly

**Troubleshooting Steps:**

1. **Form Validation**
   - Description: Required, non-empty string
   - Amount: Required, positive number
   - Category: Required, valid category ID
   - Date: Required, valid date format

2. **Amount Conversion**
   - Frontend sends amounts as floats (e.g., 150.00)
   - Backend converts to cents (e.g., 15000)
   - Verify conversion math is correct

3. **Category Assignment**
   - Check category IDs match database records
   - Ensure selected category is active
   - Verify category relationships

### 6. Tax Guidance Cards Not Loading

**Symptoms:**
- “Refreshing guidance…” message never clears
- Tax Tips tab shows empty space instead of guidance cards
- Users report missing risk levels or legal basis details

**Troubleshooting Steps:**

1. **API Endpoint Check**
   ```bash
   # Fetch all guidance
   GET /api/expenses/tax-guidance

   # Filtered by category name
   GET /api/expenses/tax-guidance?category=Travel
   ```
   - Response should be an array of objects with `title`, `legalBasis`, `requirements`, and `riskLevel` fields

2. **Database Verification**
   ```sql
   SELECT title, category, legal_basis, risk_level
   FROM tax_deduction_info
   ORDER BY category, title;
   ```
   - Ensure guidance records exist for the requested category

3. **Client Cache Reset**
   - Have the user log out/in to clear React Query cache
   - Hard refresh the browser (`Cmd/Ctrl + Shift + R`)
   - Confirm no network errors in the browser console

## Diagnostic Commands

### Database Queries
```sql
-- Check user expenses
SELECT e.*, ec.name as category_name 
FROM expenses e 
LEFT JOIN expense_categories ec ON e.category_id = ec.id 
WHERE e.user_id = [USER_ID];

-- Check expense totals
SELECT 
  COUNT(*) as total_expenses,
  SUM(amount) as total_amount,
  SUM(amount * deduction_percentage / 100) as deductible_amount
FROM expenses 
WHERE user_id = [USER_ID] AND tax_year = [YEAR];

-- Check active categories
SELECT * FROM expense_categories WHERE is_active = true ORDER BY sort_order;
```

### API Testing
```bash
# Test authentication
curl -H "Authorization: Bearer [TOKEN]" http://localhost:5000/api/auth/user

# Test expense creation
curl -X POST http://localhost:5000/api/expenses \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer [TOKEN]" \
  -d '{"description":"Test expense","amount":50,"categoryId":1,"expenseDate":"2024-01-15"}'

# Test totals calculation
curl -H "Authorization: Bearer [TOKEN]" \
  "http://localhost:5000/api/expenses/totals?taxYear=2024"

# Test tax guidance dataset
curl "http://localhost:5000/api/expenses/tax-guidance"
curl "http://localhost:5000/api/expenses/tax-guidance?category=Travel"
```

## Escalation Guidelines

### When to Escalate to Development Team

1. **Data Corruption Issues**
   - Negative amounts or impossible values
   - Missing critical data after successful operations
   - Database constraint violations

2. **Performance Problems**
   - API endpoints taking >5 seconds to respond
   - Memory leaks or server crashes
   - Database query timeouts

3. **Security Concerns**
   - Users seeing other users' expenses
   - Authentication bypasses
   - Data exposure in logs

4. **Integration Failures**
   - S3 upload consistently failing
   - Payment tier restrictions not working
   - Email notifications not sending
server/expense-routes.ts
+15-0
@@ -112,50 +112,65 @@ async function applyReceiptImageShieldProtection(
      }]);
    }

    return await pipeline
      .jpeg({ quality: settings.quality })
      .toBuffer();
  } catch (error) {
    console.error('Receipt ImageShield protection failed:', error);
    // Return original buffer if protection fails
    return inputBuffer;
  }
}

export function registerExpenseRoutes(app: Express) {
  // Get all expense categories
  app.get('/api/expense-categories', async (req, res) => {
    try {
      const categories = await storage.getExpenseCategories();
      res.json(categories);
    } catch (error) {
      console.error('Error fetching expense categories:', error);
      res.status(500).json({ message: 'Failed to fetch expense categories' });
    }
  });

  // Get tax deduction guidance with optional category filter
  app.get('/api/expenses/tax-guidance', async (req, res) => {
    try {
      const categoryQuery = typeof req.query.category === 'string' ? req.query.category.trim() : '';
      const hasCategoryFilter = categoryQuery.length > 0;
      const guidance = hasCategoryFilter
        ? await storage.getTaxDeductionInfoByCategory(categoryQuery)
        : await storage.getTaxDeductionInfo();
      res.json(guidance);
    } catch (error) {
      console.error('Error fetching tax deduction info:', error);
      res.status(500).json({ message: 'Failed to fetch tax deduction info' });
    }
  });

  // Get user expenses
  app.get('/api/expenses', authenticateToken, async (req: AuthRequest, res) => {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ message: 'Authentication required' });
      }

      const taxYear = req.query.taxYear ? parseInt(req.query.taxYear as string) : undefined;
      const expenses = await storage.getUserExpenses(req.user.id, taxYear);
      res.json(expenses);
    } catch (error) {
      console.error('Error fetching expenses:', error);
      res.status(500).json({ message: 'Failed to fetch expenses' });
    }
  });

  // Create new expense
  app.post('/api/expenses', authenticateToken, async (req: AuthRequest, res) => {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ message: 'Authentication required' });
      }

      const currentYear = new Date().getFullYear();
      const expenseDate = new Date(req.body.expenseDate);
tests/unit/expenses/tax-guidance-route.test.ts
New
+91-0
import express from 'express';
import request from 'supertest';
import { describe, beforeEach, test, expect, vi } from 'vitest';

const mockStorage = vi.hoisted(() => ({
  getTaxDeductionInfo: vi.fn(),
  getTaxDeductionInfoByCategory: vi.fn(),
}));

vi.mock('../../../server/storage.ts', () => ({
  storage: mockStorage,
}));

vi.mock('../../../server/middleware/auth.js', () => ({
  authenticateToken: vi.fn((_req: express.Request, _res: express.Response, next: express.NextFunction) => next()),
}));

vi.mock('../../../server/lib/media.js', () => ({
  MediaManager: {
    uploadFile: vi.fn(),
  },
}));

import { registerExpenseRoutes } from '../../../server/expense-routes';

describe('Tax deduction guidance route', () => {
  let app: express.Express;

  beforeEach(() => {
    vi.clearAllMocks();
    app = express();
    app.use(express.json());
    registerExpenseRoutes(app);
  });

  test('returns all guidance when no category filter is provided', async () => {
    const dataset = [
      {
        id: 1,
        title: 'Camera Equipment',
        category: 'Technology',
        description: 'Equipment used exclusively for content production.',
        legalBasis: 'IRS Publication 334 - Chapter 8',
        requirements: ['Document business usage', 'Retain proof of purchase'],
        riskLevel: 'low',
      },
    ];

    mockStorage.getTaxDeductionInfo.mockResolvedValueOnce(dataset);

    const response = await request(app).get('/api/expenses/tax-guidance');

    expect(response.status).toBe(200);
    expect(response.body).toEqual(dataset);
    expect(mockStorage.getTaxDeductionInfo).toHaveBeenCalledTimes(1);
    expect(mockStorage.getTaxDeductionInfoByCategory).not.toHaveBeenCalled();
  });

  test('filters guidance by category when query parameter is provided', async () => {
    const dataset = [
      {
        id: 2,
        title: 'Travel for Shoots',
        category: 'Travel',
        description: 'Travel directly tied to business activities.',
        legalBasis: 'IRS Publication 463',
        requirements: ['Maintain travel logs', 'Document business purpose'],
        riskLevel: 'medium',
      },
    ];

    mockStorage.getTaxDeductionInfoByCategory.mockResolvedValueOnce(dataset);

    const response = await request(app).get('/api/expenses/tax-guidance').query({ category: 'Travel' });

    expect(response.status).toBe(200);
    expect(response.body).toEqual(dataset);
    expect(mockStorage.getTaxDeductionInfoByCategory).toHaveBeenCalledWith('Travel');
    expect(mockStorage.getTaxDeductionInfo).not.toHaveBeenCalled();
  });

  test('returns 500 when storage throws an error', async () => {
    mockStorage.getTaxDeductionInfo.mockRejectedValueOnce(new Error('Database unavailable'));

    const response = await request(app).get('/api/expenses/tax-guidance');

    expect(response.status).toBe(500);
    expect(response.body).toEqual({ message: 'Failed to fetch tax deduction info' });
    expect(mockStorage.getTaxDeductionInfo).toHaveBeenCalledTimes(1);
  });
});
