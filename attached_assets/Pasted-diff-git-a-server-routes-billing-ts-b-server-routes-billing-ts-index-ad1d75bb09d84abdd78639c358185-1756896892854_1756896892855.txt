diff --git a/server/routes/billing.ts b/server/routes/billing.ts
index ad1d75bb09d84abdd78639c358185dd098dbf57f..a08c32fa67cf7c3af5945ee76a5352cef5d4cc94 100644
--- a/server/routes/billing.ts
+++ b/server/routes/billing.ts
@@ -1,45 +1,64 @@
 import type { Express, Request, Response } from "express";
 import { stripe } from "../lib/billing/stripe.js";
 import { bucketForUser, proPriceIdForBucket } from "../lib/pricing.js";
 import { trackEvent } from "../lib/analytics.js";
+import { logger } from "../middleware/security.js";
 
 function getBaseUrl(req: Request) {
   const h = req.headers["x-forwarded-host"] || req.headers.host;
   const proto = (req.headers["x-forwarded-proto"] as string) || "https";
   return `${proto}://${h}`;
 }
 
 export function mountBillingRoutes(app: Express) {
   // returns which Pro price this user sees (A/B bucket)
   app.get("/api/billing/prices", async (req: unknown, res: Response) => {
     const uid = req.user?.id?.toString() || req.ip;
     const bucket = bucketForUser(uid);
     const proPriceId = proPriceIdForBucket(bucket);
     res.json({
       starter: { id: process.env.STRIPE_PRICE_STARTER || null, label: "$9.99" },
       pro: { id: proPriceId, bucket, label: "Pro" }
     });
   });
 
   // creates a Stripe Checkout Session and returns url
   app.post("/api/billing/checkout", async (req: unknown, res: Response) => {
-    const user = req.user;
-    if (!user) return res.status(401).json({ error: "unauthorized" });
-    const uid = user.id.toString();
-    const bucket = bucketForUser(uid);
-    const priceId = (req.body?.priceId as string) || proPriceIdForBucket(bucket);
+    try {
+      const user = req.user;
+      if (!user) return res.status(401).json({ error: "unauthorized" });
+      const uid = user.id.toString();
+      const bucket = bucketForUser(uid);
+      let priceId = req.body?.priceId as string | undefined;
+      const allowedPriceIds = [
+        process.env.STRIPE_PRICE_STARTER,
+        process.env.STRIPE_PRICE_PRO_29,
+        process.env.STRIPE_PRICE_PRO_39,
+        process.env.STRIPE_PRICE_PRO_49,
+      ].filter(Boolean) as string[];
+      if (priceId) {
+        if (!allowedPriceIds.includes(priceId)) {
+          return res.status(400).json({ error: "invalid priceId" });
+        }
+      } else {
+        priceId = proPriceIdForBucket(bucket);
+      }
 
-    const session = await stripe.checkout.sessions.create({
-      mode: "subscription",
-      payment_method_types: ["card"],
-      line_items: [{ price: priceId, quantity: 1 }],
-      customer_email: user.email || undefined,
-      success_url: `${getBaseUrl(req)}/billing/success`,
-      cancel_url: `${getBaseUrl(req)}/billing/cancel`,
-      metadata: { userId: uid, bucket },
-    });
+      const session = await stripe.checkout.sessions.create({
+        mode: "subscription",
+        payment_method_types: ["card"],
+        line_items: [{ price: priceId, quantity: 1 }],
+        customer_email: user.email || undefined,
+        success_url: `${getBaseUrl(req)}/billing/success`,
+        cancel_url: `${getBaseUrl(req)}/billing/cancel`,
+        metadata: { userId: uid, bucket },
+      });
 
-    await trackEvent(user.id, "checkout_started", { priceId, bucket });
-    res.json({ url: session.url });
+      await trackEvent(user.id, "checkout_started", { priceId, bucket });
+      res.json({ url: session.url });
+    } catch (error) {
+      logger.error('Stripe checkout error:', error);
+      res.status(502).json({ message: "Checkout unavailable" });
+    }
   });
-}
+}
