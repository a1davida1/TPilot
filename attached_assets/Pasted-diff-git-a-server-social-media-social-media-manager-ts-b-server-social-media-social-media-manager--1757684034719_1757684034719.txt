diff --git a/server/social-media/social-media-manager.ts b/server/social-media/social-media-manager.ts
@@
 import { InstagramAPI } from './instagram-api.js';
 import { TwitterAPI } from './twitter-api.js';
 import { TikTokAPI } from './tiktok-api.js';
 import { YouTubeAPI } from './youtube-api.js';
+import { LinkedInAPI } from './linkedin-api.js';
@@
-export type Platform = 'instagram' | 'twitter' | 'tiktok' | 'youtube';
+export type Platform =
+  | 'instagram'
+  | 'twitter'
+  | 'tiktok'
+  | 'youtube'
+  | 'linkedin';
@@
-export interface PostResponse {
-  success: boolean;
-  platform: Platform;
-  postId?: string;
-  error?: string;
-}
+export interface PostResult {
+  success: boolean;
+  platform: Platform;
+  postId?: string;
+  error?: string;
+}
@@
-  private apis: Map<Platform, InstagramAPI | TwitterAPI | TikTokAPI | YouTubeAPI> = new Map();
+  private apis: Map<Platform,
+    InstagramAPI | TwitterAPI | TikTokAPI | YouTubeAPI | LinkedInAPI
+  > = new Map();
@@
-  async postToPlatform(platform: Platform, content: PostContent): Promise<PostResponse> {
+  async postToPlatform(platform: Platform, content: PostContent): Promise<PostResult> {
@@
-        case 'youtube':
-          if (!content.mediaUrls?.[0]?.includes('.mp4')) {
-            return {
-              success: false,
-              platform,
-              error: 'YouTube requires video content',
-            };
-          }
-          return await (api as YouTubeAPI).createPost({
-            videoUrl: content.mediaUrls[0],
-            title: content.title || content.text.substring(0, 100),
-            description: content.description || content.text,
-            tags: content.hashtags,
-          });
+        case 'youtube':
+          if (!content.mediaUrls?.[0]?.includes('.mp4')) {
+            return {
+              success: false,
+              platform,
+              error: 'YouTube requires video content',
+            };
+          }
+          return await (api as YouTubeAPI).createPost({
+            videoUrl: content.mediaUrls[0],
+            title: content.title || content.text.substring(0, 100),
+            description: content.description || content.text,
+            tags: content.hashtags,
+          });
+        case 'linkedin':
+          return await (api as LinkedInAPI).createPost({
+            text: content.text,
+            mediaUrls: content.mediaUrls,
+            hashtags: content.hashtags,
+          });
         default:
           return {
             success: false,
             platform,
             error: `Posting not implemented for ${platform}`,
           };
@@
-  async postToMultiplePlatforms(
-    platforms: Platform[],
-    content: PostContent
-  ): Promise<PostResponse[]> {
+  async postToMultiplePlatforms(
+    platforms: Platform[],
+    content: PostContent
+  ): Promise<PostResult[]> {
@@
-  async getAccountMetrics(platform: Platform): Promise<unknown> {
+  async getAccountMetrics(platform: Platform): Promise<unknown> {
@@
       case 'tiktok':
         return await (api as TikTokAPI).getUserInfo?.();
       case 'youtube':
         return await (api as YouTubeAPI).getChannelMetrics?.();
+      case 'linkedin':
+        return await (api as LinkedInAPI).getAccountMetrics();
       default:
-        throw new Error(`Account metrics not implemented for ${platform}`);
+        return null;
     }
   }
 }
diff --git a/server/social-media/linkedin-api.ts b/server/social-media/linkedin-api.ts
new file mode 100644
+import fetch from 'node-fetch';
+
+export interface LinkedInPost {
+  text: string;
+  mediaUrls?: string[];
+  hashtags?: string[];
+}
+
+export interface LinkedInMetrics {
+  followers: number;
+  engagementRate: number;
+}
+
+export class LinkedInAPI {
+  constructor(private accessToken: string) {}
+
+  async createPost(post: LinkedInPost): Promise<{ success: boolean; platform: 'linkedin'; postId?: string; error?: string }> {
+    try {
+      const res = await fetch('https://api.linkedin.com/v2/shares', {
+        method: 'POST',
+        headers: {
+          'Authorization': `Bearer ${this.accessToken}`,
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(post),
+      });
+      if (!res.ok) {
+        return { success: false, platform: 'linkedin', error: `HTTP ${res.status}` };
+      }
+      const data = await res.json();
+      return { success: true, platform: 'linkedin', postId: data.id };
+    } catch (error: unknown) {
+      return {
+        success: false,
+        platform: 'linkedin',
+        error: error instanceof Error ? error.message : 'Unknown error',
+      };
+    }
+  }
+
+  async getAccountMetrics(): Promise<LinkedInMetrics> {
+    try {
+      const res = await fetch('https://api.linkedin.com/v2/me', {
+        headers: { 'Authorization': `Bearer ${this.accessToken}` },
+      });
+      if (!res.ok) throw new Error(`HTTP ${res.status}`);
+      const data = await res.json();
+      return {
+        followers: data.followersCount ?? 0,
+        engagementRate: data.engagementRate ?? 0,
+      };
+    } catch (error) {
+      console.error('LinkedIn metrics error:', error);
+      return { followers: 0, engagementRate: 0 };
+    }
+  }
+}
