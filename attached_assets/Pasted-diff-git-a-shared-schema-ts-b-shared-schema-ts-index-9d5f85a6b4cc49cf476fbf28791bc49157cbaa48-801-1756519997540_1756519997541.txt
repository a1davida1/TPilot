diff --git a/shared/schema.ts b/shared/schema.ts
index 9d5f85a6b4cc49cf476fbf28791bc49157cbaa48..8013895b8d8336ddc6204f22eb2529fa35bd003c 100644
--- a/shared/schema.ts
+++ b/shared/schema.ts
@@ -67,50 +67,57 @@ export const userPreferences = pgTable("user_preferences", {
   contentPreferences: jsonb("content_preferences"), // preferred themes, topics
   prohibitedWords: jsonb("prohibited_words"), // words to avoid
   photoStyle: jsonb("photo_style"), // preferred photo instructions
   platformSettings: jsonb("platform_settings"), // platform-specific preferences
   fineTuningEnabled: boolean("fine_tuning_enabled").default(false),
   createdAt: timestamp("created_at").defaultNow(),
   updatedAt: timestamp("updated_at").defaultNow(),
 });
 
 // Lead model for waitlist functionality
 export const leads = pgTable("leads", {
   id: varchar("id", { length: 25 }).primaryKey(),
   email: varchar("email", { length: 255 }).unique().notNull(),
   platformTags: jsonb("platform_tags").$type<string[]>().notNull(), // ["reddit","x","onlyfans","fansly"]
   painPoint: text("pain_point"),
   utmSource: varchar("utm_source", { length: 255 }),
   utmMedium: varchar("utm_medium", { length: 255 }),
   utmCampaign: varchar("utm_campaign", { length: 255 }),
   utmContent: varchar("utm_content", { length: 255 }),
   utmTerm: varchar("utm_term", { length: 255 }),
   referrer: varchar("referrer", { length: 500 }),
   confirmedAt: timestamp("confirmed_at"),
   createdAt: timestamp("created_at").defaultNow(),
 });
 
+export const verificationTokens = pgTable("verification_tokens", {
+  id: serial("id").primaryKey(),
+  userId: integer("user_id").references(() => users.id).notNull(),
+  token: varchar("token", { length: 255 }).unique().notNull(),
+  expiresAt: timestamp("expires_at").notNull(),
+});
+
 export const userImages = pgTable("user_images", {
   id: serial("id").primaryKey(),
   userId: integer("user_id").references(() => users.id).notNull(),
   filename: varchar("filename", { length: 255 }).notNull(),
   originalName: varchar("original_name", { length: 255 }).notNull(),
   url: varchar("url", { length: 500 }).notNull(),
   mimeType: varchar("mime_type", { length: 100 }).notNull(),
   size: integer("size").notNull(),
   isProtected: boolean("is_protected").default(false),
   protectionLevel: varchar("protection_level", { length: 50 }).default("none"),
   tags: jsonb("tags"),
   metadata: jsonb("metadata"),
   createdAt: timestamp("created_at").defaultNow(),
   updatedAt: timestamp("updated_at").defaultNow(),
 });
 
 // New tables for Phase 1 expansion
 
 export const creatorAccounts = pgTable("creator_accounts", {
   id: serial("id").primaryKey(),
   userId: integer("user_id").references(() => users.id).notNull(),
   platform: varchar("platform", { length: 50 }).notNull(), // "reddit"
   handle: varchar("handle", { length: 100 }).notNull(),
   platformUsername: varchar("platform_username", { length: 255 }), // Added missing column
   oauthToken: text("oauth_token").notNull(),
diff --git a/shared/schema.ts b/shared/schema.ts
index 9d5f85a6b4cc49cf476fbf28791bc49157cbaa48..8013895b8d8336ddc6204f22eb2529fa35bd003c 100644
--- a/shared/schema.ts
+++ b/shared/schema.ts
@@ -305,57 +312,60 @@ export const insertPostTemplateSchema = createInsertSchema(postTemplates);
 export const insertPostPreviewSchema = createInsertSchema(postPreviews);
 export const insertPostJobSchema = createInsertSchema(postJobs);
 export const insertSubscriptionSchema = createInsertSchema(subscriptions);
 export const insertInvoiceSchema = createInsertSchema(invoices);
 export const insertReferralCodeSchema = createInsertSchema(referralCodes);
 export const insertReferralSchema = createInsertSchema(referrals);
 export const insertEventLogSchema = createInsertSchema(eventLogs);
 export const insertFeatureFlagSchema = createInsertSchema(featureFlags);
 export const insertMediaAssetSchema = createInsertSchema(mediaAssets);
 export const insertMediaUsageSchema = createInsertSchema(mediaUsages);
 export const insertAiGenerationSchema = createInsertSchema(aiGenerations);
 export const insertQueueJobSchema = createInsertSchema(queueJobs);
 export const insertPostRateLimitSchema = createInsertSchema(postRateLimits);
 export const insertPostDuplicateSchema = createInsertSchema(postDuplicates);
 
 
 // Phase 5 schemas already included above
 
 // Insert schemas for existing tables
 export const insertUserSchema = createInsertSchema(users);
 export const insertContentGenerationSchema = createInsertSchema(contentGenerations);
 export const insertUserSampleSchema = createInsertSchema(userSamples);
 export const insertUserPreferenceSchema = createInsertSchema(userPreferences);
 export const insertUserImageSchema = createInsertSchema(userImages);
 export const insertLeadSchema = createInsertSchema(leads);
+export const insertVerificationTokenSchema = createInsertSchema(verificationTokens);
 
 // Types
 export type User = typeof users.$inferSelect;
 export type InsertUser = z.infer<typeof insertUserSchema>;
 
 export type Lead = typeof leads.$inferSelect;
 export type InsertLead = z.infer<typeof insertLeadSchema>;
+export type VerificationToken = typeof verificationTokens.$inferSelect;
+export type InsertVerificationToken = z.infer<typeof insertVerificationTokenSchema>;
 
 export type ContentGeneration = typeof contentGenerations.$inferSelect;
 export type InsertContentGeneration = z.infer<typeof insertContentGenerationSchema>;
 
 export type UserSample = typeof userSamples.$inferSelect;
 export type InsertUserSample = z.infer<typeof insertUserSampleSchema>;
 
 export type UserPreference = typeof userPreferences.$inferSelect;
 export type InsertUserPreference = z.infer<typeof insertUserPreferenceSchema>;
 
 export type UserImage = typeof userImages.$inferSelect;
 export type InsertUserImage = z.infer<typeof insertUserImageSchema>;
 
 // Types for new tables
 export type CreatorAccount = typeof creatorAccounts.$inferSelect;
 export type InsertCreatorAccount = z.infer<typeof insertCreatorAccountSchema>;
 
 export type SubredditRule = typeof subredditRules.$inferSelect;
 export type InsertSubredditRule = z.infer<typeof insertSubredditRuleSchema>;
 
 export type PostTemplate = typeof postTemplates.$inferSelect;
 export type InsertPostTemplate = z.infer<typeof insertPostTemplateSchema>;
 
 export type PostPreview = typeof postPreviews.$inferSelect;
 export type InsertPostPreview = z.infer<typeof insertPostPreviewSchema>;
diff --git a/shared/schema.ts b/shared/schema.ts
index 9d5f85a6b4cc49cf476fbf28791bc49157cbaa48..8013895b8d8336ddc6204f22eb2529fa35bd003c 100644
--- a/shared/schema.ts
+++ b/shared/schema.ts
@@ -753,26 +763,26 @@ export const adminAuditLog = pgTable("admin_audit_log", {
   id: serial("id").primaryKey(),
   adminId: integer("admin_id").references(() => users.id).notNull(),
   action: varchar("action", { length: 100 }).notNull(),
   targetType: varchar("target_type", { length: 50 }), // user, content, system
   targetId: integer("target_id"),
   description: text("description").notNull(),
   ipAddress: varchar("ip_address", { length: 45 }),
   metadata: jsonb("metadata"),
   createdAt: timestamp("created_at").defaultNow().notNull(),
 });
 
 // Insert schemas for new admin tables
 export const insertSystemLogSchema = createInsertSchema(systemLogs);
 export const insertContentFlagSchema = createInsertSchema(contentFlags);
 export const insertUserActionSchema = createInsertSchema(userActions);
 export const insertAdminAuditLogSchema = createInsertSchema(adminAuditLog);
 
 export type InsertSystemLog = z.infer<typeof insertSystemLogSchema>;
 export type InsertContentFlag = z.infer<typeof insertContentFlagSchema>;
 export type InsertUserAction = z.infer<typeof insertUserActionSchema>;
 export type InsertAdminAuditLog = z.infer<typeof insertAdminAuditLogSchema>;
 
 export type SystemLog = typeof systemLogs.$inferSelect;
 export type ContentFlag = typeof contentFlags.$inferSelect;
 export type UserAction = typeof userActions.$inferSelect;
-export type AdminAuditLog = typeof adminAuditLog.$inferSelect;
+export type AdminAuditLog = typeof adminAuditLog.$inferSelect;
