Update theme detection logic in main.tsx
Sep 22 · a1davida1/TPilot · main
+40-4
* In `client/src/main.tsx`, replace the manual `prefersDark` logic with a check for `localStorage.getItem('thottopilot-ui-theme')` and fall back to `window.matchMedia('(prefers-color-scheme: dark)')` so the initial class matches the provider’s resolved theme.
* Ensure the bootstrap removes any previously set `light`/`dark` class before adding the resolved one, mirroring the provider’s effect.
* Keep the logic resilient when `window` or `matchMedia` is unavailable (SSR/older browsers).
* Run `npm run lint` and `npm test` before committing.

Summary

    Reworked the client bootstrap theme handling to read the thottopilot-ui-theme localStorage value, validate it, fall back to matchMedia('(prefers-color-scheme: dark)'), and apply the resolved theme after clearing any existing light/dark classes while remaining safe when window or document are unavailable.

Testing

    ✅ npm run lint (passes with pre-existing warnings elsewhere in the repo)

❌ npm test (fails due to numerous existing suite errors such as missing external services, image processing issues, and session/storage configuration problems)


client/src/main.tsx
+40-4
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

// Apply dark theme by default, but allow theme toggle to override
const savedTheme = localStorage.getItem('theme');
const prefersDark = savedTheme === 'dark' || (!savedTheme);
document.documentElement.classList.add(prefersDark ? 'dark' : 'light');
const themeStorageKey = "thottopilot-ui-theme"

type StoredTheme = "dark" | "light" | "system"

const isStoredTheme = (value: string | null): value is StoredTheme =>
  value === "dark" || value === "light" || value === "system"

const readStoredTheme = (): StoredTheme | null => {
  if (typeof window === "undefined" || !("localStorage" in window)) {
    return null
  }

  try {
    const storedValue = window.localStorage.getItem(themeStorageKey)
    return isStoredTheme(storedValue) ? storedValue : null
  } catch {
    return null
  }
}

const resolveTheme = (): "dark" | "light" => {
  const storedTheme = readStoredTheme()

  if (storedTheme === "dark" || storedTheme === "light") {
    return storedTheme
  }

  if (typeof window !== "undefined" && typeof window.matchMedia === "function") {
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
  }

  return "light"
}

if (typeof document !== "undefined") {
  const resolvedTheme = resolveTheme()
  const root = document.documentElement
  root.classList.remove("light", "dark")
  root.classList.add(resolvedTheme)
}

const rootElement = document.getElementById("root");
if (!rootElement) {
  throw new Error('Root element not found');
}

try {
  createRoot(rootElement).render(<App />);
} catch (error) {
  console.error('Failed to render app:', error);
  rootElement.innerHTML = `
    <div style="padding: 20px; text-align: center;">
      <h1>Loading Error</h1>
      <p>There was an error loading the application. Please refresh the page.</p>
      <button onclick="window.location.reload()">Refresh</button>
    </div>
  `;
}
