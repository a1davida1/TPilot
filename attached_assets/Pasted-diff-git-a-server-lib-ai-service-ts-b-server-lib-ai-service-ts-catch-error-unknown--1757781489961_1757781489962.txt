diff --git a/server/lib/ai-service.ts b/server/lib/ai-service.ts
@@
-    } catch (error: unknown) {
-      console.error('Gemini generation failed:', error);
-
-      if (error?.status === 429 || error?.message?.includes('quota')) {
+    } catch (error: unknown) {
+      console.error('Gemini generation failed:', error);
+
+      if ((error as any)?.status === 429 || (error as any)?.message?.includes('quota')) {
@@
-      } catch (fallbackError: unknown) {
-        console.error('OpenAI fallback failed:', fallbackError);
+      } catch (fallbackError: unknown) {
+        console.error('OpenAI fallback failed:', fallbackError);
@@
-        if (fallbackError?.code === 'insufficient_quota' || fallbackError?.status === 429) {
+        const fe = fallbackError as any;
+        if (fe?.code === 'insufficient_quota' || fe?.status === 429) {
@@
-  private static async generateWithGemini(input: unknown): Promise<Omit<AiResponse, 'cached'>> {
+  interface GenerationInput { platforms: string[]; styleHints?: string[]; prompt?: string; }
+
+  private static async generateWithGemini(input: GenerationInput): Promise<Omit<AiResponse, 'cached'>> {
@@
-    const systemPrompt = this.buildSystemPrompt(input.platforms, input.styleHints);
-    const userPrompt = input.prompt || \"Generate engaging content for adult content creator\";
+    const systemPrompt = this.buildSystemPrompt(input.platforms, input.styleHints);
+    const userPrompt = input.prompt ?? \"Generate engaging content for adult content creator\";
@@
-    const content = this.parseGeminiResponse(response.text(), input.platforms);
+    const content = this.parseGeminiResponse(response.text(), input.platforms);
@@
-  private static async generateWithOpenAI(input: unknown): Promise<Omit<AiResponse, 'cached'>> {
-    const systemPrompt = this.buildSystemPrompt(input.platforms, input.styleHints);
-    const userPrompt = input.prompt || \"Generate engaging content for adult content creator\";
+  private static async generateWithOpenAI(input: GenerationInput): Promise<Omit<AiResponse, 'cached'>> {
+    const systemPrompt = this.buildSystemPrompt(input.platforms, input.styleHints);
+    const userPrompt = input.prompt ?? \"Generate engaging content for adult content creator\";
@@
-      input.platforms
+      input.platforms
@@
-      console.warn('Failed to cache AI result (non-fatal):', error.message);
-      if (error?.code === '23503' && error?.constraint?.includes('user_id')) {
+      console.warn('Failed to cache AI result (non-fatal):', (error as any).message);
+      const err = error as any;
+      if (err?.code === '23503' && err?.constraint?.includes('user_id')) {
