diff --git a//dev/null b/tests/auth/signup.test.ts
index 0000000000000000000000000000000000000000..0be86db6bbbade94fa4c0a4d2b2367efff09bb77 100644
--- a//dev/null
+++ b/tests/auth/signup.test.ts
@@ -0,0 +1,80 @@
+import request from 'supertest';
+import express from 'express';
+import { describe, it, expect, beforeEach, vi } from 'vitest';
+
+// In-memory stores for mocking
+const users: unknown[] = [];
+const tokens: unknown[] = [];
+
+vi.mock('../../server/storage', () => ({
+  storage: {
+    getUserByUsername: vi.fn(async (username: string) => users.find(u => u.username === username)),
+    getUserByEmail: vi.fn(async (email: string) => users.find(u => u.email === email)),
+    createUser: vi.fn(async (data: unknown) => {
+      const user = { id: users.length + 1, emailVerified: false, ...data };
+      users.push(user);
+      return user;
+    }),
+    updateUserEmailVerified: vi.fn(async (userId: number, verified: boolean) => {
+      const user = users.find(u => u.id === userId);
+      if (user) user.emailVerified = verified;
+    }),
+    createVerificationToken: vi.fn(async (data: unknown) => {
+      const token = { id: tokens.length + 1, ...data };
+      tokens.push(token);
+      return token;
+    }),
+    getVerificationToken: vi.fn(async (token: string) => tokens.find(t => t.token === token)),
+    deleteVerificationToken: vi.fn(async (token: string) => {
+      const idx = tokens.findIndex(t => t.token === token);
+      if (idx !== -1) tokens.splice(idx, 1);
+    })
+  }
+}));
+
+const sendEmailMock = vi.fn(async () => true);
+vi.mock('../../server/services/email-service', () => ({
+  sendVerificationEmail: sendEmailMock,
+  emailService: { sendPasswordResetEmail: vi.fn(), sendWelcomeEmail: vi.fn() }
+}));
+
+import { setupAuth } from '../../server/auth';
+
+describe('Signup and email verification', () => {
+  beforeEach(() => {
+    users.length = 0;
+    tokens.length = 0;
+    sendEmailMock.mockClear();
+  });
+
+  it('verifies email before allowing login', async () => {
+    const app = express();
+    app.use(express.json());
+    setupAuth(app);
+
+    const signupRes = await request(app)
+      .post('/api/auth/signup')
+      .send({ username: 'alice', password: 'password123', email: 'alice@example.com' });
+
+    expect(signupRes.status).toBe(200);
+    expect(signupRes.body.message).toMatch(/verification email sent/i);
+    expect(sendEmailMock).toHaveBeenCalled();
+
+    const token = tokens[0].token;
+
+    const loginBefore = await request(app)
+      .post('/api/auth/login')
+      .send({ username: 'alice', password: 'password123' });
+    expect(loginBefore.status).toBe(403);
+
+    const verifyRes = await request(app).get(`/api/auth/verify-email?token=${token}`);
+    expect(verifyRes.status).toBe(200);
+
+    const loginAfter = await request(app)
+      .post('/api/auth/login')
+      .send({ username: 'alice', password: 'password123' });
+    expect(loginAfter.status).toBe(200);
+    expect(loginAfter.body.token).toBeDefined();
+  });
+});
+
