diff --git a/client/src/pages/tax-tracker.tsx b/client/src/pages/tax-tracker.tsx
index 1234567..89abcde 100644
--- a/client/src/pages/tax-tracker.tsx
+++ b/client/src/pages/tax-tracker.tsx
@@
-import React, { useState } from 'react';
-import { Calendar, Plus, TrendingUp, FileText, Calculator, Info, DollarSign, Receipt, Sparkles, Upload, X } from 'lucide-react';
+import React, { useState, useEffect } from 'react';
+import {
+  Calendar,
+  Plus,
+  TrendingUp,
+  FileText,
+  Calculator,
+  Info,
+  DollarSign,
+  Receipt,
+  Sparkles,
+  Upload,
+  X
+} from 'lucide-react';
@@
-import { Calendar as CalendarComponent } from '@/components/ui/calendar';
-import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO } from 'date-fns';
-
-// Apple-inspired color palette
-const colors = {
-  blue: '#007AFF',
-  purple: '#AF52DE',
-  pink: '#FF2D92',
-  orange: '#FF9500',
-  green: '#34C759',
-  red: '#FF3B30',
-  yellow: '#FFCC00',
-  indigo: '#5856D6',
-  teal: '#5AC8FA',
-  mint: '#00C7BE'
-};
-
-const expenseCategories = [
-  {
-    id: 1,
-    name: 'Beauty & Wellness',
-    icon: Sparkles,
-    color: colors.pink,
-    deductionPercentage: 100,
-    description: 'Professional beauty treatments, skincare, wellness services',
-    legalExplanation: 'Beauty and wellness expenses are 100% deductible for content creators as they directly relate to maintaining your professional appearance and brand image.',
-    examples: ['Professional makeup', 'Skincare treatments', 'Hair styling', 'Nail services', 'Spa treatments', 'Fitness training']
-  },
-  {
-    id: 2,
-    name: 'Wardrobe & Fashion',
-    icon: Receipt,
-    color: colors.purple,
-    deductionPercentage: 100,
-    description: 'Clothing, accessories, and fashion items for content',
-    legalExplanation: 'Clothing and accessories purchased specifically for content creation are fully deductible business expenses.',
-    examples: ['Lingerie & outfits', 'Shoes & accessories', 'Costumes', 'Jewelry', 'Designer pieces', 'Seasonal wardrobe']
-  },
-  {
-    id: 3,
-    name: 'Technology & Equipment',
-    icon: Calculator,
-    color: colors.blue,
-    deductionPercentage: 100,
-    description: 'Cameras, lighting, computers, and tech gear',
-    legalExplanation: 'All technology and equipment used for content creation and business operations are fully deductible.',
-    examples: ['Cameras & lenses', 'Lighting equipment', 'Computers & tablets', 'Editing software', 'Storage devices', 'Audio equipment']
-  },
-  {
-    id: 4,
-    name: 'Travel & Entertainment',
-    icon: TrendingUp,
-    color: colors.teal,
-    deductionPercentage: 100,
-    description: 'Business travel, events, and entertainment expenses',
-    legalExplanation: 'Travel for business purposes, including content creation trips and industry events, is fully deductible.',
-    examples: ['Business travel', 'Hotel stays', 'Convention tickets', 'Networking events', 'Content creation trips', 'Transportation']
-  },
-  {
-    id: 5,
-    name: 'Home Office & Utilities',
-    icon: FileText,
-    color: colors.green,
-    deductionPercentage: 100,
-    description: 'Home office expenses, internet, phone, utilities',
-    legalExplanation: 'Home office expenses including utilities, internet, and phone bills are deductible based on business use percentage.',
-    examples: ['Internet & phone', 'Utilities (portion)', 'Home office furniture', 'Decorations & props', 'Office supplies', 'Storage solutions']
-  },
-  {
-    id: 6,
-    name: 'Marketing & Promotion',
-    icon: DollarSign,
-    color: colors.orange,
-    deductionPercentage: 100,
-    description: 'Advertising, promotions, and marketing expenses',
-    legalExplanation: 'All marketing and promotional expenses to grow your business are fully deductible.',
-    examples: ['Social media ads', 'Website costs', 'Professional photography', 'Graphic design', 'Business cards', 'Promotional materials']
-  }
-];
+import { Calendar as CalendarComponent } from '@/components/ui/calendar';
+import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO } from 'date-fns';
+
+const iconMap: Record<string, React.ComponentType<any>> = {
+  Sparkles,
+  Receipt,
+  Calculator,
+  TrendingUp,
+  FileText,
+  DollarSign
+};
@@
-interface TaxTrackerProps {
+interface TaxTrackerProps {
   userTier?: 'guest' | 'free' | 'pro' | 'premium';
 }
@@
-  const [selectedCategory, setSelectedCategory] = useState(expenseCategories[0]);
+  const [selectedCategory, setSelectedCategory] = useState<any>(null);
@@
-  const queryClient = useQueryClient();
+  const queryClient = useQueryClient();
+
+  const { data: expenseCategories = [], isLoading: categoriesLoading } = useQuery({
+    queryKey: ['/api/expense-categories'],
+    queryFn: async () => {
+      const res = await apiRequest('GET', '/api/expense-categories');
+      return res.json();
+    }
+  });
+
+  useEffect(() => {
+    if (!selectedCategory && expenseCategories.length > 0) {
+      setSelectedCategory(expenseCategories[0]);
+    }
+  }, [expenseCategories, selectedCategory]);
+
+  const SelectedIcon = selectedCategory ? iconMap[selectedCategory.icon] || Sparkles : Sparkles;
@@
-  const { data: expenseTotals = { total: 0, deductible: 0, byCategory: {} } } = useQuery({
+  const { data: expenseTotals = { total: 0, deductible: 0, byCategory: {} } } = useQuery({
     queryKey: ['/api/expenses/totals'],
     queryFn: async () => {
       const res = await apiRequest('GET', '/api/expenses/totals');
       return res.json();
     }
   });
+
+  const estimatedSavings = Math.round((expenseTotals?.deductible || 0) * 0.22);
@@
-      const response = await apiRequest('POST', '/api/expenses', expenseData);
-      return response.json();
-    },
+      const response = await apiRequest('POST', '/api/expenses', expenseData);
+      return response.json();
+    },
@@
-  const uploadReceiptMutation = useMutation({
-    mutationFn: async ({ expenseId, file }: { expenseId: string; file: File }) => {
-      const formData = new FormData();
-      formData.append('receipt', file);
-      // For file uploads, we need to use fetch directly but with proper auth headers
-      const token = localStorage.getItem('authToken');
-      const headers: Record<string, string> = {};
-      if (token) {
-        headers['Authorization'] = `Bearer ${token}`;
-      }
-      const res = await fetch(`/api/expenses/${expenseId}/receipt`, {
-        method: 'POST',
-        headers,
-        body: formData,
-        credentials: 'include'
-      });
-      if (!res.ok) throw new Error('Failed to upload receipt');
-      return res.json();
-    },
-    onSuccess: () => {
-      queryClient.invalidateQueries({ queryKey: ['/api/expenses'] });
-      setShowReceiptModal(false);
-      setReceiptFile(null);
-      setReceiptExpenseId('');
-    }
-  });
+  const uploadReceiptMutation = useMutation({
+    mutationFn: async ({ expenseId, file }: { expenseId: string; file: File }) => {
+      const formData = new FormData();
+      formData.append('receipt', file);
+      const res = await apiRequest('POST', `/api/expenses/${expenseId}/receipt`, formData);
+      return res.json();
+    },
+    onSuccess: (updatedExpense) => {
+      queryClient.setQueryData(['/api/expenses'], (old: any[] = []) =>
+        old.map(exp => (exp.id === updatedExpense.id ? updatedExpense : exp))
+      );
+      queryClient.invalidateQueries({ queryKey: ['/api/expenses/range'] });
+      setShowReceiptModal(false);
+      setReceiptFile(null);
+      setReceiptExpenseId('');
+    }
+  });
@@
-      description: expenseForm.description,
-      amount: parseFloat(expenseForm.amount),
-      categoryId: parseInt(expenseForm.category),
-      expenseDate: expenseForm.date,
-      notes: expenseForm.notes
-    });
+      description: expenseForm.description,
+      amount: Math.round(parseFloat(expenseForm.amount) * 100),
+      categoryId: parseInt(expenseForm.category),
+      expenseDate: expenseForm.date,
+      notes: expenseForm.notes
+    });
@@
-      const dayExpenses = calendarExpenses.filter((expense: any) =>
-        isSameDay(parseISO(expense.date), day)
-      );
-      const totalAmount = dayExpenses.reduce((sum: number, expense: any) => sum + expense.amount, 0);
+      const dayExpenses = calendarExpenses.filter((expense: any) =>
+        isSameDay(parseISO(expense.expenseDate), day)
+      );
+      const totalAmount = dayExpenses.reduce((sum: number, expense: any) => sum + expense.amount, 0);
+      const hasReceipt = dayExpenses.some((expense: any) => expense.receiptUrl);
 
       return {
         date: day,
         expenses: dayExpenses,
-        totalAmount
+        totalAmount,
+        hasReceipt
       };
     });
   };
@@
-                  <p className=\"text-2xl font-bold text-gray-900\">${(expenseTotals?.totalExpenses || 0).toLocaleString()}</p>
+                  <p className=\"text-2xl font-bold text-gray-900\">${((expenseTotals?.total || 0) / 100).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>
@@
-                  <p className=\"text-2xl font-bold text-gray-900\">${(expenseTotals?.totalDeductions || 0).toLocaleString()}</p>
+                  <p className=\"text-2xl font-bold text-gray-900\">${((expenseTotals?.deductible || 0) / 100).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>
@@
-                  <p className=\"text-2xl font-bold text-gray-900\">${(expenseTotals?.estimatedSavings || 0).toLocaleString()}</p>
+                  <p className=\"text-2xl font-bold text-gray-900\">${(estimatedSavings / 100).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>
@@
-              {expenseCategories.map((category, index) => {
-                const IconComponent = category.icon;
-                return (
-                  <div key={category.id}>
-                    <Card
-                      className=\"bg-white/80 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 cursor-pointer group\"
-                      onClick={() => setSelectedCategory(category)}
-                    >
-                      <CardContent className=\"p-6\">
-                        <div className=\"space-y-4\">
-                          <div className=\"flex items-center justify-between\">
-                            <div
-                              className=\"p-3 rounded-xl text-white shadow-lg\"
-                              style={{ backgroundColor: category.color }}
-                            >
-                              <IconComponent className=\"h-6 w-6\" />
-                            </div>
-                            <Badge className=\"bg-green-100 text-green-700\">
-                              {category.deductionPercentage}% Deductible
-                            </Badge>
-                          </div>
-
-                          <div>
-                            <h3 className=\"font-bold text-lg text-gray-900 group-hover:text-purple-600 transition-colors\">
-                              {category.name}
-                            </h3>
-                            <p className=\"text-sm text-gray-600 mt-1\">
-                              {category.description}
-                            </p>
-                          </div>
-
-                          <div className=\"pt-2 border-t border-gray-100\">
-                            <p className=\"text-xs text-gray-500 mb-2\">Examples:</p>
-                            <div className=\"flex flex-wrap gap-1\">
-                              {category.examples.slice(0, 3).map((example, idx) => (
-                                <Badge key={idx} variant=\"outline\" className=\"text-xs\">
-                                  {example}
-                                </Badge>
-                              ))}
-                              {category.examples.length > 3 && (
-                                <Badge variant=\"outline\" className=\"text-xs\">
-                                  +{category.examples.length - 3} more
-                                </Badge>
-                              )}
-                            </div>
-                          </div>
-                        </div>
-                      </CardContent>
-                    </Card>
-                  </div>
-                );
-              })}
+              {categoriesLoading ? (
+                <div>Loading...</div>
+              ) : (
+                expenseCategories.map((category: any, index: number) => {
+                  const IconComponent = iconMap[category.icon] || Sparkles;
+                  return (
+                    <div key={category.id}>
+                      <Card
+                        className=\"bg-white/80 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 cursor-pointer group\"
+                        onClick={() => setSelectedCategory(category)}
+                      >
+                        <CardContent className=\"p-6\">
+                          <div className=\"space-y-4\">
+                            <div className=\"flex items-center justify-between\">
+                              <div
+                                className=\"p-3 rounded-xl text-white shadow-lg\"
+                                style={{ backgroundColor: category.color || '#ccc' }}
+                              >
+                                <IconComponent className=\"h-6 w-6\" />
+                              </div>
+                              <Badge className=\"bg-green-100 text-green-700\">
+                                {category.deductionPercentage}% Deductible
+                              </Badge>
+                            </div>
+
+                            <div>
+                              <h3 className=\"font-bold text-lg text-gray-900 group-hover:text-purple-600 transition-colors\">
+                                {category.name}
+                              </h3>
+                              <p className=\"text-sm text-gray-600 mt-1\">
+                                {category.description}
+                              </p>
+                            </div>
+
+                            <div className=\"pt-2 border-t border-gray-100\">
+                              <p className=\"text-xs text-gray-500 mb-2\">Examples:</p>
+                              <div className=\"flex flex-wrap gap-1\">
+                                {category.examples?.slice(0, 3).map((example: any, idx: number) => (
+                                  <Badge key={idx} variant=\"outline\" className=\"text-xs\">
+                                    {example}
+                                  </Badge>
+                                ))}
+                                {category.examples && category.examples.length > 3 && (
+                                  <Badge variant=\"outline\" className=\"text-xs\">
+                                    +{category.examples.length - 3} more
+                                  </Badge>
+                                )}
+                              </div>
+                            </div>
+                          </div>
+                        </CardContent>
+                      </Card>
+                    </div>
+                  );
+                })
+              )}
             </div>
@@
-            {selectedCategory && (
-              <div>
-                  <Card className=\"bg-white/90 backdrop-blur-sm border-0 shadow-xl\">
-                    <CardHeader>
-                      <CardTitle className=\"flex items-center space-x-3\">
-                        <div
-                          className=\"p-2 rounded-lg text-white\"
-                          style={{ backgroundColor: selectedCategory.color }}
-                        >
-                          <selectedCategory.icon className=\"h-5 w-5\" />
-                        </div>
-                        <span>{selectedCategory.name} - Legal Details</span>
-                      </CardTitle>
-                    </CardHeader>
-                    <CardContent className=\"space-y-4\">
+            {selectedCategory && (
+              <div>
+                  <Card className=\"bg-white/90 backdrop-blur-sm border-0 shadow-xl\">
+                    <CardHeader>
+                      <CardTitle className=\"flex items-center space-x-3\">
+                        <div
+                          className=\"p-2 rounded-lg text-white\"
+                          style={{ backgroundColor: selectedCategory.color || '#ccc' }}
+                        >
+                          <SelectedIcon className=\"h-5 w-5\" />
+                        </div>
+                        <span>{selectedCategory.name} - Legal Details</span>
+                      </CardTitle>
+                    </CardHeader>
+                    <CardContent className=\"space-y-4\">
                       <div className=\"p-4 bg-blue-50 rounded-xl border border-blue-200\">
                         <div className=\"flex items-start space-x-3\">
                           <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />
                           <div>
                             <h4 className=\"font-semibold text-blue-900 mb-2\">Tax Deduction Explanation</h4>
                             <p className=\"text-blue-800 text-sm leading-relaxed\">
                               {selectedCategory.legalExplanation}
                             </p>
                           </div>
                         </div>
                       </div>
 
                       <div>
                         <h4 className=\"font-semibold text-gray-900 mb-3\">What's Included:</h4>
                         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">
-                          {selectedCategory.examples.map((example, idx) => (
-                            <div key={idx} className=\"flex items-center space-x-2 p-2 bg-gray-50 rounded-lg\">
+                          {selectedCategory.examples?.map((example: any, idx: number) => (
+                            <div key={idx} className=\"flex items-center space-x-2 p-2 bg-gray-50 rounded-lg\">
                               <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>
                               <span className=\"text-sm text-gray-700\">{example}</span>
                             </div>
                           ))}
                         </div>
                       </div>
                     </CardContent>
                   </Card>
                 </div>
               )}
@@
-                    {expenseCategories.map(category => (
-                      <SelectItem key={category.id} value={category.name}>
-                        {category.name}
-                      </SelectItem>
-                    ))}
+                    {expenseCategories.map((category: any) => (
+                      <SelectItem key={category.id} value={String(category.id)}>
+                        {category.name}
+                      </SelectItem>
+                    ))}
                   </SelectContent>
                 </Select>
               </div>
@@
-                        <div className=\"text-right\">
-                          <p className=\"font-bold text-gray-900\">${expense.amount}</p>
-                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">
-                            100% Deductible
-                          </Badge>
-                        </div>
+                        <div className=\"text-right\">
+                          <p className=\"font-bold text-gray-900\">${(expense.amount / 100).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}</p>
+                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">
+                            {expense.deductionPercentage || 100}% Deductible
+                          </Badge>
+                          {expense.receiptUrl && (
+                            <Button variant=\"link\" size=\"sm\" asChild>
+                              <a href={expense.receiptUrl} target=\"_blank\" rel=\"noopener noreferrer\">
+                                View Receipt
+                              </a>
+                            </Button>
+                          )}
+                        </div>
                       </div>
                     ))
                   )}
@@
-                    <div
-                      key={index}
-                      className={`
-                        min-h-[80px] p-2 border border-gray-200 rounded-lg cursor-pointer
-                        hover:bg-gray-50 transition-colors
-                        ${isSameDay(dayData.date, new Date()) ? 'bg-purple-50 border-purple-200' : 'bg-white'}
-                      `}
-                    >
+                    <div
+                      key={index}
+                      className={`
+                        min-h-[80px] p-2 border border-gray-200 rounded-lg cursor-pointer
+                        hover:bg-gray-50 transition-colors
+                        ${isSameDay(dayData.date, new Date()) ? 'bg-purple-50 border-purple-200' : 'bg-white'}
+                      `}
+                      onClick={() => {
+                        const receiptExp = dayData.expenses.find((e: any) => e.receiptUrl);
+                        if (receiptExp) window.open(receiptExp.receiptUrl, '_blank');
+                      }}
+                    >
                       <div className=\"text-sm font-medium text-gray-900 mb-1\">
                         {format(dayData.date, 'd')}
                       </div>
                       {dayData.totalAmount > 0 && (
                         <div className=\"space-y-1\">
                           <div className=\"text-xs font-medium text-green-600\">
-                            ${dayData.totalAmount.toLocaleString()}
+                            ${(dayData.totalAmount / 100).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}
                           </div>
-                          <div className=\"text-xs text-gray-500\">
-                            {dayData.expenses.length} expense{dayData.expenses.length !== 1 ? 's' : ''}
-                          </div>
+                          <div className=\"text-xs text-gray-500 flex items-center\">
+                            {dayData.expenses.length} expense{dayData.expenses.length !== 1 ? 's' : ''}
+                            {dayData.hasReceipt && <Receipt className=\"h-3 w-3 ml-1 text-purple-500\" />}
+                          </div>
                         </div>
                       )}
                     </div>
                   ))}
@@
-                          <p className=\"text-sm text-gray-500\">{expense.category} • {format(parseISO(expense.date), 'MMM d, yyyy')}</p>
+                          <p className=\"text-sm text-gray-500\">{expense.category} • {format(parseISO(expense.expenseDate), 'MMM d, yyyy')}</p>
                         </div>
