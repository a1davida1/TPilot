diff --git a/client/src/components/auth-modal.tsx b/client/src/components/auth-modal.tsx
index 716907c69f9e0d3eb19fb6ecbb253493d8c40da1..41b5430a1214a846f048bc02a555285623739ec2 100644
--- a/client/src/components/auth-modal.tsx
+++ b/client/src/components/auth-modal.tsx
@@ -1,70 +1,72 @@
 import { useState, useEffect } from "react";
 import { useMutation } from "@tanstack/react-query";
 import { Card } from "@/components/ui/card";
 import { Button } from "@/components/ui/button";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Separator } from "@/components/ui/separator";
 import { Badge } from "@/components/ui/badge";
 import { Alert, AlertDescription } from "@/components/ui/alert";
 import { useToast } from "@/hooks/use-toast";
+import { useAuth } from "@/hooks/useAuth";
 import { queryClient, apiRequest } from "@/lib/queryClient";
 import { FaGoogle, FaFacebook, FaReddit } from "react-icons/fa";
 import { 
   X, 
   Mail, 
   Lock, 
   User,
   ArrowRight,
   Sparkles,
   CheckCircle,
   AlertCircle
 } from "lucide-react";
 
 // TypeScript interfaces for authentication responses
 interface AuthResponse {
   mustChangePassword?: boolean;
   userId?: string;
   message?: string;
 }
 
 interface AuthError {
   code?: string;
   email?: string;
   message?: string;
 }
 
 interface AuthModalProps {
   isOpen: boolean;
   onClose: () => void;
   onSuccess: () => void;
   initialMode?: 'login' | 'signup';
 }
 
 export function AuthModal({ isOpen, onClose, onSuccess, initialMode = 'login' }: AuthModalProps) {
   const { toast } = useToast();
+  const { login } = useAuth();
   const [mode, setMode] = useState<'login' | 'signup' | 'forgot-password'>(initialMode);
   const [formData, setFormData] = useState({
     username: '',
     email: '',
     password: ''
   });
   const [resetEmail, setResetEmail] = useState('');
   const [showResendVerification, setShowResendVerification] = useState(false);
   const [resendEmail, setResendEmail] = useState('');
   const [isResending, setIsResending] = useState(false);
 
   // Add URL parameter handling for email verification
   useEffect(() => {
     if (!isOpen) return;
     
     const urlParams = new URLSearchParams(window.location.search);
     const verified = urlParams.get('verified');
     const verificationError = urlParams.get('error');
     const verifiedEmail = urlParams.get('email');
     
     if (verified === 'true') {
       toast({
         title: "âœ… Email Verified!",
         description: `Your email ${verifiedEmail || ''} has been verified. You can now login.`,
         duration: 5000,
diff --git a/client/src/components/auth-modal.tsx b/client/src/components/auth-modal.tsx
index 716907c69f9e0d3eb19fb6ecbb253493d8c40da1..41b5430a1214a846f048bc02a555285623739ec2 100644
--- a/client/src/components/auth-modal.tsx
+++ b/client/src/components/auth-modal.tsx
@@ -93,93 +95,95 @@ export function AuthModal({ isOpen, onClose, onSuccess, initialMode = 'login' }:
     }
   }, [isOpen, toast]);
 
   // Reset mode when modal opens - moved to useEffect to prevent render loop
   useEffect(() => {
     if (isOpen && mode !== initialMode && mode !== 'forgot-password') {
       setMode(initialMode);
     }
   }, [isOpen, initialMode, mode]);
 
   const authMutation = useMutation({
     mutationFn: async (data: typeof formData) => {
       const endpoint = mode === 'login' ? '/api/auth/login' : '/api/auth/signup';
       
       // Prepare request data - exclude email for login mode unless signup
       const requestData = mode === 'login' 
         ? { username: data.username, password: data.password }
         : { username: data.username, email: data.email, password: data.password };
       
       // Handle response errors properly for email verification
       const response = await fetch(endpoint, {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json'
         },
+        credentials: 'include',
         body: JSON.stringify(requestData)
       });
 
       const responseData = await response.json();
 
       if (!response.ok) {
         const error = new Error(responseData.message || 'Authentication failed');
         (error as any).code = responseData.code;
         (error as any).email = responseData.email;
         throw error;
       }
 
       // Mark password change requirement in response data
       if (response.status === 202) {
         responseData.mustChangePassword = true;
       }
 
       return responseData;
     },
     onSuccess: async (data: AuthResponse) => {
       // Check for temporary password status (202 response) - handled in mutationFn
       if (data.mustChangePassword) {
         toast({
           title: 'Password Change Required',
           description: 'You must change your temporary password before continuing.'
         });
         setFormData({ username: '', email: '', password: '' });
         onClose();
         // Redirect to password change page with userId
         window.location.href = `/change-password?userId=${data.userId}`;
         return;
       }
       
       if (mode === 'login') {
         toast({
           title: 'Welcome back!',
           description: 'You have successfully logged in.'
         });
         
         // Reset form and close modal
         setFormData({ username: '', email: '', password: '' });
         onSuccess();
-        
+        login();
+
         // Refresh the page to update auth state with HttpOnly cookies
         setTimeout(() => {
           window.location.reload();
         }, 100);
       } else {
         toast({
           title: 'Account created!',
           description: 'Please check your email to verify your account before logging in.'
         });
         
         // Switch to login mode for verification
         setMode('login');
         setFormData({ username: '', email: '', password: '' });
       }
     },
     onError: async (error: AuthError) => {
       // Handle email not verified error specially
       if (error.code === 'EMAIL_NOT_VERIFIED') {
         setShowResendVerification(true);
         setResendEmail(error.email || formData.username);
         toast({
           title: 'Email not verified',
           description: 'Please verify your email to continue.',
           action: (
             <Button 
