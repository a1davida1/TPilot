diff --git a/server/auth.ts b/server/auth.ts
index f97a228046b86220d734a675ba5b805cba7fb766..b05890fbbca91231d4851f2cd3c71a602a40afaa 100644
--- a/server/auth.ts
+++ b/server/auth.ts
@@ -197,179 +197,50 @@ export function setupAuth(app: Express) {
     }
   });
 
   app.get('/api/auth/facebook', (req, res) => {
     // Similar to Google OAuth
     const appId = process.env.FACEBOOK_APP_ID;
     const redirectUri = encodeURIComponent(`${req.protocol}://${req.get('host')}/api/auth/facebook/callback`);
 
     if (!appId) {
       return res.status(500).json({ message: 'Facebook OAuth not configured' });
     }
 
     const authUrl = `https://www.facebook.com/v12.0/dialog/oauth?client_id=${appId}&redirect_uri=${redirectUri}&scope=email`;
     res.redirect(authUrl);
   });
 
   app.get('/api/auth/facebook/callback', async (req, res) => {
     try {
       res.redirect('/?error=oauth-not-implemented');
     } catch (error) {
       console.error('Facebook OAuth callback error:', error);
       res.redirect('/?error=oauth-failed');
     }
   });
 
-  app.get('/api/auth/reddit', (req, res) => {
-    // Similar to Google OAuth
-    const clientId = process.env.REDDIT_CLIENT_ID;
-    const redirectUri = encodeURIComponent(`${req.protocol}://${req.get('host')}/api/auth/reddit/callback`);
-
-    if (!clientId) {
-      return res.status(500).json({ message: 'Reddit OAuth not configured' });
-    }
-
-    const authUrl = `https://www.reddit.com/api/v1/authorize?client_id=${clientId}&response_type=code&state=RANDOM_STRING&redirect_uri=${redirectUri}&duration=permanent&scope=identity`;
-    res.redirect(authUrl);
-  });
-
-  app.get('/api/auth/reddit/callback', async (req: unknown, res) => {
-    try {
-      const { code, error, state } = req.query;
-      
-      if (error) {
-        console.error('Reddit OAuth error:', error);
-        return res.redirect(`/?error=${error}`);
-      }
-      
-      if (!code) {
-        return res.redirect('/?error=no-code');
-      }
-
-      // Exchange code for access token
-      const tokenResponse = await fetch('https://www.reddit.com/api/v1/access_token', {
-        method: 'POST',
-        headers: {
-          'Authorization': `Basic ${Buffer.from(`${process.env.REDDIT_CLIENT_ID}:${process.env.REDDIT_CLIENT_SECRET}`).toString('base64')}`,
-          'Content-Type': 'application/x-www-form-urlencoded',
-          'User-Agent': 'ThottoPilot/1.0'
-        },
-        body: new URLSearchParams({
-          grant_type: 'authorization_code',
-          code: code as string,
-          redirect_uri: `${req.protocol}://${req.get('host')}/api/auth/reddit/callback`
-        })
-      });
-
-      const tokenData = await tokenResponse.json();
-      
-      if (!tokenData.access_token) {
-        console.error('No access token received:', tokenData);
-        return res.redirect('/?error=token-failed');
-      }
-
-      // Get Reddit user info
-      const userResponse = await fetch('https://oauth.reddit.com/api/v1/me', {
-        headers: {
-          'Authorization': `Bearer ${tokenData.access_token}`,
-          'User-Agent': 'ThottoPilot/1.0'
-        }
-      });
-
-      const redditUser = await userResponse.json();
-      
-      if (!redditUser.name) {
-        return res.redirect('/?error=no-reddit-user');
-      }
-
-      // Find or create user
-      let user = await storage.getUserByUsername(redditUser.name);
-      
-      if (!user) {
-        // Create new user from Reddit
-        user = await storage.createUser({
-          email: `${redditUser.name}@reddit.local`, // Reddit doesn't provide email
-          username: redditUser.name,
-          password: crypto.randomBytes(32).toString('hex'), // Random password
-          tier: 'free',
-          provider: 'reddit',
-          providerId: redditUser.id,
-          avatar: redditUser.icon_img?.replace(/&amp;/g, '&'),
-          emailVerified: true // Auto-verify social accounts
-        });
-      } else {
-        // Update existing user with Reddit info
-        await storage.updateUser(user.id, {
-          provider: 'reddit',
-          providerId: redditUser.id,
-          avatar: user.avatar || redditUser.icon_img?.replace(/&amp;/g, '&')
-        });
-      }
-
-      // Create JWT token
-      const token = jwt.sign(
-        { 
-          id: user.id,
-          userId: user.id, 
-          username: user.username,
-          email: user.email
-        },
-        JWT_SECRET,
-        { expiresIn: '24h' }
-      );
-
-      // Store token in session or cookie
-      res.cookie('authToken', token, {
-        httpOnly: true,
-        secure: process.env.NODE_ENV === 'production',
-        sameSite: 'lax',
-        maxAge: 24 * 60 * 60 * 1000 // 24 hours
-      });
-
-      // Set session for passport compatibility
-      req.session.userId = user.id;
-      req.session.user = {
-        id: user.id,
-        username: user.username,
-        email: user.email,
-        tier: user.tier || 'free'
-      };
-      
-      // Save session before redirecting
-      req.session.save((err: unknown) => {
-        if (err) {
-          console.error('Session save error:', err);
-        }
-        res.redirect('/dashboard?reddit=connected');
-      });
-      
-    } catch (error) {
-      console.error('Reddit OAuth callback error:', error);
-      res.redirect('/?error=oauth-failed');
-    }
-  });
-
   // Password reset request
   app.post('/api/auth/forgot-password', async (req, res) => {
     try {
       const { email } = req.body;
       
       if (!email) {
         return res.status(400).json({ message: 'Email is required' });
       }
 
       // Find user by email
       const user = await storage.getUserByEmail(email);
       
       if (!user) {
         // Don't reveal if email exists for security
         return res.json({ message: 'If the email exists, a reset link has been sent' });
       }
 
       // Send password reset email
       if (user.email) {
         await emailService.sendPasswordResetEmail(user.email, user.username);
       }
 
       res.json({ message: 'If the email exists, a reset link has been sent' });
     } catch (error) {
       console.error('Password reset request error:', error);
