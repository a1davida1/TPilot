diff --git a/tests/unit/expenses/expense-categories.test.ts b/tests/unit/expenses/expense-categories.test.ts
index 36f37027985e4d46f490ba008b67d7d021814e94..60f4f73afb79ae35a088b33ce573df8822608fc6 100644
--- a/tests/unit/expenses/expense-categories.test.ts
+++ b/tests/unit/expenses/expense-categories.test.ts
@@ -1,53 +1,50 @@
 import { storage } from "../../server/storage";
 /* eslint-env node, jest */
 import { describe, test, expect, beforeEach, vi } from 'vitest';
 import { InsertExpenseCategory } from '@shared/schema';
 
 // Mock database with proper hoisting
 vi.mock('../../../server/db.js', () => ({
   db: {
     insert: vi.fn().mockReturnThis(),
     select: vi.fn().mockReturnThis(),
     update: vi.fn().mockReturnThis(),
     values: vi.fn().mockReturnThis(),
     returning: vi.fn(),
     from: vi.fn().mockReturnThis(),
     where: vi.fn().mockReturnThis(),
     limit: vi.fn().mockReturnThis(),
     set: vi.fn().mockReturnThis()
   }
 }));
 
-import { DatabaseStorage } from '../../../server/storage';
 import { db } from '../../../server/db.js';
 
 describe('Expense Categories Unit Tests', () => {
-  let storage: DatabaseStorage;
 
   beforeEach(() => {
-    storage = storage;
     vi.clearAllMocks();
   });
 
   describe('createExpenseCategory', () => {
     test('should create expense category with valid data', async () => {
       const categoryData: InsertExpenseCategory = {
         name: 'Professional Development',
         description: 'Courses, certifications, and training',
         deductionPercentage: 100,
         isActive: true
       };
 
       const expectedCategory = {
         id: 1,
         ...categoryData,
         createdAt: new Date(),
         updatedAt: new Date()
       };
 
       (db.returning as ReturnType<typeof vi.fn>).mockResolvedValueOnce([expectedCategory]);
 
       const result = await storage.createExpenseCategory(categoryData);
 
       expect(db.insert).toHaveBeenCalled();
       expect(db.values).toHaveBeenCalledWith(categoryData);
