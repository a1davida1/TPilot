diff --git a/server/fix-production-subscription.ts b/server/fix-production-subscription.ts
index 4d12d4a95be3b40d2dc5f0095c5db84092bba58f..64d924e987df9b3da72d795671f3540febafd77f 100644
--- a/server/fix-production-subscription.ts
+++ b/server/fix-production-subscription.ts
@@ -39,74 +39,82 @@ async function fixProductionSubscriptionStatus() {
     
     console.log(`‚úÖ Updated ${updateResult.rowCount} rows with invalid subscription_status`);
     
     // STEP 3: Add constraint without validation (NOT VALID)
     console.log('\nüîí STEP 3: Adding constraint (NOT VALID - won\'t check existing rows)...');
     try {
       // First check if constraint already exists
       const constraintExists = await db.execute(sql`
         SELECT constraint_name 
         FROM information_schema.table_constraints 
         WHERE table_name = 'users' 
         AND constraint_name = 'valid_subscription_status'
       `);
       
       if (constraintExists.rows.length > 0) {
         console.log('‚ö†Ô∏è  Constraint already exists, skipping creation');
       } else {
         await db.execute(sql`
           ALTER TABLE users
           ADD CONSTRAINT valid_subscription_status
           CHECK (subscription_status IN ('active','inactive','cancelled','past_due'))
           NOT VALID
         `);
         console.log('‚úÖ Constraint added (not validated yet)');
       }
-    } catch (error: any) {
-      if (error.message.includes('already exists')) {
-        console.log('‚ö†Ô∏è  Constraint already exists, continuing...');
+    } catch (error: unknown) {
+      if (error instanceof Error) {
+        if (error.message.includes('already exists')) {
+          console.log('‚ö†Ô∏è  Constraint already exists, continuing...');
+        } else {
+          throw error;
+        }
       } else {
         throw error;
       }
     }
     
     // STEP 4: Validate the constraint
     console.log('\n‚úîÔ∏è  STEP 4: Validating constraint for all existing rows...');
     try {
       await db.execute(sql`
         ALTER TABLE users
         VALIDATE CONSTRAINT valid_subscription_status
       `);
       console.log('‚úÖ Constraint validated successfully');
-    } catch (error: any) {
-      if (error.message.includes('is already validated')) {
-        console.log('‚úÖ Constraint was already validated');
+    } catch (error: unknown) {
+      if (error instanceof Error) {
+        if (error.message.includes('is already validated')) {
+          console.log('‚úÖ Constraint was already validated');
+        } else {
+          throw error;
+        }
       } else {
         throw error;
       }
     }
     
     // Final verification
     console.log('\nüìà Final subscription_status distribution:');
     const finalResult = await db.execute(sql`
       SELECT subscription_status, COUNT(*) as count
       FROM users
       GROUP BY subscription_status
       ORDER BY count DESC
     `);
     
     console.table(finalResult.rows);
     
     console.log('\n‚úÖ Production database fixed successfully!');
     console.log('You can now retry your deployment.');
     
   } catch (error) {
     console.error('\n‚ùå Error fixing production database:', error);
     console.error('\nIf this script fails, you can run the SQL manually in the database pane.');
     process.exit(1);
   }
   
   process.exit(0);
 }
 
 // Run the fix
-fixProductionSubscriptionStatus();
+fixProductionSubscriptionStatus();
