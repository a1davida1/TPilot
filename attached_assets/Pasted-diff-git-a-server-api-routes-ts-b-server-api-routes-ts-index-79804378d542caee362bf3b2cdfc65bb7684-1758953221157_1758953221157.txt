diff --git a/server/api-routes.ts b/server/api-routes.ts
index 79804378d542caee362bf3b2cdfc65bb76843a61..76217907dc465d536da1a82cf0c7c4df24390834 100644
--- a/server/api-routes.ts
+++ b/server/api-routes.ts
@@ -1,45 +1,81 @@
-import type { Express } from "express";
+import type { Express, Response } from "express";
 import { db } from "./db.js";
 import { storage } from "./storage.js";
 import { AiService } from "./lib/ai-service.js";
 import { generateEnhancedContent } from "./services/enhanced-ai-service.js";
 import { AppError, CircuitBreaker } from "./lib/errors.js";
 import { MediaManager } from "./lib/media.js";
 import { CCBillProcessor } from "./lib/billing.js";
 import { PolicyLinter } from "./lib/policyLinter.js";
 import { PostScheduler } from "./lib/scheduling.js";
 import { addJob, QueueNames } from "./lib/queue/index.js";
 import { getErrorMessage } from "./utils/error.js";
 import { RedditManager } from "./lib/reddit.js";
 import { postJobs, subscriptions, mediaAssets, creatorAccounts, users, userSamples } from "@shared/schema";
 import { eq, desc, sql } from "drizzle-orm";
 import multer from "multer";
-import type { Request, Response, NextFunction } from 'express';
+import type { Request, NextFunction } from 'express';
 import { authenticateToken, type AuthRequest } from './middleware/auth.js';
 import { z, ZodError } from "zod";
 
+type AiHistoryDependencies = {
+  getUserHistory?: (userId: number, limit?: number) => Promise<unknown[]>;
+};
+
+export function createAiHistoryHandler(
+  dependencies: AiHistoryDependencies = {}
+) {
+  const { getUserHistory = AiService.getUserHistory } = dependencies;
+
+  return async (req: AuthRequest, res: Response) => {
+    try {
+      const userId = req.user?.id;
+
+      if (!userId) {
+        return res.status(500).json({ error: 'Authenticated user context missing' });
+      }
+
+      const limitQuery = Array.isArray(req.query.limit)
+        ? req.query.limit[0]
+        : req.query.limit;
+      const parsedLimit = typeof limitQuery === 'string'
+        ? Number.parseInt(limitQuery, 10)
+        : undefined;
+      const limit = Number.isFinite(parsedLimit) && parsedLimit && parsedLimit > 0
+        ? parsedLimit
+        : 20;
+
+      const history = await getUserHistory(userId, limit);
+      res.json(history);
+    } catch (error: unknown) {
+      console.error('Failed to get AI history:', error);
+      res.status(500).json({ error: getErrorMessage(error) });
+    }
+  };
+}
+
 interface PostingJobPayload {
   userId: number;
   postJobId: number;
   subreddit: string;
   titleFinal: string;
   bodyFinal: string;
   mediaKey?: string;
 }
 
 // Create a proper User type alias from the schema
 type UserType = typeof users.$inferSelect;
 
 // Augment Express namespace to add user property
 declare global {
   namespace Express {
     interface Request {
       user?: UserType;
     }
   }
 }
 
 
 // Multer configuration for file uploads
 const upload = multer({
   storage: multer.memoryStorage(),
diff --git a/server/api-routes.ts b/server/api-routes.ts
index 79804378d542caee362bf3b2cdfc65bb76843a61..76217907dc465d536da1a82cf0c7c4df24390834 100644
--- a/server/api-routes.ts
+++ b/server/api-routes.ts
@@ -448,64 +484,47 @@ export function registerApiRoutes(app: Express) {
     const preferenceSchema = z.object({
       contentPreferences: z.object({
         toneOfVoice: z.string().optional(),
         contentStyle: z.string().optional(),
         personalBrand: z.string().optional(),
         contentLength: z.string().optional(),
         includeEmojis: z.boolean().optional(),
         promotionLevel: z.string().optional()
       })
     });
     const body = preferenceSchema.parse({
       contentPreferences: {
         toneOfVoice: req.body.toneOfVoice,
         contentStyle: req.body.contentStyle,
         personalBrand: req.body.personalBrand,
         contentLength: req.body.contentLength,
         includeEmojis: req.body.includeEmojis,
         promotionLevel: req.body.promotionLevel
       }
     });
     await storage.updateUserPreferences(req.user.id, { userId: req.user.id, ...body });
     res.json(req.body);
   });
 
   // AI Generation History
-  app.get('/api/ai/history', async (req, res) => {
-    try {
-      const user = req.user;
-
-      if (!user?.id) {
-        return res.status(401).json({ error: 'Authentication required' });
-      }
-
-      const userId = user.id;
-      const limit = parseInt(req.query.limit as string) || 20;
-
-      const history = await AiService.getUserHistory(userId, limit);
-      res.json(history);
-    } catch (error: unknown) {
-      console.error('Failed to get AI history:', error);
-      res.status(500).json({ error: getErrorMessage(error) });
-    }
-  });
+  app.get('/api/ai/history', authenticateToken, createAiHistoryHandler());
 
   // Public metrics for landing pages
   app.get('/api/metrics', async (_req, res) => {
     try {
       const [userCount, postCount, engagement] = await Promise.all([
         db.select({ count: sql<number>`count(*)` }).from(users),
         db.select({ count: sql<number>`count(*)` }).from(postJobs),
         db.select({ avg: sql<number>`COALESCE(AVG(${userSamples.performanceScore}), 0)` }).from(userSamples)
       ]);
 
       res.json({
         creators: userCount[0]?.count || 0,
         posts: postCount[0]?.count || 0,
         engagement: Math.round(engagement[0]?.avg || 0)
       });
     } catch (error: unknown) {
       console.error('Failed to fetch metrics:', error);
       res.status(500).json({ error: 'Internal server error' });
     }
   });
 }
