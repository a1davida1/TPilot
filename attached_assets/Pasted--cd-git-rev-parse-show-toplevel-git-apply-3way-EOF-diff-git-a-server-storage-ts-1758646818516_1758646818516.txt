 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/storage.ts b/server/storage.ts
index b16ee697f589bce2c5ba2ddb1f827fdb62352fcd..068fb310fe03af4adba7aaca9c2fa85f94ef02a8 100644
--- a/server/storage.ts
+++ b/server/storage.ts
@@ -117,51 +117,54 @@ export interface IStorage {
   getUserImages(userId: number): Promise<UserImage[]>;
   getUserImage(imageId: number, userId: number): Promise<UserImage | undefined>;
   updateUserImage(imageId: number, userId: number, updates: Partial<UserImage>): Promise<UserImage>;
   deleteUserImage(imageId: number, userId: number): Promise<void>;
   
   // Streak operations
   calculateDailyStreak(userId: number): Promise<number>;
 
   // Admin operations
   getTotalUserCount(): Promise<number>;
   getActiveUserCount(): Promise<number>;
   getTotalContentGenerated(): Promise<number>;
   getSubscriptionCounts(): Promise<{ free: number; starter: number; pro: number; }>;
   
   // Generation limit operations
   getDailyGenerationCount(userId: number): Promise<number>;
   
   // Expense operations
   createExpenseCategory(category: InsertExpenseCategory): Promise<ExpenseCategory>;
   getExpenseCategories(): Promise<ExpenseCategory[]>;
   getExpenseCategory(id: number): Promise<ExpenseCategory | undefined>;
   updateExpenseCategory(id: number, updates: Partial<ExpenseCategory>): Promise<ExpenseCategory>;
   deleteExpenseCategory(id: number): Promise<void>;
   
   createExpense(expense: InsertExpense): Promise<Expense>;
-  getUserExpenses(userId: number, taxYear?: number): Promise<Expense[]>;
+  getUserExpenses(
+    userId: number,
+    taxYear?: number
+  ): Promise<Array<Expense & { category: ExpenseCategory | null }>>;
   getExpense(id: number, userId: number): Promise<Expense | undefined>;
   updateExpense(id: number, userId: number, updates: Partial<Expense>): Promise<Expense>;
   deleteExpense(id: number, userId: number): Promise<void>;
   getExpensesByCategory(userId: number, categoryId: number, taxYear?: number): Promise<Expense[]>;
   getExpensesByDateRange(userId: number, startDate: Date, endDate: Date): Promise<Expense[]>;
   getExpenseTotals(userId: number, taxYear?: number): Promise<{ total: number; deductible: number; byCategory: { [key: string]: number } }>;
   
   getTaxDeductionInfo(): Promise<TaxDeductionInfo[]>;
   getTaxDeductionInfoByCategory(category: string): Promise<TaxDeductionInfo[]>;
   createTaxDeductionInfo(info: InsertTaxDeductionInfo): Promise<TaxDeductionInfo>;
 
   // Social Media operations
   createSocialMediaAccount(account: InsertSocialMediaAccount): Promise<SocialMediaAccount>;
   getUserSocialMediaAccounts(userId: number): Promise<SocialMediaAccount[]>;
   getSocialMediaAccount(accountId: number): Promise<SocialMediaAccount | undefined>;
   updateSocialMediaAccount(accountId: number, updates: Partial<SocialMediaAccount>): Promise<SocialMediaAccount>;
   deleteSocialMediaAccount(accountId: number): Promise<void>;
   
   createSocialMediaPost(post: InsertSocialMediaPost): Promise<SocialMediaPost>;
   getUserSocialMediaPosts(userId: number, filters?: { platform?: string; status?: string; limit?: number; offset?: number }): Promise<SocialMediaPost[]>;
   getSocialMediaPost(postId: number): Promise<SocialMediaPost | undefined>;
   updateSocialMediaPost(postId: number, updates: Partial<SocialMediaPost>): Promise<SocialMediaPost>;
   deleteSocialMediaPost(postId: number): Promise<void>;
   
   createPlatformEngagement(engagement: InsertPlatformEngagement): Promise<PlatformEngagement>;
diff --git a/server/storage.ts b/server/storage.ts
index b16ee697f589bce2c5ba2ddb1f827fdb62352fcd..068fb310fe03af4adba7aaca9c2fa85f94ef02a8 100644
--- a/server/storage.ts
+++ b/server/storage.ts
@@ -779,51 +782,54 @@ export class DatabaseStorage implements IStorage {
   async deleteExpenseCategory(id: number): Promise<void> {
     try {
       await db.update(expenseCategories)
         .set({ isActive: false })
         .where(eq(expenseCategories.id, id));
     } catch (error) {
       console.error('Error deleting expense category:', { error: (error as Error).message });
       throw error;
     }
   }
 
   // Expense operations
   async createExpense(expense: InsertExpense): Promise<Expense> {
     try {
       const [result] = await db
         .insert(expenses)
         .values(expense as typeof expenses.$inferInsert)
         .returning();
       return result;
     } catch (error) {
       console.error('Error creating expense:', { error: (error as Error).message });
       throw error;
     }
   }
 
-  async getUserExpenses(userId: number, taxYear?: number): Promise<Expense[]> {
+  async getUserExpenses(
+    userId: number,
+    taxYear?: number
+  ): Promise<Array<Expense & { category: ExpenseCategory | null }>> {
     try {
       const query = db.select({
         expense: expenses,
         category: expenseCategories
       })
       .from(expenses)
       .leftJoin(expenseCategories, eq(expenses.categoryId, expenseCategories.id))
       .where(
         taxYear 
           ? and(eq(expenses.userId, userId), eq(expenses.taxYear, taxYear))
           : eq(expenses.userId, userId)
       );
 
       const results = await query.orderBy(desc(expenses.expenseDate));
       return results.map(r => ({
         ...r.expense,
         category: r.category
       })) as (Expense & { category: ExpenseCategory | null })[];
     } catch (error) {
       console.error('Error getting user expenses:', { error: (error as Error).message });
       return [];
     }
   }
 
   async getExpense(id: number, userId: number): Promise<Expense | undefined> {
 
EOF
)