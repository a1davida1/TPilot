diff --git a/server/advanced-content-generator.ts b/server/advanced-content-generator.ts
index 5997baefb23b6489ea704c062fea0378e0cdc08c..0e226803c4d33f371b2b01ae48e8271304d7c00a 100644
--- a/server/advanced-content-generator.ts
+++ b/server/advanced-content-generator.ts
@@ -37,50 +37,57 @@ export interface GeneratedContent {
   tags: string[];
 }
 
 export interface PresetVariation {
   titles: string[];
   content: string;
   photoInstructions: PhotoInstructions;
 }
 
 export interface PhotoConfig {
   themes: string[];
   settings: string[];
   clothing: string[];
   lighting: string;
   angles: string;
   mood: string;
 }
 
 export interface ToneStyle {
   starters: string[];
   descriptors: string[];
   endings: string[];
   emojis: string[];
 }
 
+interface PersonalToneConfig {
+  openers: string[];
+  customPromptIntros: string[];
+  promoHooks: string[];
+  closers: string[];
+}
+
 // Photo Type Specific Content Variations
 const photoTypeVariations = {
   'teasing': {
     themes: ['playful tease', 'subtle hint', 'flirty suggestion', 'mysterious allure', 'coy moment'],
     settings: ['bedroom door', 'mirror selfie', 'cozy couch', 'bath time', 'morning bed'],
     clothing: ['oversized shirt', 'silk robe', 'cute lingerie peek', 'towel wrap', 'strategic coverage'],
     lighting: 'Soft intimate lighting, warm candlelight, sunset glow',
     angles: 'Teasing glimpses, over-shoulder looks, partial reveals',
     mood: 'playful and teasing'
   },
   'behind-scenes': {
     themes: ['getting ready', 'makeup process', 'outfit selection', 'photoshoot prep', 'content creation'],
     settings: ['vanity mirror', 'wardrobe area', 'makeup station', 'photo setup', 'behind camera'],
     clothing: ['robe and lingerie', 'getting dressed', 'outfit changes', 'casual prep wear'],
     lighting: 'Natural backstage lighting, mirror lights, behind-the-scenes authenticity',
     angles: 'Candid preparation shots, mirror reflections, process documentation',
     mood: 'authentic and intimate'
   },
   'outfit': {
     themes: ['outfit reveal', 'fashion show', 'style showcase', 'wardrobe tour', 'clothing haul'],
     settings: ['bedroom mirror', 'dressing room', 'closet area', 'fashion backdrop', 'outfit display'],
     clothing: ['multiple outfits', 'lingerie sets', 'dress collection', 'style variations'],
     lighting: 'Bright fashion lighting, clear visibility, flattering angles',
     angles: 'Full body shots, detail close-ups, 360 turns, outfit transitions',
     mood: 'fashionable and stylish'
diff --git a/server/advanced-content-generator.ts b/server/advanced-content-generator.ts
index 5997baefb23b6489ea704c062fea0378e0cdc08c..0e226803c4d33f371b2b01ae48e8271304d7c00a 100644
--- a/server/advanced-content-generator.ts
+++ b/server/advanced-content-generator.ts
@@ -171,50 +178,163 @@ const textToneStyles = {
     starters: ["Guess what", "Oops!", "Surprise!", "Hey there", "So..."],
     descriptors: ["cute", "silly", "adorable", "cheeky", "mischievous"],
     endings: ["hope you like it!", "whoops! 🙈", "couldn't resist!", "being a little naughty"],
     emojis: ["😘", "🙈", "😇", "💕", "🎀"]
   },
   'mysterious': {
     starters: ["Something happened", "In the shadows", "Late night", "Behind closed doors", "Secret moment"],
     descriptors: ["hidden", "forbidden", "mysterious", "secretive", "enigmatic"],
     endings: ["but that's all I'll say", "the rest remains hidden", "some secrets are worth keeping", "only for those who understand"],
     emojis: ["🌙", "🖤", "🕯️", "🔮", "💫"]
   },
   'authentic': {
     starters: ["Real talk", "Being honest", "Just me", "Genuine moment", "Truth is"],
     descriptors: ["real", "honest", "genuine", "authentic", "true"],
     endings: ["just being myself", "no filters needed", "this is who I am", "raw and real"],
     emojis: ["💯", "✨", "🌸", "💗", "🌟"]
   },
   'sassy': {
     starters: ["Listen up", "Well well", "Oh please", "You think", "Honey"],
     descriptors: ["fierce", "bold", "attitude", "confidence", "sass"],
     endings: ["deal with it", "take it or leave it", "that's how I roll", "bow down"],
     emojis: ["💅", "😏", "🔥", "👑", "💄"]
   }
 };
 
+const personalToneConfigs: Record<ContentParameters['textTone'], PersonalToneConfig> = {
+  confident: {
+    openers: [
+      'Hey you, figured you deserved first look.',
+      'Giving you the private drop before anyone else sees it.',
+      'You keep asking for the bold moments first, so here we go.'
+    ],
+    customPromptIntros: [
+      'You asked me to channel',
+      'You nudged me toward',
+      'Taking your cue, I wrapped the shoot around'
+    ],
+    promoHooks: [
+      'The rest is locked in the VIP vault waiting on you.',
+      'Slide in when you want the full set—I tucked it aside for you.',
+      'Your private feed has the uncut shots queued just for you.'
+    ],
+    closers: [
+      'You keep me sharpening every detail just for you.',
+      'Now tell me if it hits the way you imagined.',
+      'Stay close and keep pushing me—I love giving you more.'
+    ]
+  },
+  playful: {
+    openers: [
+      'Hey you, come peek at this before the crowd catches up.',
+      'Pssst, sliding this to you first.',
+      'You get the sneaky peek, okay?'
+    ],
+    customPromptIntros: [
+      'Because you whispered about',
+      'Since you dared me to try',
+      'Following your little request for'
+    ],
+    promoHooks: [
+      'I hid the bloopers and extra spice in your stash—come grab them.',
+      'The secret folder with the rest is already labelled with your name.',
+      'Hop over to our spot; the bonus clips are lounging there for you.'
+    ],
+    closers: [
+      'Now tell me if it makes you blush like it did me.',
+      'Only you get to giggle at the full story with me.',
+      'Text me your reaction—I live for that little gasp.'
+    ]
+  },
+  mysterious: {
+    openers: [
+      'Lean in, I saved this secret for you.',
+      'Only you get this shadowy glimpse.',
+      'Sharing a hush-hush moment with you alone.'
+    ],
+    customPromptIntros: [
+      'You hinted that you craved',
+      'Because you murmured about',
+      'Following your quiet wish for'
+    ],
+    promoHooks: [
+      'The rest waits in the dark corner reserved for you.',
+      'You know the hidden doorway—step through when you want the rest.',
+      'Our secret stash has more, but only when you come looking.'
+    ],
+    closers: [
+      'Keep this between us and tell me how it makes you feel.',
+      'Whisper back if you want me to reveal even more.',
+      'I trust you to hold this secret close.'
+    ]
+  },
+  authentic: {
+    openers: [
+      'Sending this straight to you because you always get me.',
+      "You're the one I wanted to share this real moment with first.",
+      "Only you understand why this matters, so it's yours first."
+    ],
+    customPromptIntros: [
+      'Since you asked for something honest with',
+      'You told me you wanted more of',
+      'Because you crave the realness of'
+    ],
+    promoHooks: [
+      'The rest of the story is sitting in our private space waiting for you.',
+      'Come sit with me in the members corner—everything else is there for you.',
+      'Your subscription feed has the full heart-on-sleeve set queued up.'
+    ],
+    closers: [
+      'Thanks for letting me be this open with you.',
+      'Tell me how it lands—I trust your take.',
+      'Stay close; sharing it with you makes it feel safe.'
+    ]
+  },
+  sassy: {
+    openers: [
+      'Alright you, soak this in before anyone gets jealous.',
+      "Told you I'd spoil you first, so don't waste it.",
+      "You know you love being the favorite—here's proof."
+    ],
+    customPromptIntros: [
+      "Because you couldn't stop talking about",
+      'You dared me to go bigger with',
+      'Per your dramatic request for'
+    ],
+    promoHooks: [
+      'The rest is locked up with your name on it—come earn it.',
+      'I parked the wildest shots in your private gallery, so move.',
+      'Snag the rest in our corner before I change my mind.'
+    ],
+    closers: [
+      'Now remind me why you deserve round two.',
+      "Tell me you can handle more and maybe I'll believe you.",
+      "Don't keep me waiting if you want the encore."
+    ]
+  }
+};
+
 // Generate content based on all parameters
 export function generateAdvancedContent(params: ContentParameters): GeneratedContent {
   // Check if this is a preset request and use preset variations
   const presetVariation = getRandomPresetVariation(params.style);
   if (presetVariation) {
     console.log(`🎯 Using preset variation for: ${params.style}`);
     return {
       titles: presetVariation.titles,
       content: presetVariation.content,
       photoInstructions: {
         lighting: presetVariation.photoInstructions.lighting,
         angles: presetVariation.photoInstructions.cameraAngle || "natural angles",
         composition: presetVariation.photoInstructions.composition,
         styling: presetVariation.photoInstructions.styling,
         technical: presetVariation.photoInstructions.technicalSettings || "natural lighting",
         sceneSetup: presetVariation.photoInstructions.mood || "casual setting"
       },
       tags: ['preset-content', params.style, params.platform]
     };
   }
 
   // Fallback to existing system for non-preset requests
   const photoConfig = photoTypeVariations[params.photoType as keyof typeof photoTypeVariations] || photoTypeVariations['casual'] as PhotoConfig;
   const toneStyle = textToneStyles[params.textTone as keyof typeof textToneStyles] || textToneStyles['authentic'] as ToneStyle;
   
diff --git a/server/advanced-content-generator.ts b/server/advanced-content-generator.ts
index 5997baefb23b6489ea704c062fea0378e0cdc08c..0e226803c4d33f371b2b01ae48e8271304d7c00a 100644
--- a/server/advanced-content-generator.ts
+++ b/server/advanced-content-generator.ts
@@ -1229,128 +1349,135 @@ function getRandomPresetVariation(presetId: string): PresetVariation | null {
 
 function generateTitles(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string[] {
   const titles: string[] = [];
   const themes = photoConfig.themes;
   const starters = toneStyle.starters;
   const emojis = toneStyle.emojis;
   
   // Generate 3-5 varied titles
   titles.push(`${starters[0]} what happened during my ${themes[0]} session ${emojis[0]}`);
   titles.push(`${starters[1]} ${themes[1]} content just dropped ${emojis[1]}`);
   titles.push(`${themes[2]} vibes hit different today ${emojis[2]}`);
   
   if (params.photoType === 'all-xs') {
     titles.push(`Warning: ${themes[3] || 'exclusive'} content ahead - not for everyone ${emojis[3] || '🔞'}`);
     titles.push(`${starters[2]} the limits have been removed ${emojis[4] || '💎'}`);
   } else if (params.photoType === 'very-spicy') {
     titles.push(`${starters[3] || starters[0]} intense ${themes[3] || 'exclusive'} content ${emojis[3]}`);
   } else if (params.photoType === 'spicy') {
     titles.push(`${themes[3] || 'Spicy'} mood activated ${emojis[3]}`);
   }
   
   return titles.slice(0, Math.random() > 0.5 ? 3 : 4);
 }
 
 function generateMainContent(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string {
-  let content = "";
   const themes = photoConfig.themes;
   const settings = photoConfig.settings;
-  const mood = photoConfig.mood;
   const descriptors = toneStyle.descriptors;
   const endings = toneStyle.endings;
   const emojis = toneStyle.emojis;
-  
-  // Opening based on tone and photo type
-  if (params.textTone === 'confident') {
-    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
-    content = `${randomStarter} ${descriptors[0]} content I just created. `;
-  } else if (params.textTone === 'playful') {
-    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
-    content = `${randomStarter} I had the most ${descriptors[0]} photoshoot in my ${settings[0]} today! `;
-  } else if (params.textTone === 'mysterious') {
-    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
-    content = `${randomStarter} in my ${settings[0]}... `;
-  } else if (params.textTone === 'sassy') {
-    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
-    content = `${randomStarter}, your girl just dropped some ${descriptors[0]} content. `;
-  } else {
-    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
-    content = `${randomStarter}, this ${themes[0]} session was ${descriptors[0]}. `;
-  }
-  
-  // Middle content based on photo type
+  const personalTone = personalToneConfigs[params.textTone];
+
+  const segments: string[] = [];
+  const starter = pickRandom(toneStyle.starters);
+  const opener = pickRandom(personalTone.openers);
+  const descriptor = pickRandom(descriptors);
+  const theme = pickRandom(themes);
+  const setting = pickRandom(settings);
+  const emoji = pickRandom(emojis);
+
+  segments.push(`${opener} ${starter} I curated some ${descriptor} ${theme} moments in my ${setting} just for you ${emoji}.`);
+
   if (params.photoType === 'casual') {
-    content += `Just me being my natural self - coffee in hand, messy hair, and that perfect morning light streaming through the window. `;
+    segments.push('Just me being my natural self for you—coffee in hand, messy hair, and that perfect morning light while I imagined you here with me.');
   } else if (params.photoType === 'workout') {
-    content += `Post-workout glow hits different when you've pushed your limits. Sweat, determination, and feeling absolutely powerful. `;
+    segments.push('Pushed past my limits because I know you crave that post-session glow—every drop of sweat proof that I was thinking about you.');
   } else if (params.photoType === 'shower') {
-    content += `There's something magical about water, steam, and that peaceful moment when it's just you and your thoughts. `;
+    segments.push('Water, steam, and a room full of thoughts about you while the mirror fogged up like our private secret.');
   } else if (params.photoType === 'showing-skin') {
-    content += `Artistic expression meets body confidence. Every curve tells a story, every shadow creates beauty. `;
+    segments.push('Turned the lens into a love letter—each curve and shadow composed with you in mind.');
   } else if (params.photoType === 'spicy') {
-    content += `When the mood strikes and you decide to turn up the heat. Silk, shadows, and that look that says everything. `;
+    segments.push('Let the heat rise just for you: silk sliding, shadows flickering, my gaze locked where I picture you standing.');
   } else if (params.photoType === 'very-spicy') {
-    content += `No holding back today. Raw passion, artistic nudity, and content that pushes every boundary I have. `;
+    segments.push('Dropped every guard because you can handle it—raw passion, unapologetic and saved for your eyes only.');
   } else if (params.photoType === 'all-xs') {
-    content += `Complete creative freedom unleashed. No limits, no boundaries, just pure artistic expression in its rawest form. `;
+    segments.push('Let myself go completely with you in mind—no limits, just the unfiltered truth I keep for you.');
   }
-  
-  // Add custom prompt integration
-  if (params.customPrompt) {
-    content += `${params.customPrompt} `;
+
+  const customPrompt = params.customPrompt?.trim();
+  if (customPrompt) {
+    const promptIntro = pickRandom(personalTone.customPromptIntros);
+    segments.push(ensureTerminalPunctuation(`${promptIntro} ${customPrompt}`));
   }
-  
-  // Promotion integration
+
   if (params.includePromotion) {
-    if (params.textTone === 'confident') {
-      content += `This exclusive content is available for my VIP subscribers who appreciate quality. `;
-    } else if (params.textTone === 'playful') {
-      content += `The full collection is waiting for my special subscribers! `;
-    } else if (params.textTone === 'mysterious') {
-      content += `But that's all you see here... the rest remains in the shadows for those who seek it. `;
-    } else if (params.textTone === 'sassy') {
-      content += `If you want the full experience, you know where to find me. `;
-    } else {
-      content += `The complete series is available for subscribers who want the authentic experience. `;
-    }
+    segments.push(pickRandom(personalTone.promoHooks));
   }
-  
-  // Ending with hashtags if selected
-  content += endings[Math.floor(Math.random() * endings.length)];
-  
+
+  const ending = capitalizeSentence(ensureTerminalPunctuation(pickRandom(endings)));
+  const closer = pickRandom(personalTone.closers);
+  segments.push(`${ending} ${closer}`);
+
+  let content = segments.filter(segment => segment.trim().length > 0).join(' ');
+
   if (params.selectedHashtags.length > 0) {
     content += ` ${params.selectedHashtags.join(' ')}`;
   }
-  
+
   return content;
 }
 
 function generatePhotoInstructions(params: ContentParameters, photoConfig: PhotoConfig): GeneratedContent['photoInstructions'] {
   return {
     lighting: photoConfig.lighting + (params.photoType === 'shower' ? ', emphasis on steam and water reflections' : 
                params.photoType === 'workout' ? ', bright and energetic to show determination' :
                params.photoType === 'very-spicy' || params.photoType === 'all-xs' ? ', dramatic contrasts and artistic shadows' : ''),
     angles: photoConfig.angles + (params.textTone === 'confident' ? ', powerful perspective shots' :
             params.textTone === 'playful' ? ', fun candid angles' :
             params.textTone === 'mysterious' ? ', shadowy artistic angles' : ''),
     composition: `${photoConfig.mood} composition with ${params.photoType === 'casual' ? 'natural framing' :
                  params.photoType === 'workout' ? 'dynamic action elements' :
                  params.photoType === 'shower' ? 'steam and water elements' :
                  params.photoType === 'showing-skin' ? 'artistic tasteful framing' :
                  params.photoType === 'spicy' ? 'seductive elegant framing' :
                  params.photoType === 'very-spicy' ? 'bold intimate framing' :
                  'unlimited creative framing'}`,
     styling: `${photoConfig.clothing.join(' or ')}, ${photoConfig.mood} aesthetic`,
     technical: `High resolution, sharp focus, professional quality${params.photoType === 'very-spicy' || params.photoType === 'all-xs' ? ', studio-grade equipment recommended' : ''}`,
     sceneSetup: `${photoConfig.settings.join(' or ')}, ${params.photoType} theme environment`
   };
 }
 
 function generateTags(params: ContentParameters, photoConfig: PhotoConfig): string[] {
   const baseTags = [params.photoType, params.textTone, params.platform];
   const photoTags = photoConfig.themes.slice(0, 2);
   const moodTags = [photoConfig.mood];
-  
-  return [...baseTags, ...photoTags, ...moodTags].map(tag => 
+
+  return [...baseTags, ...photoTags, ...moodTags].map(tag =>
     tag.replace(/ /g, '-').toLowerCase()
   );
+}
+
+function pickRandom<T>(values: readonly T[]): T {
+  if (values.length === 0) {
+    throw new Error('Cannot pick a random value from an empty array.');
+  }
+  const index = Math.floor(Math.random() * values.length);
+  return values[index];
+}
+
+function ensureTerminalPunctuation(value: string): string {
+  const trimmed = value.trim();
+  if (trimmed.length === 0) {
+    return '';
+  }
+  return /[.!?]$/.test(trimmed) ? trimmed : `${trimmed}.`;
+}
+
+function capitalizeSentence(value: string): string {
+  const trimmed = value.trim();
+  if (trimmed.length === 0) {
+    return '';
+  }
+  return `${trimmed.charAt(0).toUpperCase()}${trimmed.slice(1)}`;
 }
