diff --git a/client/src/components/sample-upload.tsx b/client/src/components/sample-upload.tsx
@@
 interface SamplePost {
@@
 }
 
+interface SampleForm {
+  title: string;
+  content: string;
+  platform: string;
+  subreddit: string;
+  upvotes: number;
+  imageUrl: string;
+  tags: string[];
+}
+
 export default function SampleUpload() {
   const { toast } = useToast();
-  const [showAddForm, setShowAddForm] = useState(false);
-  const [selectedSample, setSelectedSample] = useState<SamplePost | null>(null);
-  const [formData, setFormData] = useState({
-    title: "",
-    content: "",
-    platform: "reddit",
-    subreddit: "",
-    upvotes: 0,
-    imageUrl: "",
-    tags: [] as string[]
-  });
+  const [showAddForm, setShowAddForm] = useState(false);
+  const [selectedSample, setSelectedSample] = useState<SamplePost | null>(null);
+  const [formData, setFormData] = useState<SampleForm>({
+    title: "",
+    content: "",
+    platform: "reddit",
+    subreddit: "",
+    upvotes: 0,
+    imageUrl: "",
+    tags: []
+  });
@@
-  const deleteMutation = useMutation({
-    mutationFn: async (id: number) => {
-      return await apiRequest('DELETE', `/api/sample-posts/${id}`);
-    },
+  const deleteMutation = useMutation<void, Error, number>({
+    mutationFn: async (id: number) => {
+      await apiRequest('DELETE', `/api/sample-posts/${id}`);
+    },
@@
-  const addMutation = useMutation({
-    mutationFn: async (data: typeof formData) => {
-      return await apiRequest('POST', '/api/sample-posts', data);
-    },
+  const addMutation = useMutation<void, Error, SampleForm>({
+    mutationFn: async (data: SampleForm) => {
+      await apiRequest('POST', '/api/sample-posts', data);
+    },
@@
-  const handleGetUploadParameters = async () => {
-    const response = await apiRequest("/api/objects/upload", "POST") as unknown as { uploadURL: string };
-    return {
-      method: "PUT" as const,
-      url: response.uploadURL
-    };
-  };
-
-  const handleUploadComplete = async (result: unknown) => {
-    const typedResult = result as { successful?: Array<{ uploadURL: string }> };
-    if (typedResult.successful && typedResult.successful.length > 0) {
-      const uploadedUrl = typedResult.successful[0].uploadURL;
-      setFormData({ ...formData, imageUrl: uploadedUrl });
-      toast({
-        title: "Image uploaded",
-        description: "Your image has been uploaded successfully.",
-      });
-    }
-  };
+  const handleGetUploadParameters = async () => {
+    const res = await apiRequest('POST', '/api/objects/upload');
+    const { uploadURL } = (await res.json()) as { uploadURL: string };
+    return { method: 'PUT' as const, url: uploadURL };
+  };
+
+  interface UploadResult { successful?: Array<{ uploadURL: string }> }
+  const handleUploadComplete = (result: UploadResult) => {
+    const uploadedUrl = result.successful?.[0]?.uploadURL;
+    if (uploadedUrl) {
+      setFormData((prev) => ({ ...prev, imageUrl: uploadedUrl }));
+      toast({
+        title: "Image uploaded",
+        description: "Your image has been uploaded successfully.",
+      });
+    }
+  };
