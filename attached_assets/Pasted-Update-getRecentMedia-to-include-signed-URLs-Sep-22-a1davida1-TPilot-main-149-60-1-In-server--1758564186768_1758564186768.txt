Update getRecentMedia to include signed URLs
Sep 22 · a1davida1/TPilot · main
+149-60
1. In `server/services/dashboard-service.ts`, change `getRecentMedia` (and the admin variant) to request full asset records—e.g., call `MediaManager.getAsset` or join the signed URL fields—so each item includes a direct image URL.
2. Populate `recentMedia` with `signedUrl` (or `/api/media/${id}/download`) instead of the JSON endpoint.
3. Adjust the dashboard component, if necessary, to consume the new field (e.g., switch to `item.signedUrl`).
4. Manually hit `/api/dashboard/activity` and reload the dashboard UI to confirm previews now display.

Summary

    Updated the dashboard service to return detailed media activity entries by calling MediaManager.getAsset, emitting direct signed URLs, and sharing a helper that keeps both user and admin dashboards in sync.

Extended the modern dashboard client to expect the new signedUrl field and render gallery previews via a direct link while falling back to the prior URL when needed.

Refreshed unit and integration coverage to hoist shared mocks, exercise the signed URL flow, and assert the API now returns direct media links.

Testing

    ⚠️ npm run lint (completes with longstanding repository warnings)

✅ npx vitest run tests/unit/dashboard/dashboard-service.test.ts

⚠️ npm test (fails because external services like OpenAI/Gemini/Neon credentials are unavailable in this environment)


client/src/components/modern-dashboard.tsx
+2-1
@@ -31,50 +31,51 @@ import {
import { FaReddit } from "react-icons/fa";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";

interface ModernDashboardProps {
  isRedditConnected?: boolean;
  user?: { id: number; username: string; email?: string; tier?: string; isVerified?: boolean };
  userTier?: 'guest' | 'free' | 'basic' | 'starter' | 'pro' | 'premium' | 'admin';
  isAdmin?: boolean;
}

interface DashboardStatsResponse {
  postsToday: number;
  engagementRate: number;
  takedownsFound: number;
  estimatedTaxSavings: number;
}

interface DashboardActivityResponse {
  recentMedia: Array<{
    id: number;
    url: string;
    signedUrl: string | null;
    alt: string;
    createdAt: string | null;
  }>;
}

export type { DashboardStatsResponse, DashboardActivityResponse };

const numberFormatter = new Intl.NumberFormat('en-US');

function formatNumber(value: number): string {
  return numberFormatter.format(value);
}

function formatPercentage(value: number): string {
  if (!Number.isFinite(value)) {
    return '0%';
  }
  const fractionDigits = Number.isInteger(value) ? 0 : 1;
  return `${value.toFixed(fractionDigits)}%`;
}

function formatCurrency(value: number): string {
  if (!Number.isFinite(value)) {
    return '$0';
  }
@@ -520,51 +521,51 @@ export function ModernDashboard({ isRedditConnected = false, user, userTier = 'f
              <CardDescription className="text-gray-400">
                Your latest uploads
              </CardDescription>
            </CardHeader>
            <CardContent>
              {activityLoading ? (
                <div className="grid grid-cols-4 gap-2">
                  {Array.from({ length: 4 }).map((_, i) => (
                    <div key={i} className="aspect-square bg-gray-700 rounded-lg animate-pulse" />
                  ))}
                </div>
              ) : showGalleryEmptyState ? (
                <div className="text-center py-8 text-gray-400">
                  <ImageIcon className="h-12 w-12 mx-auto mb-2 opacity-50" />
                  <p>No recent media</p>
                  <p className="text-sm">Upload some content to see it here</p>
                </div>
              ) : (
                <div className="grid grid-cols-4 gap-2">
                  {galleryItems.map((item) => (
                    <div
                      key={item.id}
                      className="aspect-square bg-gray-700 rounded-lg overflow-hidden"
                    >
                      <img
                        src={item.url}
                        src={item.signedUrl ?? item.url}
                        alt={item.alt}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  ))}
                </div>
              )}
              <Button 
                className="w-full mt-4 bg-purple-600 hover:bg-purple-700"
                onClick={() => setLocation('/gallery')}
              >
                View All
                <ChevronRight className="h-4 w-4 ml-2" />
              </Button>
            </CardContent>
          </Card>

          {/* Scheduled Posts */}
          <Card className="bg-gray-800 border-gray-700">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-white">Scheduled Posts</CardTitle>
                <Badge className="bg-orange-500 text-white">2 PENDING</Badge>
              </div>
              <CardDescription className="text-gray-400">
server/services/dashboard-service.ts
+67-31
import { db } from '../db';
import { 
  contentGenerations, 
  expenses, 
  contentFlags, 
  mediaAssets, 
import {
  contentGenerations,
  expenses,
  contentFlags,
  mediaAssets,
  socialMetrics,
  engagementEvents,
  users
} from '@shared/schema';
import { eq, and, gte, sql, desc } from 'drizzle-orm';
import { MediaManager } from '../lib/media.js';

export interface DashboardStats {
  postsToday: number;
  engagementRate: number;
  takedownsFound: number;
  estimatedTaxSavings: number;
}

export interface DashboardMediaItem {
  id: number;
  url: string;
  signedUrl: string | null;
  alt: string;
  createdAt: string | null;
}

export interface DashboardActivity {
  recentMedia: Array<{
    id: number;
    url: string;
    alt: string;
    createdAt: string | null;
  }>;
  recentMedia: Array<DashboardMediaItem>;
}

export class DashboardService {
  /**
   * Get aggregated dashboard statistics for a user
   */
  async getDashboardStats(userId: number): Promise<DashboardStats> {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Posts created today
    const postsToday = await this.getPostsToday(userId, today);
    
    // Engagement rate from social metrics or events
    const engagementRate = await this.getEngagementRate(userId);
    
    // Content flags/takedowns found
    const takedownsFound = await this.getTakedownsFound(userId);
    
    // Estimated tax savings from expenses
    const estimatedTaxSavings = await this.getEstimatedTaxSavings(userId);

    return {
      postsToday,
      engagementRate,
@@ -149,81 +153,119 @@ export class DashboardService {
      const currentYear = new Date().getFullYear();
      
      const result = await db
        .select({ 
          totalDeductions: sql<number>`sum(${expenses.amount} * ${expenses.deductionPercentage} / 100.0)` 
        })
        .from(expenses)
        .where(
          and(
            eq(expenses.userId, userId),
            eq(expenses.taxYear, currentYear)
          )
        );
      
      const totalDeductions = Number(result[0]?.totalDeductions ?? 0);
      
      // Estimate tax savings at 25% effective rate (conservative estimate)
      // Convert from cents to dollars
      return Math.round((totalDeductions / 100) * 0.25 * 100) / 100;
    } catch (error) {
      console.error('Error getting estimated tax savings:', error);
      return 0;
    }
  }

  private async getRecentMedia(userId: number): Promise<Array<{
    id: number;
    url: string;
    alt: string;
    createdAt: string | null;
  }>> {
  private async getRecentMedia(userId: number): Promise<Array<DashboardMediaItem>> {
    try {
      const result = await db
        .select({
          id: mediaAssets.id,
          filename: mediaAssets.filename,
          key: mediaAssets.key,
          createdAt: mediaAssets.createdAt,
        })
        .from(mediaAssets)
        .where(eq(mediaAssets.userId, userId))
        .orderBy(desc(mediaAssets.createdAt))
        .limit(4);

      return result.map(asset => ({
        id: asset.id,
        url: `/api/media/${asset.id}`, // Generate API URL for media access
        alt: asset.filename || 'Media asset',
        createdAt: asset.createdAt?.toISOString() || null,
      }));
      return this.buildActivityMediaItems(result, userId);
    } catch (error) {
      console.error('Error getting recent media:', error);
      return [];
    }
  }

  private async buildActivityMediaItems(
    assets: Array<{
      id: number;
      filename: string | null;
      createdAt: Date | string | null;
    }>,
    viewerUserId?: number
  ): Promise<Array<DashboardMediaItem>> {
    const items = await Promise.all(
      assets.map(async (asset) => {
        try {
          const detailedAsset = await MediaManager.getAsset(asset.id, viewerUserId);
          if (!detailedAsset) {
            return null;
          }

          const directUrl =
            detailedAsset.signedUrl ??
            detailedAsset.downloadUrl ??
            `/api/media/${detailedAsset.id}/download`;

          const createdAtSource = detailedAsset.createdAt ?? asset.createdAt ?? null;
          let createdAtIso: string | null = null;
          if (createdAtSource instanceof Date) {
            createdAtIso = createdAtSource.toISOString();
          } else if (typeof createdAtSource === 'string') {
            const parsedDate = new Date(createdAtSource);
            if (!Number.isNaN(parsedDate.getTime())) {
              createdAtIso = parsedDate.toISOString();
            }
          }

          return {
            id: detailedAsset.id,
            url: directUrl,
            signedUrl: detailedAsset.signedUrl ?? null,
            alt: detailedAsset.filename || asset.filename || 'Media asset',
            createdAt: createdAtIso,
          } satisfies DashboardMediaItem;
        } catch (error) {
          console.error('Error building media preview item:', error);
          return null;
        }
      })
    );

    return items.filter((item): item is DashboardMediaItem => Boolean(item));
  }

  /**
   * Get admin dashboard stats (aggregated across all users)
   */
  async getAdminDashboardStats(): Promise<DashboardStats> {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    try {
      // Total posts today across all users
      const postsResult = await db
        .select({ count: sql<number>`count(*)` })
        .from(contentGenerations)
        .where(gte(contentGenerations.createdAt, today));

      // Average engagement rate across all users
      const engagementResult = await db
        .select({ 
          totalEngagement: sql<number>`sum(${socialMetrics.likes} + ${socialMetrics.comments} + ${socialMetrics.shares})`,
          totalViews: sql<number>`sum(${socialMetrics.views})`
        })
        .from(socialMetrics);

      // Total takedowns/flags found
      const takedownsResult = await db
        .select({ count: sql<number>`count(*)` })
@@ -253,48 +295,42 @@ export class DashboardService {
        postsToday,
        engagementRate,
        takedownsFound,
        estimatedTaxSavings,
      };
    } catch (error) {
      console.error('Error getting admin dashboard stats:', error);
      return {
        postsToday: 0,
        engagementRate: 0,
        takedownsFound: 0,
        estimatedTaxSavings: 0,
      };
    }
  }

  /**
   * Get admin dashboard activity (recent media across all users)
   */
  async getAdminDashboardActivity(): Promise<DashboardActivity> {
    try {
      const result = await db
        .select({
          id: mediaAssets.id,
          filename: mediaAssets.filename,
          key: mediaAssets.key,
          createdAt: mediaAssets.createdAt,
        })
        .from(mediaAssets)
        .orderBy(desc(mediaAssets.createdAt))
        .limit(8); // Show more for admin view

      return {
        recentMedia: result.map(asset => ({
          id: asset.id,
          url: `/api/media/${asset.id}`,
          alt: asset.filename || 'Media asset',
          createdAt: asset.createdAt?.toISOString() || null,
        })),
        recentMedia: await this.buildActivityMediaItems(result),
      };
    } catch (error) {
      console.error('Error getting admin dashboard activity:', error);
      return { recentMedia: [] };
    }
  }
}

export const dashboardService = new DashboardService();
tests/integration/dashboard-api.test.ts
+2-0
@@ -115,52 +115,54 @@ describe('Dashboard API', () => {
  });

  describe('GET /api/dashboard/activity', () => {
    it('should return 401 without authentication', async () => {
      const response = await request(app)
        .get('/api/dashboard/activity')
        .expect(401);
      
      expect(response.body).toHaveProperty('message', 'Authentication required');
    });

    it('should return dashboard activity for authenticated user', async () => {
      const response = await request(app)
        .get('/api/dashboard/activity')
        .set('Authorization', `Bearer ${testUserToken}`)
        .expect(200);
      
      expect(response.body).toHaveProperty('recentMedia');
      expect(Array.isArray(response.body.recentMedia)).toBe(true);
      
      // If there are media items, check their structure
      if (response.body.recentMedia.length > 0) {
        const mediaItem = response.body.recentMedia[0];
        expect(mediaItem).toHaveProperty('id');
        expect(mediaItem).toHaveProperty('url');
        expect(mediaItem).toHaveProperty('signedUrl');
        expect(mediaItem).toHaveProperty('alt');
        expect(mediaItem).toHaveProperty('createdAt');
        expect(mediaItem.url).not.toMatch(/^\/api\/media\/\d+$/);
      }
    });

    it('should return admin activity for admin user', async () => {
      const response = await request(app)
        .get('/api/dashboard/activity')
        .set('Authorization', `Bearer ${adminToken}`)
        .expect(200);
      
      expect(response.body).toHaveProperty('recentMedia');
      expect(Array.isArray(response.body.recentMedia)).toBe(true);
      
      // Admin should see more media items (up to 8 vs 4)
      expect(response.body.recentMedia.length).toBeLessThanOrEqual(8);
    });

    // Note: Database error testing would require mocking the dashboard service
    // which is not easily done in integration tests. This would be better
    // suited for unit tests of the dashboard service itself.

    it('should return empty array when no media exists', async () => {
      // This tests the fallback behavior when no media is found
      const response = await request(app)
        .get('/api/dashboard/activity')
        .set('Authorization', `Bearer ${testUserToken}`)
tests/unit/dashboard/dashboard-service.test.ts
+78-28
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { dashboardService } from '../../../server/services/dashboard-service.js';

// Mock the database
const mockDb = vi.hoisted(() => ({
  select: vi.fn().mockReturnThis(),
  from: vi.fn().mockReturnThis(),
  leftJoin: vi.fn().mockReturnThis(),
  where: vi.fn().mockReturnThis(),
  orderBy: vi.fn().mockReturnThis(),
  limit: vi.fn().mockReturnThis(),
}));

vi.mock('../../../server/database.js', () => ({
  db: {
    select: vi.fn().mockReturnThis(),
    from: vi.fn().mockReturnThis(),
    leftJoin: vi.fn().mockReturnThis(),
    where: vi.fn().mockReturnThis(),
    orderBy: vi.fn().mockReturnThis(),
    limit: vi.fn().mockReturnThis(),
  }
  db: mockDb,
}));

// Mock the media manager
const mockMediaManager = vi.hoisted(() => ({
  getAsset: vi.fn(),
}));

vi.mock('../../../server/lib/media.js', () => ({
  MediaManager: mockMediaManager,
}));

// Mock the schema imports
vi.mock('../../../shared/schema.js', () => ({
  contentGenerations: { 
  contentGenerations: {
    id: 'id',
    userId: 'userId', 
    userId: 'userId',
    createdAt: 'createdAt',
    platform: 'platform'
  },
  socialMetrics: { 
    contentId: 'contentId',
    likes: 'likes', 
    comments: 'comments',
    shares: 'shares',
    views: 'views'
  },
  contentFlags: { 
    reportedById: 'reportedById'
  },
  expenses: { 
    userId: 'userId',
    amount: 'amount',
    deductionPercentage: 'deductionPercentage'
  },
  mediaAssets: { 
    id: 'id',
    userId: 'userId',
    filename: 'filename',
    key: 'key',
    createdAt: 'createdAt'
  }
}));

// Mock drizzle-orm functions
vi.mock('drizzle-orm', () => ({
  eq: vi.fn((column, value) => ({ column, value, op: 'eq' })),
  desc: vi.fn((column) => ({ column, order: 'desc' })),
  gte: vi.fn((column, value) => ({ column, value, op: 'gte' })),
  sql: vi.fn((template, ...values) => ({ template, values, type: 'sql' }))
}));

describe('DashboardService', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    mockDb.select.mockReturnThis();
    mockDb.from.mockReturnThis();
    mockDb.leftJoin.mockReturnThis();
    mockDb.where.mockReturnThis();
    mockDb.orderBy.mockReturnThis();
    mockDb.limit.mockReturnThis();
    mockMediaManager.getAsset.mockReset();
    mockMediaManager.getAsset.mockResolvedValue(null);
  });

  describe('getDashboardStats', () => {
    it('should return dashboard stats for a user', async () => {
      // Mock database responses
      const mockDb = require('../../../server/database.js').db;
      
      // Mock posts count query
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          where: vi.fn().mockResolvedValueOnce([{ count: 5 }])
        })
      });
      
      // Mock social metrics query (for engagement rate)
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          leftJoin: vi.fn().mockReturnValueOnce({
            where: vi.fn().mockResolvedValueOnce([{ totalEngagement: 100, totalViews: 1000 }])
          })
        })
      });
      
      // Mock content flags query (takedowns)
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          where: vi.fn().mockResolvedValueOnce([{ count: 2 }])
        })
      });
      
      // Mock expenses query (tax savings)
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          where: vi.fn().mockResolvedValueOnce([{ totalSavings: 1500 }])
        })
      });

      const userId = 1;
      const result = await dashboardService.getDashboardStats(userId);
      
      expect(result).toHaveProperty('postsToday');
      expect(result).toHaveProperty('engagementRate');
      expect(result).toHaveProperty('takedownsFound');
      expect(result).toHaveProperty('estimatedTaxSavings');
      
      expect(typeof result.postsToday).toBe('number');
      expect(typeof result.engagementRate).toBe('number');
      expect(typeof result.takedownsFound).toBe('number');
      expect(typeof result.estimatedTaxSavings).toBe('number');
    });

    it('should handle database errors gracefully', async () => {
      const mockDb = require('../../../server/database.js').db;
      
      // Mock database error
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          where: vi.fn().mockRejectedValueOnce(new Error('Database connection error'))
        })
      });

      const userId = 1;
      const result = await dashboardService.getDashboardStats(userId);
      
      // Should return default values on error
      expect(result).toEqual({
        postsToday: 0,
        engagementRate: 0,
        takedownsFound: 0,
        estimatedTaxSavings: 0
      });
    });
  });

  describe('getDashboardActivity', () => {
    it('should return dashboard activity for a user', async () => {
      const mockDb = require('../../../server/database.js').db;
      
      // Mock media assets query
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          where: vi.fn().mockReturnValueOnce({
            orderBy: vi.fn().mockReturnValueOnce({
              limit: vi.fn().mockResolvedValueOnce([
                {
                  id: 1,
                  filename: 'test.jpg',
                  key: 'test-key',
                  createdAt: new Date('2025-09-22')
                }
              ])
            })
          })
        })
      });

      mockMediaManager.getAsset.mockResolvedValueOnce({
        id: 1,
        key: 'test-key',
        filename: 'test.jpg',
        bytes: 1024,
        mime: 'image/jpeg',
        visibility: 'private',
        signedUrl: 'https://example.com/test.jpg',
        downloadUrl: 'https://example.com/test.jpg',
        createdAt: new Date('2025-09-22')
      });

      const userId = 1;
      const result = await dashboardService.getDashboardActivity(userId);
      

      expect(result).toHaveProperty('recentMedia');
      expect(Array.isArray(result.recentMedia)).toBe(true);
      

      if (result.recentMedia.length > 0) {
        const mediaItem = result.recentMedia[0];
        expect(mediaItem).toHaveProperty('id');
        expect(mediaItem).toHaveProperty('url');
        expect(mediaItem).toHaveProperty('signedUrl');
        expect(mediaItem).toHaveProperty('alt');
        expect(mediaItem).toHaveProperty('createdAt');
        
        expect(mediaItem.url).toMatch(/^\/api\/media\/\d+$/);

        expect(mediaItem.url).toBe('https://example.com/test.jpg');
        expect(mediaItem.signedUrl).toBe('https://example.com/test.jpg');
      }
    });

    it('should handle database errors gracefully', async () => {
      const mockDb = require('../../../server/database.js').db;
      
      // Mock database error
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          where: vi.fn().mockReturnValueOnce({
            orderBy: vi.fn().mockReturnValueOnce({
              limit: vi.fn().mockRejectedValueOnce(new Error('Database connection error'))
            })
          })
        })
      });

      const userId = 1;
      const result = await dashboardService.getDashboardActivity(userId);
      
      // Should return empty array on error
      expect(result).toEqual({ recentMedia: [] });
    });
  });

  describe('getAdminDashboardStats', () => {
    it('should return admin dashboard stats', async () => {
      const mockDb = require('../../../server/database.js').db;
      
      // Mock various queries for admin stats
      mockDb.select.mockReturnValue({
        from: vi.fn().mockReturnValue({
          where: vi.fn().mockResolvedValue([{ count: 10 }])
        })
      });

      const result = await dashboardService.getAdminDashboardStats();
      
      expect(result).toHaveProperty('postsToday');
      expect(result).toHaveProperty('engagementRate');
      expect(result).toHaveProperty('takedownsFound');
      expect(result).toHaveProperty('estimatedTaxSavings');
      
      expect(typeof result.postsToday).toBe('number');
      expect(typeof result.engagementRate).toBe('number');
      expect(typeof result.takedownsFound).toBe('number');
      expect(typeof result.estimatedTaxSavings).toBe('number');
    });
  });

  describe('getAdminDashboardActivity', () => {
    it('should return admin dashboard activity', async () => {
      const mockDb = require('../../../server/database.js').db;
      
      // Mock media assets query for admin
      mockDb.select.mockReturnValueOnce({
        from: vi.fn().mockReturnValueOnce({
          orderBy: vi.fn().mockReturnValueOnce({
            limit: vi.fn().mockResolvedValueOnce([
              {
                id: 1,
                filename: 'admin-test.jpg',
                key: 'admin-test-key',
                createdAt: new Date('2025-09-22')
              },
              {
                id: 2,
                filename: 'admin-test2.jpg',
                key: 'admin-test-key2',
                createdAt: new Date('2025-09-21')
              }
            ])
          })
        })
      });

      mockMediaManager.getAsset
        .mockResolvedValueOnce({
          id: 1,
          key: 'admin-test-key',
          filename: 'admin-test.jpg',
          bytes: 2048,
          mime: 'image/jpeg',
          visibility: 'private',
          signedUrl: 'https://example.com/admin-test.jpg',
          downloadUrl: 'https://example.com/admin-test.jpg',
          createdAt: new Date('2025-09-22')
        })
        .mockResolvedValueOnce({
          id: 2,
          key: 'admin-test-key2',
          filename: 'admin-test2.jpg',
          bytes: 2048,
          mime: 'image/jpeg',
          visibility: 'private',
          signedUrl: 'https://example.com/admin-test2.jpg',
          downloadUrl: 'https://example.com/admin-test2.jpg',
          createdAt: new Date('2025-09-21')
        });

      const result = await dashboardService.getAdminDashboardActivity();
      

      expect(result).toHaveProperty('recentMedia');
      expect(Array.isArray(result.recentMedia)).toBe(true);
      

      // Admin should potentially see more items
      expect(result.recentMedia.length).toBeLessThanOrEqual(8);
      result.recentMedia.forEach((item) => {
        expect(item.url).toMatch(/^https:\/\/example.com\/admin-test/);
        expect(item.signedUrl).toMatch(/^https:\/\/example.com\/admin-test/);
      });
    });
  });
});
});
