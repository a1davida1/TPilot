
Refactor buildStorageMock to use mapped types
Sep 22
·
a1davida1/TPilot
·
main
·
+82
-77

Archive

Share

Create PR


1. In `tests/_helpers/buildStorageMock.ts`, introduce a mapped type such as `type StorageMock = { [K in keyof IStorage]: MockedFunction<IStorage[K]> };`.
2. Create a small helper factory (e.g. `const mock = <K extends keyof IStorage>() => vi.fn<IStorage[K]>();`) so each property can be initialized as `mock<'getUser'>()` and automatically get the right signature.
3. Return the mock object typed as `StorageMock`, adding casts only where the compiler needs help (e.g. `mock<'getUser'>() as StorageMock['getUser']`), avoiding any `any`.
4. Update any tests that rely on `buildStorageMock` to keep the inferred typings (e.g. remove redundant `any` annotations on `storage` variables).
5. Re-run `npm run lint` and the affected Vitest suites to confirm the mocks still satisfy all test expectations.
Copy
Summary

Replaced the loose Record return type with a StorageMock mapped type and helper factory so every vi.fn preserves the corresponding IStorage method signature without resorting to any.

Updated the expense operations unit test to type the injected storage instance as IStorage, keeping the stronger typings flowing from the new mock factory.

Testing

✅ npm run lint -- --quiet

✅ npx vitest run tests/unit/expenses/expense-operations.test.ts


Files (2)

tests/_helpers/buildStorageMock.ts
+80
-76

tests/unit/expenses/expense-operations.test.ts
+2
-1



Ask

Code
Diff
Logs

tests/_helpers/buildStorageMock.ts
+80
-76

import { vi, type MockedFunction } from 'vitest';
import type { IStorage } from '../../server/storage';

type StorageMock = { [K in keyof IStorage]: MockedFunction<IStorage[K]> };

const mock = <K extends keyof IStorage>() => vi.fn<IStorage[K]>();

/**
 * Creates a complete mock of the storage interface with all methods
 * that can be used across different test files
 */
export function buildStorageMock(): Record<keyof IStorage, MockedFunction<any>> {
export function buildStorageMock(): StorageMock {
  return {
    // User operations
    getUser: vi.fn(),
    getUserById: vi.fn(),
    getAllUsers: vi.fn(),
    getUserByUsername: vi.fn(),
    getUserByEmail: vi.fn(),
    createUser: vi.fn(),
    updateUserTier: vi.fn(),
    updateUser: vi.fn(),
    updateUserProfile: vi.fn(),
    updateUserPassword: vi.fn(),
    updateUserEmailVerified: vi.fn(),
    createVerificationToken: vi.fn(),
    getVerificationToken: vi.fn(),
    deleteVerificationToken: vi.fn(),
    deleteUser: vi.fn(),
    getUser: mock<'getUser'>(),
    getUserById: mock<'getUserById'>(),
    getAllUsers: mock<'getAllUsers'>(),
    getUserByUsername: mock<'getUserByUsername'>(),
    getUserByEmail: mock<'getUserByEmail'>(),
    createUser: mock<'createUser'>(),
    updateUserTier: mock<'updateUserTier'>(),
    updateUser: mock<'updateUser'>(),
    updateUserProfile: mock<'updateUserProfile'>(),
    updateUserPassword: mock<'updateUserPassword'>(),
    updateUserEmailVerified: mock<'updateUserEmailVerified'>(),
    createVerificationToken: mock<'createVerificationToken'>(),
    getVerificationToken: mock<'getVerificationToken'>(),
    deleteVerificationToken: mock<'deleteVerificationToken'>(),
    deleteUser: mock<'deleteUser'>(),

    // Generation operations
    createGeneration: vi.fn(),
    getGenerationsByUserId: vi.fn(),
    createContentGeneration: vi.fn(),
    getUserContentGenerations: vi.fn(),
    getContentGenerationCount: vi.fn(),
    getContentGenerationStats: vi.fn(),
    getLastGenerated: vi.fn(),
    createGeneration: mock<'createGeneration'>(),
    getGenerationsByUserId: mock<'getGenerationsByUserId'>(),
    createContentGeneration: mock<'createContentGeneration'>(),
    getUserContentGenerations: mock<'getUserContentGenerations'>(),
    getContentGenerationCount: mock<'getContentGenerationCount'>(),
    getContentGenerationStats: mock<'getContentGenerationStats'>(),
    getLastGenerated: mock<'getLastGenerated'>(),

    // Revenue operations
    getRevenue: vi.fn(),
    getRevenue: mock<'getRevenue'>(),

    // Preference operations
    getUserPreferences: vi.fn(),
    updateUserPreferences: vi.fn(),
    getUserPreferences: mock<'getUserPreferences'>(),
    updateUserPreferences: mock<'updateUserPreferences'>(),

    // Image operations
    createUserImage: vi.fn(),
    getUserImages: vi.fn(),
    getUserImage: vi.fn(),
    updateUserImage: vi.fn(),
    deleteUserImage: vi.fn(),
    createUserImage: mock<'createUserImage'>(),
    getUserImages: mock<'getUserImages'>(),
    getUserImage: mock<'getUserImage'>(),
    updateUserImage: mock<'updateUserImage'>(),
    deleteUserImage: mock<'deleteUserImage'>(),

    // Streak operations
    calculateDailyStreak: vi.fn(),
    calculateDailyStreak: mock<'calculateDailyStreak'>(),

    // Admin operations
    getTotalUserCount: vi.fn(),
    getActiveUserCount: vi.fn(),
    getTotalContentGenerated: vi.fn(),
    getSubscriptionCounts: vi.fn(),
    getTotalUserCount: mock<'getTotalUserCount'>(),
    getActiveUserCount: mock<'getActiveUserCount'>(),
    getTotalContentGenerated: mock<'getTotalContentGenerated'>(),
    getSubscriptionCounts: mock<'getSubscriptionCounts'>(),

    // Generation limit operations
    getDailyGenerationCount: vi.fn(),
    getDailyGenerationCount: mock<'getDailyGenerationCount'>(),

    // Expense operations
    createExpenseCategory: vi.fn(),
    getExpenseCategories: vi.fn(),
    getExpenseCategory: vi.fn(),
    updateExpenseCategory: vi.fn(),
    deleteExpenseCategory: vi.fn(),
    
    createExpense: vi.fn(),
    getUserExpenses: vi.fn(),
    getExpense: vi.fn(),
    updateExpense: vi.fn(),
    deleteExpense: vi.fn(),
    getExpensesByCategory: vi.fn(),
    getExpensesByDateRange: vi.fn(),
    getExpenseTotals: vi.fn(),

    getTaxDeductionInfo: vi.fn(),
    getTaxDeductionInfoByCategory: vi.fn(),
    createTaxDeductionInfo: vi.fn(),
    createExpenseCategory: mock<'createExpenseCategory'>(),
    getExpenseCategories: mock<'getExpenseCategories'>(),
    getExpenseCategory: mock<'getExpenseCategory'>(),
    updateExpenseCategory: mock<'updateExpenseCategory'>(),
    deleteExpenseCategory: mock<'deleteExpenseCategory'>(),

    createExpense: mock<'createExpense'>(),
    getUserExpenses: mock<'getUserExpenses'>(),
    getExpense: mock<'getExpense'>(),
    updateExpense: mock<'updateExpense'>(),
    deleteExpense: mock<'deleteExpense'>(),
    getExpensesByCategory: mock<'getExpensesByCategory'>(),
    getExpensesByDateRange: mock<'getExpensesByDateRange'>(),
    getExpenseTotals: mock<'getExpenseTotals'>(),

    getTaxDeductionInfo: mock<'getTaxDeductionInfo'>(),
    getTaxDeductionInfoByCategory: mock<'getTaxDeductionInfoByCategory'>(),
    createTaxDeductionInfo: mock<'createTaxDeductionInfo'>(),

    // Social Media operations
    createSocialMediaAccount: vi.fn(),
    getUserSocialMediaAccounts: vi.fn(),
    getSocialMediaAccount: vi.fn(),
    updateSocialMediaAccount: vi.fn(),
    deleteSocialMediaAccount: vi.fn(),

    createSocialMediaPost: vi.fn(),
    getUserSocialMediaPosts: vi.fn(),
    getSocialMediaPost: vi.fn(),
    updateSocialMediaPost: vi.fn(),
    deleteSocialMediaPost: vi.fn(),

    createPlatformEngagement: vi.fn(),
    getPlatformEngagement: vi.fn(),

    createPostSchedule: vi.fn(),
    getUserScheduledPosts: vi.fn(),
    getPostSchedule: vi.fn(),
    updatePostSchedule: vi.fn(),
    deletePostSchedule: vi.fn()
    createSocialMediaAccount: mock<'createSocialMediaAccount'>(),
    getUserSocialMediaAccounts: mock<'getUserSocialMediaAccounts'>(),
    getSocialMediaAccount: mock<'getSocialMediaAccount'>(),
    updateSocialMediaAccount: mock<'updateSocialMediaAccount'>(),
    deleteSocialMediaAccount: mock<'deleteSocialMediaAccount'>(),

    createSocialMediaPost: mock<'createSocialMediaPost'>(),
    getUserSocialMediaPosts: mock<'getUserSocialMediaPosts'>(),
    getSocialMediaPost: mock<'getSocialMediaPost'>(),
    updateSocialMediaPost: mock<'updateSocialMediaPost'>(),
    deleteSocialMediaPost: mock<'deleteSocialMediaPost'>(),

    createPlatformEngagement: mock<'createPlatformEngagement'>(),
    getPlatformEngagement: mock<'getPlatformEngagement'>(),

    createPostSchedule: mock<'createPostSchedule'>(),
    getUserScheduledPosts: mock<'getUserScheduledPosts'>(),
    getPostSchedule: mock<'getPostSchedule'>(),
    updatePostSchedule: mock<'updatePostSchedule'>(),
    deletePostSchedule: mock<'deletePostSchedule'>()
  };
}
}
tests/unit/expenses/expense-operations.test.ts
+2
-1

/* eslint-env node, jest */
import { describe, it, expect, vi, beforeEach, beforeAll } from 'vitest';
import type { InsertExpense } from '../../../shared/schema.js';
import type { IStorage } from '../../../server/storage';
import { buildStorageMock } from '../../_helpers/buildStorageMock.js';

// Mock the storage module
const mockStorage = buildStorageMock();

vi.mock('../../../server/storage.ts', () => ({
  storage: mockStorage
}));

describe('Expense Operations Unit Tests', () => {
  const userId = 123;
  const categoryId = 1;
  let storage: any;
  let storage: IStorage;

  beforeAll(async () => {
    vi.resetModules();
    // Import storage dynamically after mocks are set up
    const storageModule = await import('../../../server/storage.ts');
    storage = storageModule.storage;
  });

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('createExpense', () => {
    it('should create expense with valid data', async () => {
      const expenseData: InsertExpense = {
        userId,
        categoryId,
        description: 'Professional camera equipment',
        amount: 150000, // $1500.00 in cents
        expenseDate: new Date('2024-01-15'),
        taxYear: 2024,
        deductionPercentage: 100,
        notes: 'Used for content creation'
      };

