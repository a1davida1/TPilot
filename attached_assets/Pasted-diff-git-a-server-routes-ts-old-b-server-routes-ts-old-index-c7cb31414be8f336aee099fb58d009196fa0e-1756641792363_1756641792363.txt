diff --git a/server/routes.ts.old b/server/routes.ts.old
index c7cb31414be8f336aee099fb58d009196fa0eaf8..18278fa57b157b7e16a40d797f380b435ca5248d 100644
--- a/server/routes.ts.old
+++ b/server/routes.ts.old
@@ -931,146 +931,50 @@ export async function registerRoutes(app: Express): Promise<Server> {
     } catch (error) {
       res.status(500).json({ message: 'Error deleting account' });
     }
   });
   // Generate content endpoint
 
   // JWT auth middleware for generation endpoint
   const authMiddleware = (req: unknown, res: unknown, next: unknown) => {
     const authHeader = req.headers['authorization'];
     const token = authHeader && authHeader.split(' ')[1];
 
     if (!token) {
       return res.status(401).json({ error: 'Authentication required' });
     }
 
     try {
       const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';
       const decoded = jwt.verify(token, JWT_SECRET);
       req.user = decoded;
       next();
     } catch (error) {
       return res.status(403).json({ error: 'Invalid token' });
     }
   };
 
-  // Unified AI generation endpoint - handles both text and image
-  app.post('/api/generate-unified', authMiddleware, upload.single('image'), async (req: AuthRequest, res) => {
-    try {
-      const { mode, prompt, platform, style, theme, includePromotion, customInstructions } = req.body;
-      
-      // Check daily generation limit for authenticated users
-      if (req.user?.id) {
-        const user = await storage.getUser(req.user.id);
-        if (!user) {
-          return res.status(401).json({ error: 'User not found' });
-        }
-        
-        const userTier = user.tier || 'free';
-        const dailyCount = await storage.getDailyGenerationCount(req.user.id);
-        
-        // Get limit based on tier
-        let dailyLimit = 5; // Default free limit
-        if (userTier === 'pro') {
-          dailyLimit = 50;
-        } else if (userTier === 'premium') {
-          dailyLimit = -1; // Unlimited
-        }
-        
-        // Check if user has exceeded their daily limit
-        if (dailyLimit !== -1 && dailyCount >= dailyLimit) {
-          return res.status(429).json({ 
-            error: 'Daily generation limit reached',
-            limit: dailyLimit,
-            used: dailyCount,
-            tier: userTier,
-            message: `You've reached your daily limit of ${dailyLimit} generations. ${userTier === 'free' ? 'Upgrade to Pro for 50 daily generations!' : 'Your limit resets tomorrow.'}`
-          });
-        }
-      }
-      
-      let imageBase64: string | undefined;
-      
-      // Handle image upload if present
-      if (mode === 'image' && req.file) {
-        if (!validateImageFormat(req.file.originalname)) {
-          return res.status(400).json({ error: 'Invalid image format. Please use JPG, PNG, or WebP.' });
-        }
-        imageBase64 = imageToBase64(req.file.path);
-        
-        // Clean up uploaded file after converting to base64
-        await fs.unlink(req.file.path).catch(console.error);
-      }
-      
-      console.log('Generate unified request:', { mode, imageBase64: !!imageBase64, platform, style, theme });
-
-      const result = await generateUnifiedAIContent({
-        mode: mode || 'text',
-        prompt,
-        imageBase64,
-        platform: platform || 'reddit',
-        style: style || 'playful',
-        theme,
-        includePromotion: includePromotion === 'true' || includePromotion === true,
-        customInstructions
-      });
-
-      // Check if this is demo content and add metadata
-      const isDemoContent = result.titles[0]?.includes('[DEMO]') || result.content?.includes('[DEMO CONTENT]');
-      
-      // Save to database if user is authenticated
-      if (req.user?.id) {
-        await storage.createContentGeneration({
-          userId: req.user.id,
-          platform: platform || 'reddit',
-          style: style || 'playful',
-          theme: theme || 'general',
-          titles: result.titles,
-          content: result.content,
-          photoInstructions: result.photoInstructions,
-          prompt: prompt || customInstructions,
-          allowsPromotion: includePromotion === 'true' || includePromotion === true
-        });
-      }
-
-      // Add metadata to response
-      const response = {
-        ...result,
-        contentSource: isDemoContent ? 'demo' : 'ai',
-        isDemo: isDemoContent,
-        apiStatus: isDemoContent ? 'unavailable' : 'active'
-      };
-
-      res.json(response);
-    } catch (error) {
-      console.error('Unified AI generation error:', error);
-      res.status(500).json({ 
-        error: 'Failed to generate content',
-        message: error instanceof Error ? error.message : 'Unknown error'
-      });
-    }
-  });
 
   // Image analysis endpoint
   app.post('/api/analyze-image', upload.single('image'), async (req, res) => {
     try {
       if (!req.file) {
         return res.status(400).json({ error: 'No image file provided' });
       }
 
       if (!validateImageFormat(req.file.originalname)) {
         return res.status(400).json({ error: 'Invalid image format. Please use JPG, PNG, or WebP.' });
       }
 
       const imageBase64 = imageToBase64(req.file.path);
       const description = await analyzeImage(imageBase64);
 
       // Clean up uploaded file
       await fs.unlink(req.file.path).catch(console.error);
 
       res.json({ description });
     } catch (error) {
       console.error('Image analysis error:', error);
       res.status(500).json({ error: 'Failed to analyze image' });
     }
   });
 
