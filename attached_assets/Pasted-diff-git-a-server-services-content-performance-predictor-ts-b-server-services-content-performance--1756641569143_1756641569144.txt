diff --git a/server/services/content-performance-predictor.ts b/server/services/content-performance-predictor.ts
index f38ef8b6a97533bf910b243f8d59a90b81a3f049..e49cb1ddcc8e3e9cb7be050cecec59535db8f317 100644
--- a/server/services/content-performance-predictor.ts
+++ b/server/services/content-performance-predictor.ts
@@ -40,51 +40,51 @@ class ContentPerformancePredictor {
       weight: 0.15
     },
     dayOfWeek: {
       optimal: [4, 5, 6], // Thu, Fri, Sat
       weight: 0.08
     },
     contentLength: {
       optimal: { min: 100, max: 500 },
       weight: 0.10
     },
     imageCount: {
       optimal: { min: 1, max: 5 },
       weight: 0.20
     },
     hashtagCount: {
       optimal: { min: 3, max: 7 },
       weight: 0.05
     },
     hasCTA: {
       value: true,
       weight: 0.05
     }
   };
 
   // Platform-specific adjustments
-  private platformMultipliers = {
+  private platformMultipliers: Record<string, Partial<Record<keyof ContentFeatures, number>>> = {
     reddit: {
       titleLength: 1.2,
       hasQuestion: 1.3,
       imageCount: 0.8
     },
     twitter: {
       titleLength: 0.8,
       hasEmojis: 1.2,
       hashtagCount: 1.3
     },
     instagram: {
       imageCount: 1.5,
       hashtagCount: 1.2,
       hasEmojis: 1.1
     },
     onlyfans: {
       imageCount: 1.4,
       hasCTA: 1.5,
       contentLength: 0.7
     },
     tiktok: {
       titleLength: 0.6,
       hasEmojis: 1.3,
       hashtagCount: 1.4
     }
diff --git a/server/services/content-performance-predictor.ts b/server/services/content-performance-predictor.ts
index f38ef8b6a97533bf910b243f8d59a90b81a3f049..e49cb1ddcc8e3e9cb7be050cecec59535db8f317 100644
--- a/server/services/content-performance-predictor.ts
+++ b/server/services/content-performance-predictor.ts
@@ -185,80 +185,80 @@ class ContentPerformancePredictor {
     }
     
     // Hashtag count score
     const hashtagOpt = this.featureWeights.hashtagCount.optimal;
     if (features.hashtagCount >= hashtagOpt.min && features.hashtagCount <= hashtagOpt.max) {
       score += 10 * this.featureWeights.hashtagCount.weight;
     }
     
     // CTA score
     if (features.hasCTA === this.featureWeights.hasCTA.value) {
       score += 10 * this.featureWeights.hasCTA.weight;
     }
     
     // Sentiment bonus
     if (features.sentiment === 'positive') {
       score += 5;
     } else if (features.sentiment === 'negative') {
       score -= 5;
     }
     
     return score;
   }
 
   private applyPlatformAdjustments(score: number, features: ContentFeatures): number {
     const multipliers = this.platformMultipliers[features.platform as keyof typeof this.platformMultipliers];
-    
+
     if (!multipliers) return score;
-    
+
     let adjustment = 1.0;
-    
+
     // Apply platform-specific multipliers
-    if (features.titleLength > 0 && multipliers.titleLength) {
+    if (features.titleLength > 0 && multipliers.titleLength !== undefined) {
       adjustment *= multipliers.titleLength;
     }
-    
-    if (features.hasEmojis && multipliers.hasEmojis) {
+
+    if (features.hasEmojis && multipliers.hasEmojis !== undefined) {
       adjustment *= multipliers.hasEmojis;
     }
-    
-    if (features.hasQuestion && multipliers.hasQuestion) {
+
+    if (features.hasQuestion && multipliers.hasQuestion !== undefined) {
       adjustment *= multipliers.hasQuestion;
     }
-    
-    if (features.imageCount > 0 && multipliers.imageCount) {
+
+    if (features.imageCount > 0 && multipliers.imageCount !== undefined) {
       adjustment *= multipliers.imageCount;
     }
-    
-    if (features.hashtagCount > 0 && multipliers.hashtagCount) {
+
+    if (features.hashtagCount > 0 && multipliers.hashtagCount !== undefined) {
       adjustment *= multipliers.hashtagCount;
     }
-    
-    if (features.hasCTA && multipliers.hasCTA) {
+
+    if (features.hasCTA && multipliers.hasCTA !== undefined) {
       adjustment *= multipliers.hasCTA;
     }
-    
+
     return score * adjustment;
   }
 
   private applyContentTypeAdjustments(score: number, features: ContentFeatures): number {
     // NSFW content typically has different engagement patterns
     if (features.contentType === 'nsfw') {
       // NSFW performs better with images
       if (features.imageCount === 0) {
         score *= 0.7; // 30% penalty for no images
       } else if (features.imageCount > 2) {
         score *= 1.2; // 20% bonus for multiple images
       }
       
       // NSFW performs better on certain platforms
       if (['onlyfans', 'reddit'].includes(features.platform)) {
         score *= 1.1;
       }
       
       // NSFW performs better during evening/night
       if (features.postTime >= 20 || features.postTime <= 2) {
         score *= 1.15;
       }
     }
     
     return score;
