 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/tests/unit/server/services/multi-ai-provider.test.ts b/tests/unit/server/services/multi-ai-provider.test.ts
index e160d73a69337752e831700554975fc51f5a9ce7..c4fa52958497a06e9313c3d04d8c56fa64b3d498 100644
--- a/tests/unit/server/services/multi-ai-provider.test.ts
+++ b/tests/unit/server/services/multi-ai-provider.test.ts
@@ -1,76 +1,80 @@
 
 import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
 
 const mockModel = {
   generateContent: vi.fn()
 };
 
 const mockGemini = vi.hoisted(() => ({
-  getGenerativeModel: vi.fn(() => mockModel)
+  getGenerativeModel: vi.fn(() => mockModel),
+  models: {
+    generateContent: vi.fn()
+  }
 }));
 
 const mockAnthropic = vi.hoisted(() => ({
   messages: {
     create: vi.fn()
   }
 }));
 
 const mockOpenAI = vi.hoisted(() => ({
   chat: {
     completions: {
       create: vi.fn()
     }
   }
 }));
 
 const mockSafeLog = vi.hoisted(() => vi.fn());
 
 const googleGenAIConstructor = vi.hoisted(() => vi.fn(() => mockGemini));
 const openAIConstructor = vi.hoisted(() => vi.fn(() => mockOpenAI));
 const anthropicConstructor = vi.hoisted(() => vi.fn(() => mockAnthropic));
 
-vi.mock('@google/generative-ai', () => ({ GoogleGenerativeAI: googleGenAIConstructor }));
+vi.mock('@google/genai', () => ({ GoogleGenAI: googleGenAIConstructor }));
 vi.mock('openai', () => ({ default: openAIConstructor }));
 vi.mock('@anthropic-ai/sdk', () => ({ default: anthropicConstructor }));
 vi.mock('../../../../server/lib/logger-utils.ts', () => ({ safeLog: mockSafeLog }));
 
 const envKeys = ['OPENAI_API_KEY', 'ANTHROPIC_API_KEY', 'GEMINI_API_KEY', 'GOOGLE_GENAI_API_KEY'] as const;
 type EnvKey = typeof envKeys[number];
 
 const originalEnv: Record<EnvKey, string | undefined> = {
   OPENAI_API_KEY: process.env.OPENAI_API_KEY,
   ANTHROPIC_API_KEY: process.env.ANTHROPIC_API_KEY,
   GEMINI_API_KEY: process.env.GEMINI_API_KEY,
   GOOGLE_GENAI_API_KEY: process.env.GOOGLE_GENAI_API_KEY
 };
 
 describe('generateWithMultiProvider provider selection', () => {
   beforeEach(() => {
     vi.clearAllMocks();
     mockModel.generateContent.mockReset();
     mockGemini.getGenerativeModel.mockReset();
+    mockGemini.models.generateContent.mockReset();
     mockAnthropic.messages.create.mockReset();
     mockOpenAI.chat.completions.create.mockReset();
     googleGenAIConstructor.mockReset();
     openAIConstructor.mockReset();
     anthropicConstructor.mockReset();
     mockSafeLog.mockReset();
 
     envKeys.forEach(key => {
       delete process.env[key];
     });
   });
 
   afterEach(() => {
     envKeys.forEach(key => {
       const value = originalEnv[key];
       if (typeof value === 'string') {
         process.env[key] = value;
       } else {
         delete process.env[key];
       }
     });
   });
 
   it('prefers Gemini when a Gemini key is available', async () => {
     process.env.GEMINI_API_KEY = 'gemini-key';
diff --git a/tests/unit/server/services/multi-ai-provider.test.ts b/tests/unit/server/services/multi-ai-provider.test.ts
index e160d73a69337752e831700554975fc51f5a9ce7..c4fa52958497a06e9313c3d04d8c56fa64b3d498 100644
--- a/tests/unit/server/services/multi-ai-provider.test.ts
+++ b/tests/unit/server/services/multi-ai-provider.test.ts
@@ -81,50 +85,51 @@ describe('generateWithMultiProvider provider selection', () => {
     const { generateWithMultiProvider } = await import('../../../../server/services/multi-ai-provider');
 
     mockModel.generateContent.mockResolvedValueOnce({
       response: {
         text: () => JSON.stringify({
           titles: ['Gemini wins'],
           content: 'Gemini content that clearly exceeds the fallback length requirement.',
           photoInstructions: {
             lighting: 'soft',
             cameraAngle: 'eye-level',
             composition: 'balanced',
             styling: 'casual',
             mood: 'relaxed',
             technicalSettings: 'auto'
           }
         })
       }
     });
 
     const response = await generateWithMultiProvider({
       user: { id: 1 },
       platform: 'instagram',
       allowsPromotion: 'no'
     });
 
+    expect(googleGenAIConstructor).toHaveBeenCalledWith({ apiKey: 'gemini-key' });
     expect(response.provider).toBe('gemini-flash');
     expect(mockModel.generateContent).toHaveBeenCalledTimes(1);
     expect(mockAnthropic.messages.create).not.toHaveBeenCalled();
     expect(mockOpenAI.chat.completions.create).not.toHaveBeenCalled();
   });
 
   it('falls back to Claude before OpenAI when Gemini is unavailable', async () => {
     process.env.ANTHROPIC_API_KEY = 'anthropic-key';
     process.env.OPENAI_API_KEY = 'openai-key';
 
     vi.resetModules();
     const { generateWithMultiProvider } = await import('../../../../server/services/multi-ai-provider');
 
     mockAnthropic.messages.create.mockResolvedValueOnce({
       content: [
         {
           type: 'text',
           text: JSON.stringify({
             titles: ['Claude selected'],
             content: 'Claude response ensuring enough detail for validation.',
             photoInstructions: {
               lighting: 'studio',
               cameraAngle: 'portrait',
               composition: 'centered',
               styling: 'formal',
 
EOF
)