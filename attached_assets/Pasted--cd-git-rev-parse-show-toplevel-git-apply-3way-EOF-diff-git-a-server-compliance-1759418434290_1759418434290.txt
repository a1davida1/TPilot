 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/compliance/__tests__/ruleViolationTracker.test.ts b/server/compliance/__tests__/ruleViolationTracker.test.ts
index 7e3fc2515be90707b5010e9842307e72a471e03a..7326e668fc0d19d719d9c0237ec51720ec3cb828 100644
--- a/server/compliance/__tests__/ruleViolationTracker.test.ts
+++ b/server/compliance/__tests__/ruleViolationTracker.test.ts
@@ -1,57 +1,81 @@
-import { describe, it, expect, beforeEach } from 'vitest';
+import { describe, it, expect, beforeEach, afterAll, vi } from 'vitest';
 import {
   recordPostOutcome,
   summarizeRemovalReasons,
   clearRecordedOutcomes,
   getRecordedOutcomes,
   type PostOutcomeStatus
 } from '../ruleViolationTracker.js';
 
 describe('ruleViolationTracker', () => {
   const userId = 42;
 
-  beforeEach(() => {
-    clearRecordedOutcomes();
+  beforeEach(async () => {
+    await clearRecordedOutcomes();
   });
 
-  it('records successful posts without inflating removal counts', () => {
+  afterAll(async () => {
+    await clearRecordedOutcomes();
+  });
+
+  it('records successful posts without inflating removal counts', async () => {
     const status: PostOutcomeStatus = 'posted';
-    recordPostOutcome(userId, 'testsub', { status });
+    await recordPostOutcome(userId, 'testsub', { status });
 
-    const summary = summarizeRemovalReasons(userId);
+    const summary = await summarizeRemovalReasons(userId);
     expect(summary.total).toBe(0);
     expect(summary.byReason).toEqual({});
 
-    const history = getRecordedOutcomes(userId);
+    const history = await getRecordedOutcomes(userId);
     expect(history).toHaveLength(1);
     expect(history[0]).toMatchObject({ subreddit: 'testsub', status });
   });
 
-  it('aggregates removal reasons for a user', () => {
-    recordPostOutcome(userId, 'sub1', { status: 'removed', reason: 'spam' });
-    recordPostOutcome(userId, 'sub2', { status: 'removed', reason: 'spam' });
-    recordPostOutcome(userId, 'sub3', { status: 'removed', reason: 'rules_violation' });
+  it('aggregates removal reasons for a user', async () => {
+    await recordPostOutcome(userId, 'sub1', { status: 'removed', reason: 'spam' });
+    await recordPostOutcome(userId, 'sub2', { status: 'removed', reason: 'spam' });
+    await recordPostOutcome(userId, 'sub3', { status: 'removed', reason: 'rules_violation' });
 
-    const summary = summarizeRemovalReasons(userId);
+    const summary = await summarizeRemovalReasons(userId);
     expect(summary.total).toBe(3);
     expect(summary.byReason).toEqual({
       spam: 2,
       rules_violation: 1
     });
   });
 
-  it('handles empty state by returning zero counts', () => {
-    const summary = summarizeRemovalReasons(999);
+  it('handles empty state by returning zero counts', async () => {
+    const summary = await summarizeRemovalReasons(999);
     expect(summary.total).toBe(0);
     expect(summary.byReason).toEqual({});
   });
 
-  it('defaults missing removal reasons to unspecified bucket', () => {
-    recordPostOutcome(userId, 'sub1', { status: 'removed' });
-    recordPostOutcome(userId, 'sub2', { status: 'removed', reason: '  ' });
+  it('defaults missing removal reasons to unspecified bucket', async () => {
+    await recordPostOutcome(userId, 'sub1', { status: 'removed' });
+    await recordPostOutcome(userId, 'sub2', { status: 'removed', reason: '  ' });
 
-    const summary = summarizeRemovalReasons(userId);
+    const summary = await summarizeRemovalReasons(userId);
     expect(summary.total).toBe(2);
     expect(summary.byReason).toEqual({ unspecified: 2 });
   });
-});
+
+  it('persists recorded outcomes across module reloads', async () => {
+    await recordPostOutcome(userId, 'persist1', { status: 'removed', reason: 'spam' });
+    await recordPostOutcome(userId, 'persist2', { status: 'posted' });
+
+    const initialHistory = await getRecordedOutcomes(userId);
+    expect(initialHistory).toHaveLength(2);
+    expect(initialHistory[0].timestamp).toEqual(expect.any(Number));
+
+    vi.resetModules();
+    const reloadedModule = await import('../ruleViolationTracker.js');
+    const reloadedHistory = await reloadedModule.getRecordedOutcomes(userId);
+    expect(reloadedHistory).toHaveLength(2);
+    expect(reloadedHistory.map(outcome => outcome.subreddit)).toEqual([
+      'persist1',
+      'persist2'
+    ]);
+
+    await reloadedModule.clearRecordedOutcomes(userId);
+  });
+});
 
EOF
)