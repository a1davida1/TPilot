diff --git a/server/services/enhanced-ai-service.ts b/server/services/enhanced-ai-service.ts
index 2f4d08de9774519141c82c16de1ef2cd80d6cd2d..913cd5c457037b772435e90a69b026bb62857779 100644
--- a/server/services/enhanced-ai-service.ts
+++ b/server/services/enhanced-ai-service.ts
@@ -48,50 +48,58 @@ export interface EnhancedPhotoInstructions {
   styling: {
     outfit: string;
     accessories: string;
     hair: string;
     makeup: string;
   };
   mood: {
     expression: string;
     bodyLanguage: string;
     energy: string;
     atmosphere: string;
   };
   technical: {
     aperture: string;
     iso: string;
     shutterSpeed: string;
     whiteBalance: string;
     focusPoint: string;
     depth: string;
   };
   props?: string[];
   location?: string;
   timeOfDay?: string;
 }
 
+export interface AIBaseResponse {
+  titles?: string[];
+  content?: string;
+  photoInstructions?: Partial<EnhancedPhotoInstructions>;
+  hashtags?: string[];
+  caption?: string;
+}
+
 export interface EnhancedAIResponse {
   titles: string[];
   content: string;
   photoInstructions: EnhancedPhotoInstructions;
   hashtags: string[];
   caption: string;
   callToAction?: string;
   engagementHooks?: string[];
   contentWarnings?: string[];
   optimalPostingTime?: string;
   crossPromotionSuggestions?: string[];
   metadata?: {
     generatedAt: Date;
     provider: string;
     model: string;
     confidence: number;
     estimatedEngagement: 'high' | 'medium' | 'low';
   };
 }
 
 class EnhancedAIContentGenerator {
   private readonly styleGuides = {
     playful: {
       tone: "Fun, flirty, and lighthearted with playful energy",
       language: "Casual, emoji-friendly, with playful innuendos",
diff --git a/server/services/enhanced-ai-service.ts b/server/services/enhanced-ai-service.ts
index 2f4d08de9774519141c82c16de1ef2cd80d6cd2d..913cd5c457037b772435e90a69b026bb62857779 100644
--- a/server/services/enhanced-ai-service.ts
+++ b/server/services/enhanced-ai-service.ts
@@ -295,139 +303,160 @@ Create content that feels authentic, drives engagement, and perfectly matches th
       const result = await generateWithMultiProvider({
         user: {
           id: parseInt(request.userId || '0'),
           tier: 'pro'
         },
         platform: request.platform,
         imageDescription: request.imageBase64 ? 'User uploaded image' : undefined,
         customPrompt: prompt,
         allowsPromotion: request.includePromotion ? 'yes' : 'no',
         baseImageUrl: request.imageBase64 ? `data:image/jpeg;base64,${request.imageBase64}` : undefined
       });
 
       // Parse and validate the response
       if (result && result.titles && result.content) {
         return result;
       }
       
       return null;
     } catch (error) {
       safeLog('error', 'AI generation fallback failed', { error: error.message });
       return null;
     }
   }
 
   private enhanceResponse(
-    baseResponse: unknown, 
+    baseResponse: unknown,
     request: EnhancedAIRequest,
-    metadata: unknown
+    metadata: Record<string, unknown>
   ): EnhancedAIResponse {
     const platform = this.platformOptimizations[request.platform];
-    const response = baseResponse as any;
-    const meta = metadata as any;
+    const response = baseResponse as AIBaseResponse;
+    const provider = typeof metadata.provider === 'string' ? metadata.provider : 'unknown';
+    const model = typeof metadata.model === 'string' ? metadata.model : 'unknown';
+    const confidence = typeof metadata.confidence === 'number' ? metadata.confidence : 0;
     
     // Ensure content length is optimized
     let content = response?.content || '';
     if (content.length > platform.contentLength.max) {
       content = content.substring(0, platform.contentLength.max - 3) + '...';
     }
     
     // Generate platform-specific hashtags
     const hashtags = this.generateOptimizedHashtags(request, response?.hashtags);
     
     // Create enhanced photo instructions
     const photoInstructions = this.createDetailedPhotoInstructions(
       response?.photoInstructions || {},
       request
     );
     
     return {
       titles: response?.titles || this.generateTitles(request),
       content,
       photoInstructions,
       hashtags,
       caption: response?.caption || content.split('\n')[0],
       callToAction: this.generateCallToAction(request),
       engagementHooks: this.generateEngagementHooks(request),
       contentWarnings: this.assessContentWarnings(content),
       optimalPostingTime: this.suggestOptimalPostingTime(request.platform),
       crossPromotionSuggestions: this.suggestCrossPromotion(request.platform),
       metadata: {
         generatedAt: new Date(),
-        provider: meta?.provider || 'unknown',
-        model: meta?.model || 'unknown',
-        confidence: meta?.confidence || 0,
+        provider,
+        model,
+        confidence,
         estimatedEngagement: this.estimateEngagement(request, content)
       }
     };
   }
 
   private createDetailedPhotoInstructions(
-    base: unknown,
+    base: Record<string, unknown>,
     request: EnhancedAIRequest
   ): EnhancedPhotoInstructions {
     const style = this.styleGuides[request.style];
-    const baseInstructions = base as any;
-    
+    const lightingType =
+      typeof base.lighting === 'string'
+        ? base.lighting
+        : this.getLightingForStyle(request.style);
+    const cameraAngle =
+      typeof base.cameraAngle === 'string'
+        ? base.cameraAngle
+        : this.getCameraAngleForStyle(request.style);
+    const composition =
+      typeof base.composition === 'string'
+        ? base.composition
+        : 'Rule of thirds with subject off-center';
+    const styling =
+      typeof base.styling === 'string'
+        ? base.styling
+        : this.getOutfitForStyle(request.style);
+    const mood =
+      typeof base.mood === 'string'
+        ? base.mood
+        : this.getExpressionForStyle(request.style);
+
     return {
       lighting: {
-        type: baseInstructions?.lighting || this.getLightingForStyle(request.style),
-        direction: "45-degree angle from front-left",
-        intensity: request.style === 'mysterious' ? "Low to medium" : "Medium to bright",
-        colorTemperature: request.style === 'elegant' ? "Warm (3200K)" : "Neutral (5500K)"
+        type: lightingType,
+        direction: '45-degree angle from front-left',
+        intensity: request.style === 'mysterious' ? 'Low to medium' : 'Medium to bright',
+        colorTemperature: request.style === 'elegant' ? 'Warm (3200K)' : 'Neutral (5500K)'
       },
       camera: {
-        angle: baseInstructions?.cameraAngle || this.getCameraAngleForStyle(request.style),
-        distance: "Medium shot (waist up)",
-        height: "Slightly above eye level for flattering angle",
-        lens: "50-85mm for natural perspective"
+        angle: cameraAngle,
+        distance: 'Medium shot (waist up)',
+        height: 'Slightly above eye level for flattering angle',
+        lens: '50-85mm for natural perspective'
       },
       composition: {
-        framing: baseInstructions?.composition || "Rule of thirds with subject off-center",
-        rule: "Golden ratio for visual balance",
+        framing: composition,
+        rule: 'Golden ratio for visual balance',
         background: this.getBackgroundForStyle(request.style),
-        foreground: "Clear, uncluttered"
+        foreground: 'Clear, uncluttered'
       },
       styling: {
-        outfit: baseInstructions?.styling || this.getOutfitForStyle(request.style),
-        accessories: "Minimal, tasteful jewelry",
-        hair: "Natural, well-groomed style",
-        makeup: request.style === 'elegant' ? "Sophisticated, evening look" : "Natural, enhanced features"
+        outfit: styling,
+        accessories: 'Minimal, tasteful jewelry',
+        hair: 'Natural, well-groomed style',
+        makeup: request.style === 'elegant' ? 'Sophisticated, evening look' : 'Natural, enhanced features'
       },
       mood: {
-        expression: baseInstructions?.mood || this.getExpressionForStyle(request.style),
-        bodyLanguage: "Open, confident posture",
+        expression: mood,
+        bodyLanguage: 'Open, confident posture',
         energy: style.tone,
         atmosphere: style.photoStyle
       },
       technical: {
-        aperture: "f/2.8 for soft background blur",
-        iso: "100-400 for minimal noise",
-        shutterSpeed: "1/125s or faster to avoid blur",
-        whiteBalance: "Auto or daylight",
-        focusPoint: "Eyes for portrait shots",
-        depth: "Shallow for subject isolation"
+        aperture: 'f/2.8 for soft background blur',
+        iso: '100-400 for minimal noise',
+        shutterSpeed: '1/125s or faster to avoid blur',
+        whiteBalance: 'Auto or daylight',
+        focusPoint: 'Eyes for portrait shots',
+        depth: 'Shallow for subject isolation'
       },
       props: this.suggestProps(request.contentType),
       location: this.suggestLocation(request.style),
       timeOfDay: this.suggestTimeOfDay(request.style)
     };
   }
 
   private generateOptimizedHashtags(request: EnhancedAIRequest, base: string[] = []): string[] {
     const limit = this.platformOptimizations[request.platform].hashtagLimit;
     if (limit === 0) return [];
     
     const hashtags = new Set<string>();
     
     // Add base hashtags
     base.forEach(tag => hashtags.add(tag));
     
     // Add platform-specific hashtags
     const platformTags = this.getPlatformHashtags(request.platform);
     platformTags.forEach(tag => hashtags.add(tag));
     
     // Add style-specific hashtags
     const styleTags = this.getStyleHashtags(request.style);
     styleTags.forEach(tag => hashtags.add(tag));
     
     // Add niche-specific hashtags
diff --git a/server/services/enhanced-ai-service.ts b/server/services/enhanced-ai-service.ts
index 2f4d08de9774519141c82c16de1ef2cd80d6cd2d..913cd5c457037b772435e90a69b026bb62857779 100644
--- a/server/services/enhanced-ai-service.ts
+++ b/server/services/enhanced-ai-service.ts
@@ -475,71 +504,71 @@ Create content that feels authentic, drives engagement, and perfectly matches th
   private generateEngagementHooks(request: EnhancedAIRequest): string[] {
     return [
       "Double tap if you agree!",
       "Save this for later 📌",
       "Tag someone who needs to see this",
       "What's your favorite part?",
       "Drop a 🔥 if you like this vibe"
     ];
   }
 
   private assessContentWarnings(content: string): string[] {
     const warnings: string[] = [];
     
     if (content.toLowerCase().includes('nsfw')) {
       warnings.push('NSFW content');
     }
     
     if (content.toLowerCase().includes('18+')) {
       warnings.push('18+ only');
     }
     
     return warnings;
   }
 
   private suggestOptimalPostingTime(platform: string): string {
-    const times = {
-      reddit: "9-10 AM or 7-9 PM EST",
-      twitter: "9 AM or 7-9 PM EST",
-      instagram: "11 AM-1 PM or 7-9 PM EST",
-      tiktok: "6-9 AM or 7-11 PM EST",
-      onlyfans: "8-10 PM EST"
+    const times: Record<string, string> = {
+      reddit: '9-10 AM or 7-9 PM EST',
+      twitter: '9 AM or 7-9 PM EST',
+      instagram: '11 AM-1 PM or 7-9 PM EST',
+      tiktok: '6-9 AM or 7-11 PM EST',
+      onlyfans: '8-10 PM EST'
     };
-    
-    return (times as any)[platform] || "Evening hours (7-10 PM)";
+
+    return times[platform] || 'Evening hours (7-10 PM)';
   }
 
   private suggestCrossPromotion(currentPlatform: string): string[] {
-    const suggestions = {
+    const suggestions: Record<string, string[]> = {
       reddit: ['Twitter', 'OnlyFans'],
       twitter: ['Instagram', 'OnlyFans'],
       instagram: ['Twitter', 'TikTok'],
       tiktok: ['Instagram', 'Twitter'],
       onlyfans: ['Twitter', 'Reddit']
     };
-    
-    return (suggestions as any)[currentPlatform] || [];
+
+    return suggestions[currentPlatform] || [];
   }
 
   private estimateEngagement(request: EnhancedAIRequest, content: string): 'high' | 'medium' | 'low' {
     let score = 0;
     
     // Check for engagement factors
     if (content.includes('?')) score++; // Questions increase engagement
     if (request.includePromotion && request.promotionLevel === 'subtle') score++; // Subtle promotion works better
     if (request.style === 'playful' || request.style === 'authentic') score++; // These styles typically perform better
     if (content.length > 50 && content.length < 200) score++; // Optimal length
     
     if (score >= 3) return 'high';
     if (score >= 2) return 'medium';
     return 'low';
   }
 
   private generateFromTemplates(request: EnhancedAIRequest): EnhancedAIResponse {
     const templates = preGeneratedTemplates.filter(t => 
       t.style === request.style && 
       t.category === (request.contentType || 'engagement')
     );
     
     const template = templates[0] || preGeneratedTemplates[0];
     
     return this.enhanceResponse({
diff --git a/server/services/enhanced-ai-service.ts b/server/services/enhanced-ai-service.ts
index 2f4d08de9774519141c82c16de1ef2cd80d6cd2d..913cd5c457037b772435e90a69b026bb62857779 100644
--- a/server/services/enhanced-ai-service.ts
+++ b/server/services/enhanced-ai-service.ts
@@ -567,181 +596,181 @@ Create content that feels authentic, drives engagement, and perfectly matches th
         `${request.style.charAt(0).toUpperCase() + request.style.slice(1)} vibes today`,
         "Check out my latest content!",
         "Something special for you"
       ],
       content: `Excited to share this with you! ${request.includePromotion ? 'Full content available on my page.' : 'Let me know what you think!'}`,
       photoInstructions: this.createDetailedPhotoInstructions({}, request),
       hashtags: ['#contentcreator', '#dailypost', '#vibes'],
       caption: "New content alert!",
       callToAction: "Drop a comment below!",
       engagementHooks: ["Like if you enjoy!", "Share with friends!"],
       contentWarnings: [],
       optimalPostingTime: "Evening (7-9 PM)",
       crossPromotionSuggestions: ["Twitter", "Instagram"],
       metadata: {
         generatedAt: new Date(),
         provider: 'fallback',
         model: 'safety',
         confidence: 0.5,
         estimatedEngagement: 'medium'
       }
     };
   }
 
   // Helper methods
   private getLightingForStyle(style: string): string {
-    const lighting = {
-      playful: "Bright, natural daylight",
-      mysterious: "Dramatic side lighting with shadows",
-      bold: "High contrast studio lighting",
-      elegant: "Soft, diffused window light",
-      confident: "Even, flattering ring light",
-      authentic: "Natural golden hour light",
-      sassy: "Colorful LED accent lighting",
-      professional: "Balanced three-point lighting"
+    const lighting: Record<string, string> = {
+      playful: 'Bright, natural daylight',
+      mysterious: 'Dramatic side lighting with shadows',
+      bold: 'High contrast studio lighting',
+      elegant: 'Soft, diffused window light',
+      confident: 'Even, flattering ring light',
+      authentic: 'Natural golden hour light',
+      sassy: 'Colorful LED accent lighting',
+      professional: 'Balanced three-point lighting'
     };
-    return (lighting as any)[style] || "Natural lighting";
+    return lighting[style] || 'Natural lighting';
   }
 
   private getCameraAngleForStyle(style: string): string {
-    const angles = {
-      playful: "Dynamic, varying angles",
-      mysterious: "Low angle for drama",
-      bold: "Direct, eye-level",
-      elegant: "Slightly above for elegance",
-      confident: "Straight on, powerful",
-      authentic: "Natural, candid angles",
-      sassy: "Dutch angles for attitude",
-      professional: "Traditional portrait angle"
+    const angles: Record<string, string> = {
+      playful: 'Dynamic, varying angles',
+      mysterious: 'Low angle for drama',
+      bold: 'Direct, eye-level',
+      elegant: 'Slightly above for elegance',
+      confident: 'Straight on, powerful',
+      authentic: 'Natural, candid angles',
+      sassy: 'Dutch angles for attitude',
+      professional: 'Traditional portrait angle'
     };
-    return (angles as any)[style] || "Eye level";
+    return angles[style] || 'Eye level';
   }
 
   private getBackgroundForStyle(style: string): string {
-    const backgrounds = {
-      playful: "Colorful, fun environment",
-      mysterious: "Dark, textured backdrop",
-      bold: "Clean, minimal background",
-      elegant: "Luxurious, sophisticated setting",
-      confident: "Urban or modern backdrop",
-      authentic: "Natural, lived-in space",
-      sassy: "Vibrant, personality-filled area",
-      professional: "Clean, professional setting"
+    const backgrounds: Record<string, string> = {
+      playful: 'Colorful, fun environment',
+      mysterious: 'Dark, textured backdrop',
+      bold: 'Clean, minimal background',
+      elegant: 'Luxurious, sophisticated setting',
+      confident: 'Urban or modern backdrop',
+      authentic: 'Natural, lived-in space',
+      sassy: 'Vibrant, personality-filled area',
+      professional: 'Clean, professional setting'
     };
-    return (backgrounds as any)[style] || "Simple, uncluttered background";
+    return backgrounds[style] || 'Simple, uncluttered background';
   }
 
   private getOutfitForStyle(style: string): string {
-    const outfits = {
-      playful: "Bright colors, fun patterns, casual wear",
-      mysterious: "Dark tones, flowing fabrics, layers",
-      bold: "Statement pieces, strong silhouettes",
-      elegant: "Classic pieces, sophisticated fabrics",
-      confident: "Well-fitted, powerful attire",
-      authentic: "Comfortable, personal style",
-      sassy: "Trendy, eye-catching pieces",
-      professional: "Polished, business casual"
+    const outfits: Record<string, string> = {
+      playful: 'Bright colors, fun patterns, casual wear',
+      mysterious: 'Dark tones, flowing fabrics, layers',
+      bold: 'Statement pieces, strong silhouettes',
+      elegant: 'Classic pieces, sophisticated fabrics',
+      confident: 'Well-fitted, powerful attire',
+      authentic: 'Comfortable, personal style',
+      sassy: 'Trendy, eye-catching pieces',
+      professional: 'Polished, business casual'
     };
-    return (outfits as any)[style] || "Comfortable, flattering outfit";
+    return outfits[style] || 'Comfortable, flattering outfit';
   }
 
   private getExpressionForStyle(style: string): string {
-    const expressions = {
-      playful: "Genuine smile, laughing eyes",
-      mysterious: "Enigmatic, slight smile",
-      bold: "Confident, direct gaze",
-      elegant: "Serene, composed",
-      confident: "Self-assured, slight smile",
-      authentic: "Natural, genuine emotions",
-      sassy: "Playful smirk, raised eyebrow",
-      professional: "Warm, approachable smile"
+    const expressions: Record<string, string> = {
+      playful: 'Genuine smile, laughing eyes',
+      mysterious: 'Enigmatic, slight smile',
+      bold: 'Confident, direct gaze',
+      elegant: 'Serene, composed',
+      confident: 'Self-assured, slight smile',
+      authentic: 'Natural, genuine emotions',
+      sassy: 'Playful smirk, raised eyebrow',
+      professional: 'Warm, approachable smile'
     };
-    return (expressions as any)[style] || "Natural expression";
+    return expressions[style] || 'Natural expression';
   }
 
   private suggestProps(contentType?: string): string[] {
-    const props = {
-      teasing: ["silk scarf", "feather", "mirror"],
-      engagement: ["coffee cup", "book", "flowers"],
-      lifestyle: ["yoga mat", "healthy snacks", "plants"],
-      announcement: ["balloons", "confetti", "signs"],
-      educational: ["notebook", "glasses", "laptop"]
+    const props: Record<string, string[]> = {
+      teasing: ['silk scarf', 'feather', 'mirror'],
+      engagement: ['coffee cup', 'book', 'flowers'],
+      lifestyle: ['yoga mat', 'healthy snacks', 'plants'],
+      announcement: ['balloons', 'confetti', 'signs'],
+      educational: ['notebook', 'glasses', 'laptop']
     };
-    return (props as any)[contentType || 'engagement'] || [];
+    return props[contentType || 'engagement'] || [];
   }
 
   private suggestLocation(style: string): string {
-    const locations = {
-      playful: "Bright, colorful room or outdoor park",
-      mysterious: "Dimly lit boudoir or artistic studio",
-      bold: "Modern loft or urban rooftop",
-      elegant: "Luxury hotel or classic interior",
-      confident: "Professional studio or cityscape",
-      authentic: "Home setting or favorite cafe",
-      sassy: "Trendy boutique or neon-lit space",
-      professional: "Office or co-working space"
+    const locations: Record<string, string> = {
+      playful: 'Bright, colorful room or outdoor park',
+      mysterious: 'Dimly lit boudoir or artistic studio',
+      bold: 'Modern loft or urban rooftop',
+      elegant: 'Luxury hotel or classic interior',
+      confident: 'Professional studio or cityscape',
+      authentic: 'Home setting or favorite cafe',
+      sassy: 'Trendy boutique or neon-lit space',
+      professional: 'Office or co-working space'
     };
-    return (locations as any)[style] || "Comfortable indoor setting";
+    return locations[style] || 'Comfortable indoor setting';
   }
 
   private suggestTimeOfDay(style: string): string {
-    const times = {
-      playful: "Mid-morning for best natural light",
-      mysterious: "Blue hour or twilight",
-      bold: "High noon for strong shadows",
-      elegant: "Golden hour for warm tones",
-      confident: "Afternoon for even lighting",
-      authentic: "Anytime that feels natural",
-      sassy: "Night with artificial lights",
-      professional: "Morning for fresh look"
+    const times: Record<string, string> = {
+      playful: 'Mid-morning for best natural light',
+      mysterious: 'Blue hour or twilight',
+      bold: 'High noon for strong shadows',
+      elegant: 'Golden hour for warm tones',
+      confident: 'Afternoon for even lighting',
+      authentic: 'Anytime that feels natural',
+      sassy: 'Night with artificial lights',
+      professional: 'Morning for fresh look'
     };
-    return (times as any)[style] || "Golden hour (sunrise/sunset)";
+    return times[style] || 'Golden hour (sunrise/sunset)';
   }
 
   private getPlatformHashtags(platform: string): string[] {
-    const tags = {
+    const tags: Record<string, string[]> = {
       reddit: [], // Reddit doesn't use hashtags
       twitter: ['#TwitterAfterDark', '#content', '#creator'],
       instagram: ['#instadaily', '#photooftheday', '#instagood', '#instamood'],
       tiktok: ['#fyp', '#foryoupage', '#viral', '#trending'],
       onlyfans: ['#onlyfans', '#exclusivecontent', '#subscribe']
     };
-    return (tags as any)[platform] || [];
+    return tags[platform] || [];
   }
 
   private getStyleHashtags(style: string): string[] {
-    const tags = {
+    const tags: Record<string, string[]> = {
       playful: ['#playful', '#fun', '#flirty', '#cute'],
       mysterious: ['#mysterious', '#intrigue', '#shadow', '#mood'],
       bold: ['#bold', '#confident', '#fierce', '#powerful'],
       elegant: ['#elegant', '#classy', '#sophisticated', '#luxury'],
       confident: ['#confidence', '#selflove', '#empowered', '#strong'],
       authentic: ['#authentic', '#real', '#genuine', '#natural'],
       sassy: ['#sassy', '#attitude', '#fierce', '#personality'],
       professional: ['#professional', '#business', '#success', '#career']
     };
-    return (tags as any)[style] || ['#content', '#creator'];
+    return tags[style] || ['#content', '#creator'];
   }
 
   private getNicheHashtags(niche: string): string[] {
     // Generate niche-specific hashtags based on the content niche
     const nicheLower = niche.toLowerCase();
     const tags: string[] = [];
     
     if (nicheLower.includes('fitness')) {
       tags.push('#fitness', '#workout', '#fitfam', '#gym');
     }
     if (nicheLower.includes('fashion')) {
       tags.push('#fashion', '#style', '#ootd', '#fashionista');
     }
     if (nicheLower.includes('beauty')) {
       tags.push('#beauty', '#makeup', '#skincare', '#glam');
     }
     if (nicheLower.includes('travel')) {
       tags.push('#travel', '#wanderlust', '#explore', '#adventure');
     }
     if (nicheLower.includes('food')) {
       tags.push('#foodie', '#yummy', '#delicious', '#foodporn');
     }
     
     return tags;
   }
