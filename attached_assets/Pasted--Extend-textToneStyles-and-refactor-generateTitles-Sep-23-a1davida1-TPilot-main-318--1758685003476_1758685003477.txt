
Extend textToneStyles and refactor generateTitles
Sep 23
·
a1davida1/TPilot
·
main
·
+318
-19

Archive

Share

Create PR


1. In `server/advanced-content-generator.ts`, extend `textToneStyles` to include optional `titlePatterns` or `connectors` arrays so each tone defines multiple phrasing blueprints beyond the default three.
2. Refactor `generateTitles` to randomly sample different combinations of starters, themes, connectors, and emojis instead of always using `starters[0/1]` and `themes[0-2]`. Consider mixing sentence forms (statements, questions, fragments) and occasionally omitting emojis to mimic human inconsistency.
3. Add lightweight randomness for punctuation (e.g., choose between `!`, `…`, `.`) and hedge words so two runs with identical parameters still feel distinct.
4. Update or add unit tests (if present) to assert that the function returns varied results across multiple invocations with the same input.
Copy
Summary

Extended tone style definitions to include connector vocabularies and tone-specific title pattern blueprints plus fallback patterns, unlocking multiple phrasing structures per mood.

Added reusable helpers for punctuation, emoji, hedge, and shuffle randomness and rewrote generateTitles to sample starters, themes, connectors, and emojis for each pattern, ensuring varied human-like phrasing across runs.

Added unit coverage that repeatedly calls generateAdvancedContent with identical parameters and asserts the returned titles diversify across invocations.

Testing

✅ npm run lint

❌ npm test *(fails: extensive existing integration/unit suites expect external services, yielding numerous 4xx/5xx errors in this environment)*


Files (2)

server/advanced-content-generator.ts
+282
-19

tests/unit/server/advanced-content-generator.test.ts
New



Diff
Logs

server/advanced-content-generator.ts
+282
-19

@@ -35,50 +35,71 @@ export interface GeneratedContent {
    sceneSetup: string;
  };
  tags: string[];
}

export interface PresetVariation {
  titles: string[];
  content: string;
  photoInstructions: PhotoInstructions;
}

export interface PhotoConfig {
  themes: string[];
  settings: string[];
  clothing: string[];
  lighting: string;
  angles: string;
  mood: string;
}

export interface ToneStyle {
  starters: string[];
  descriptors: string[];
  endings: string[];
  emojis: string[];
  connectors?: string[];
  titlePatterns?: TitlePatternDefinition[];
}

type TitlePatternType = 'statement' | 'question' | 'fragment';

interface TitlePatternDefinition {
  template: string;
  type?: TitlePatternType;
  emojiProbability?: number;
}

interface TitlePatternContext {
  starter: string;
  theme: string;
  altTheme: string;
  connector: string;
  emoji: string;
  punctuation: string;
  hedge: string;
  photoType: string;
}

// Photo Type Specific Content Variations
const photoTypeVariations = {
  'teasing': {
    themes: ['playful tease', 'subtle hint', 'flirty suggestion', 'mysterious allure', 'coy moment'],
    settings: ['bedroom door', 'mirror selfie', 'cozy couch', 'bath time', 'morning bed'],
    clothing: ['oversized shirt', 'silk robe', 'cute lingerie peek', 'towel wrap', 'strategic coverage'],
    lighting: 'Soft intimate lighting, warm candlelight, sunset glow',
    angles: 'Teasing glimpses, over-shoulder looks, partial reveals',
    mood: 'playful and teasing'
  },
  'behind-scenes': {
    themes: ['getting ready', 'makeup process', 'outfit selection', 'photoshoot prep', 'content creation'],
    settings: ['vanity mirror', 'wardrobe area', 'makeup station', 'photo setup', 'behind camera'],
    clothing: ['robe and lingerie', 'getting dressed', 'outfit changes', 'casual prep wear'],
    lighting: 'Natural backstage lighting, mirror lights, behind-the-scenes authenticity',
    angles: 'Candid preparation shots, mirror reflections, process documentation',
    mood: 'authentic and intimate'
  },
  'outfit': {
    themes: ['outfit reveal', 'fashion show', 'style showcase', 'wardrobe tour', 'clothing haul'],
    settings: ['bedroom mirror', 'dressing room', 'closet area', 'fashion backdrop', 'outfit display'],
    clothing: ['multiple outfits', 'lingerie sets', 'dress collection', 'style variations'],
    lighting: 'Bright fashion lighting, clear visibility, flattering angles',
@@ -138,83 +159,256 @@ const photoTypeVariations = {
    settings: ['private bedroom', 'intimate sanctuary', 'luxury suite', 'artistic boudoir', 'personal space'],
    clothing: ['minimal to none', 'artistic positioning', 'strategic shadows', 'creative covering'],
    lighting: 'Dramatic contrasts, artistic shadows, professional boudoir lighting',
    angles: 'Bold artistic angles, intimate perspectives, passionate compositions',
    mood: 'intensely passionate and bold'
  },
  'all-xs': {
    themes: ['ultimate expression', 'no limits', 'complete freedom', 'artistic boundaries pushed', 'full creative expression'],
    settings: ['private studio', 'exclusive location', 'artistic sanctuary', 'personal creative space'],
    clothing: ['artistic freedom', 'creative expression', 'unlimited styling', 'boundary-free'],
    lighting: 'Professional studio lighting, artistic drama, creative illumination',
    angles: 'Unlimited creative angles, artistic freedom, boundary-pushing compositions',
    mood: 'completely uninhibited and free'
  },
  'needs_review': {
    themes: ['explicit content', 'uncensored expression', 'adult artistry', 'mature themes', 'uninhibited creativity'],
    settings: ['private space', 'adult content studio', 'mature setting', 'exclusive location'],
    clothing: ['explicit styling', 'uncensored wardrobe', 'mature fashion', 'adult themes'],
    lighting: 'Professional explicit content lighting, dramatic contrasts',
    angles: 'Explicit composition, uncensored angles, mature perspectives',
    mood: 'explicitly mature and uncensored'
  }
};

// Text Tone Variations
const textToneStyles = {
const textToneStyles: Record<ContentParameters['textTone'], ToneStyle> = {
  'confident': {
    starters: ["I know exactly", "Here's what", "Ready for", "You wanted", "Time for"],
    descriptors: ["bold", "powerful", "stunning", "magnificent", "incredible"],
    endings: ["and I deliver every time", "because quality matters", "no compromises here", "excellence is standard"],
    emojis: ["💪", "🔥", "⚡", "💎", "👑"]
    emojis: ["💪", "🔥", "⚡", "💎", "👑"],
    connectors: [
      'locking in the',
      'dialed into that',
      'focused on delivering',
      'serving up',
      'owning that',
      'delivering on this'
    ],
    titlePatterns: [
      { template: '{starter} {connector} {theme} greatness{hedge}{punct}{emoji}', type: 'statement', emojiProbability: 0.8 },
      { template: '{starter} {theme} takeover locked in{punct}{emoji}', type: 'statement', emojiProbability: 0.7 },
      { template: '{theme} energy stays undefeated{punct}{emoji}', type: 'fragment', emojiProbability: 0.5 },
      { template: 'Who else wants {theme} levels like this{punct}{emoji}', type: 'question', emojiProbability: 0.4 },
      { template: 'Just{hedge} {theme} domination{punct}{emoji}', type: 'fragment', emojiProbability: 0.6 }
    ]
  },
  'playful': {
    starters: ["Guess what", "Oops!", "Surprise!", "Hey there", "So..."],
    descriptors: ["cute", "silly", "adorable", "cheeky", "mischievous"],
    endings: ["hope you like it!", "whoops! 🙈", "couldn't resist!", "being a little naughty"],
    emojis: ["😘", "🙈", "😇", "💕", "🎀"]
    emojis: ["😘", "🙈", "😇", "💕", "🎀"],
    connectors: [
      'sneaking in some',
      'dropping off some',
      'slipping you some',
      'serving up',
      'sprinkling in',
      'sharing a bit of'
    ],
    titlePatterns: [
      { template: '{starter} {hedge} {theme} shenanigans just landed{punct}{emoji}', type: 'statement', emojiProbability: 0.85 },
      { template: '{starter} {connector} {theme} giggles{punct}{emoji}', type: 'statement', emojiProbability: 0.8 },
      { template: 'Could you handle {theme} chaos with me{punct}{emoji}', type: 'question', emojiProbability: 0.6 },
      { template: 'Just{hedge} a little {theme} tease{punct}{emoji}', type: 'fragment', emojiProbability: 0.7 },
      { template: '{theme} mood switched on{punct}{emoji}', type: 'fragment', emojiProbability: 0.5 }
    ]
  },
  'mysterious': {
    starters: ["Something happened", "In the shadows", "Late night", "Behind closed doors", "Secret moment"],
    descriptors: ["hidden", "forbidden", "mysterious", "secretive", "enigmatic"],
    endings: ["but that's all I'll say", "the rest remains hidden", "some secrets are worth keeping", "only for those who understand"],
    emojis: ["🌙", "🖤", "🕯️", "🔮", "💫"]
    emojis: ["🌙", "🖤", "🕯️", "🔮", "💫"],
    connectors: [
      'hinting at the',
      'whispering about the',
      'veiling the',
      'masking those',
      'keeping quiet about the',
      'circling around these'
    ],
    titlePatterns: [
      { template: '{starter} {connector} {theme}{punct}{emoji}', type: 'statement', emojiProbability: 0.5 },
      { template: 'Just{hedge} a glimpse of {theme}{punct}{emoji}', type: 'fragment', emojiProbability: 0.4 },
      { template: 'Could you decode these {theme} whispers{punct}{emoji}', type: 'question', emojiProbability: 0.4 },
      { template: 'Behind closed doors it\'s {theme} everything{punct}{emoji}', type: 'statement', emojiProbability: 0.6 },
      { template: 'Shadows guard my {theme} secrets{punct}{emoji}', type: 'fragment', emojiProbability: 0.5 }
    ]
  },
  'authentic': {
    starters: ["Real talk", "Being honest", "Just me", "Genuine moment", "Truth is"],
    descriptors: ["real", "honest", "genuine", "authentic", "true"],
    endings: ["just being myself", "no filters needed", "this is who I am", "raw and real"],
    emojis: ["💯", "✨", "🌸", "💗", "🌟"]
    emojis: ["💯", "✨", "🌸", "💗", "🌟"],
    connectors: [
      'sharing my',
      'opening up about the',
      'showing the',
      'documenting my',
      'living in this',
      'leaning into the'
    ],
    titlePatterns: [
      { template: '{starter} {connector} {theme} moments{punct}{emoji}', type: 'statement', emojiProbability: 0.7 },
      { template: 'Just{hedge} {theme} realness{punct}{emoji}', type: 'fragment', emojiProbability: 0.6 },
      { template: 'Anyone else feeling this {theme} energy{punct}{emoji}', type: 'question', emojiProbability: 0.5 },
      { template: 'My day was all {theme}{punct}{emoji}', type: 'statement', emojiProbability: 0.6 },
      { template: 'Letting you see the {theme} side{punct}{emoji}', type: 'fragment', emojiProbability: 0.5 }
    ]
  },
  'sassy': {
    starters: ["Listen up", "Well well", "Oh please", "You think", "Honey"],
    descriptors: ["fierce", "bold", "attitude", "confidence", "sass"],
    endings: ["deal with it", "take it or leave it", "that's how I roll", "bow down"],
    emojis: ["💅", "😏", "🔥", "👑", "💄"]
    emojis: ["💅", "😏", "🔥", "👑", "💄"],
    connectors: [
      'serving up',
      'dropping that',
      'bringing the',
      'delivering full-on',
      'throwing down the',
      'flexing that'
    ],
    titlePatterns: [
      { template: '{starter}, {connector} {theme} attitude{punct}{emoji}', type: 'statement', emojiProbability: 0.85 },
      { template: 'Just{hedge} {theme} spice because I can{punct}{emoji}', type: 'statement', emojiProbability: 0.7 },
      { template: 'Think you can handle this {theme} heat{punct}{emoji}', type: 'question', emojiProbability: 0.6 },
      { template: 'Serving {theme} looks all day{punct}{emoji}', type: 'fragment', emojiProbability: 0.8 },
      { template: '{starter} {theme} drama{punct}{emoji}', type: 'fragment', emojiProbability: 0.7 }
    ]
  }
};

const fallbackConnectors = ['with that', 'featuring a', 'serving up the', 'bringing some', 'showing off the'];

const fallbackTitlePatterns: TitlePatternDefinition[] = [
  { template: '{starter} {connector} {theme} session{punct}{emoji}', type: 'statement' },
  { template: '{starter} {theme} vibes just dropped{punct}{emoji}', type: 'statement' },
  { template: 'Today was{hedge} all about {theme}{punct}{emoji}', type: 'statement' },
  { template: 'Can you handle these {theme} moments{punct}{emoji}', type: 'question', emojiProbability: 0.5 },
  { template: 'Just {theme} energy right now{punct}{emoji}', type: 'fragment', emojiProbability: 0.6 }
];

const punctuationOptions = ['!', '…', '.'] as const;
const hedgeOptions = ['', '', '', '', 'kind of', 'sort of', 'maybe', 'almost', 'kinda', 'low-key', 'just about'] as const;

const DEFAULT_EMOJI_PROBABILITY = 0.7;
const MIN_TITLES = 3;
const MAX_TITLES = 5;
const MAX_TITLE_GENERATION_ATTEMPTS = 40;
const patternPlaceholderRegex = /\{(starterLower|starter|themeAlt|theme|connector|hedge|punct|punctuation|emoji|photoType)\}/gu;

function randomFromArray<T>(values: readonly T[]): T {
  if (values.length === 0) {
    throw new Error('Cannot select from an empty array');
  }

  return values[Math.floor(Math.random() * values.length)];
}

function pickAlternateTheme(themes: readonly string[], current: string): string {
  const alternatives = themes.filter(theme => theme !== current);
  return alternatives.length > 0 ? randomFromArray(alternatives) : current;
}

function choosePunctuation(type: TitlePatternType | undefined): string {
  if (type === 'question') {
    return '?';
  }

  if (type === 'fragment') {
    return Math.random() < 0.5 ? '' : randomFromArray(punctuationOptions);
  }

  return randomFromArray(punctuationOptions);
}

function selectEmoji(emojis: readonly string[], probability: number): string {
  if (emojis.length === 0 || Math.random() >= probability) {
    return '';
  }

  return randomFromArray(emojis);
}

function cleanGeneratedTitle(value: string): string {
  return value
    .replace(/\s+([?!….,])/gu, '$1')
    .replace(/,\s*/gu, ', ')
    .replace(/\s{2,}/gu, ' ')
    .trim();
}

function renderTitleFromPattern(pattern: TitlePatternDefinition, context: TitlePatternContext): string {
  const replacements: Record<string, string> = {
    starter: context.starter,
    starterLower: context.starter.toLowerCase(),
    theme: context.theme,
    themeAlt: context.altTheme,
    connector: context.connector,
    hedge: context.hedge ? ` ${context.hedge}` : '',
    punct: context.punctuation,
    punctuation: context.punctuation,
    emoji: context.emoji ? ` ${context.emoji}` : '',
    photoType: context.photoType
  };

  let result = pattern.template.replace(patternPlaceholderRegex, (_match: string, key: string) => replacements[key] ?? '');

  if (!pattern.template.includes('{punct}') && pattern.type !== 'fragment') {
    result += context.punctuation;
  }

  if (pattern.type === 'question' && !result.trim().endsWith('?')) {
    result = `${result.trim()}?`;
  }

  return cleanGeneratedTitle(result);
}

function shuffleArray<T>(values: T[]): T[] {
  for (let index = values.length - 1; index > 0; index -= 1) {
    const swapIndex = Math.floor(Math.random() * (index + 1));
    const temp = values[index];
    values[index] = values[swapIndex];
    values[swapIndex] = temp;
  }

  return values;
}

// Generate content based on all parameters
export function generateAdvancedContent(params: ContentParameters): GeneratedContent {
  // Check if this is a preset request and use preset variations
  const presetVariation = getRandomPresetVariation(params.style);
  if (presetVariation) {
    console.log(`🎯 Using preset variation for: ${params.style}`);
    return {
      titles: presetVariation.titles,
      content: presetVariation.content,
      photoInstructions: {
        lighting: presetVariation.photoInstructions.lighting,
        angles: presetVariation.photoInstructions.cameraAngle || "natural angles",
        composition: presetVariation.photoInstructions.composition,
        styling: presetVariation.photoInstructions.styling,
        technical: presetVariation.photoInstructions.technicalSettings || "natural lighting",
        sceneSetup: presetVariation.photoInstructions.mood || "casual setting"
      },
      tags: ['preset-content', params.style, params.platform]
    };
  }

  // Fallback to existing system for non-preset requests
  const photoConfig = photoTypeVariations[params.photoType as keyof typeof photoTypeVariations] || photoTypeVariations['casual'] as PhotoConfig;
  const toneStyle = textToneStyles[params.textTone as keyof typeof textToneStyles] || textToneStyles['authentic'] as ToneStyle;
  
@@ -1206,70 +1400,139 @@ function getRandomPresetVariation(presetId: string): PresetVariation | null {
      },
      {
        titles: ["Teaching moments, learning experiences 📚", "Academic authority, personal curriculum ✨", "When education gets experiential 🎓"],
        content: "Education is about opening minds, and sometimes the most valuable lessons happen outside the classroom - where professional knowledge meets personal experience.",
        photoInstructions: {
          lighting: "Academic lighting with educational authority",
          cameraAngle: "Educational professional angles with teaching confidence",
          composition: "Academic setting compositions with learning elements",
          styling: "Academic professional attire with teaching authority",
          mood: "Academically professional and educationally confident",
          technicalSettings: "Educational lighting with academic authority atmosphere"
        }
      }
    ]
  };
  
  const variations = presetVariations[presetId];
  if (!variations || variations.length === 0) {
    return null;
  }
  const randomIndex = Math.floor(Math.random() * variations.length);
  return variations[randomIndex];
}

function generateTitles(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string[] {
  const titles: string[] = [];
  const desiredTitleCount = Math.floor(Math.random() * (MAX_TITLES - MIN_TITLES + 1)) + MIN_TITLES;
  const themes = photoConfig.themes;
  const starters = toneStyle.starters;
  const emojis = toneStyle.emojis;
  
  // Generate 3-5 varied titles
  titles.push(`${starters[0]} what happened during my ${themes[0]} session ${emojis[0]}`);
  titles.push(`${starters[1]} ${themes[1]} content just dropped ${emojis[1]}`);
  titles.push(`${themes[2]} vibes hit different today ${emojis[2]}`);
  
  const connectorPool = (toneStyle.connectors ?? []).filter(connector => connector.trim().length > 0);
  const connectors = connectorPool.length > 0 ? connectorPool : fallbackConnectors;
  const basePatterns = toneStyle.titlePatterns && toneStyle.titlePatterns.length > 0 ? toneStyle.titlePatterns : fallbackTitlePatterns;
  const specialPatterns: TitlePatternDefinition[] = [];
  const readablePhotoType = params.photoType.replace(/-/g, ' ');

  if (params.photoType === 'all-xs') {
    titles.push(`Warning: ${themes[3] || 'exclusive'} content ahead - not for everyone ${emojis[3] || '🔞'}`);
    titles.push(`${starters[2]} the limits have been removed ${emojis[4] || '💎'}`);
    specialPatterns.push(
      { template: 'Warning: {theme} content ahead - not for everyone{punct}{emoji}', type: 'statement', emojiProbability: 0.5 },
      { template: '{starter} the limits are gone tonight{punct}{emoji}', type: 'statement', emojiProbability: 0.6 }
    );
  } else if (params.photoType === 'very-spicy') {
    titles.push(`${starters[3] || starters[0]} intense ${themes[3] || 'exclusive'} content ${emojis[3]}`);
    specialPatterns.push(
      { template: '{starter} {theme} intensity unlocked{punct}{emoji}', type: 'statement', emojiProbability: 0.7 },
      { template: 'Taking {themeAlt} right to the edge{punct}{emoji}', type: 'fragment', emojiProbability: 0.6 }
    );
  } else if (params.photoType === 'spicy') {
    titles.push(`${themes[3] || 'Spicy'} mood activated ${emojis[3]}`);
    specialPatterns.push(
      { template: '{theme} mood activated{punct}{emoji}', type: 'fragment', emojiProbability: 0.7 },
      { template: '{starter} turning the {theme} heat way up{punct}{emoji}', type: 'statement', emojiProbability: 0.6 }
    );
  }
  
  return titles.slice(0, Math.random() > 0.5 ? 3 : 4);

  const patternPool: TitlePatternDefinition[] = [
    ...basePatterns,
    ...specialPatterns,
    ...(toneStyle.titlePatterns && toneStyle.titlePatterns.length > 0 ? fallbackTitlePatterns : [])
  ];

  const generatedTitles = new Set<string>();
  let attempts = 0;

  while (generatedTitles.size < desiredTitleCount && attempts < MAX_TITLE_GENERATION_ATTEMPTS) {
    attempts += 1;

    const pattern = randomFromArray(patternPool);
    const starter = randomFromArray(starters);
    const theme = randomFromArray(themes);
    const altTheme = pickAlternateTheme(themes, theme);
    const connector = randomFromArray(connectors);
    const punctuation = choosePunctuation(pattern.type);
    const emoji = selectEmoji(emojis, pattern.emojiProbability ?? DEFAULT_EMOJI_PROBABILITY);
    const hedge = pattern.template.includes('{hedge}') ? randomFromArray(hedgeOptions) : '';

    const context: TitlePatternContext = {
      starter,
      theme,
      altTheme,
      connector,
      emoji,
      punctuation,
      hedge,
      photoType: readablePhotoType
    };

    const candidate = renderTitleFromPattern(pattern, context);

    if (candidate.length > 0) {
      generatedTitles.add(candidate);
    }
  }

  if (generatedTitles.size < MIN_TITLES) {
    while (generatedTitles.size < MIN_TITLES) {
      const fallbackStarter = randomFromArray(starters);
      const fallbackTheme = randomFromArray(themes);
      const fallbackPattern = fallbackTitlePatterns[generatedTitles.size % fallbackTitlePatterns.length];
      const fallbackContext: TitlePatternContext = {
        starter: fallbackStarter,
        theme: fallbackTheme,
        altTheme: pickAlternateTheme(themes, fallbackTheme),
        connector: randomFromArray(connectors),
        emoji: selectEmoji(emojis, DEFAULT_EMOJI_PROBABILITY),
        punctuation: choosePunctuation(fallbackPattern.type),
        hedge: fallbackPattern.template.includes('{hedge}') ? randomFromArray(hedgeOptions) : '',
        photoType: readablePhotoType
      };

      generatedTitles.add(renderTitleFromPattern(fallbackPattern, fallbackContext));
    }
  }

  const shuffledTitles = shuffleArray(Array.from(generatedTitles));

  return shuffledTitles.slice(0, desiredTitleCount);
}

function generateMainContent(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string {
  let content = "";
  const themes = photoConfig.themes;
  const settings = photoConfig.settings;
  const mood = photoConfig.mood;
  const descriptors = toneStyle.descriptors;
  const endings = toneStyle.endings;
  const emojis = toneStyle.emojis;
  
  // Opening based on tone and photo type
  if (params.textTone === 'confident') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} ${descriptors[0]} content I just created. `;
  } else if (params.textTone === 'playful') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} I had the most ${descriptors[0]} photoshoot in my ${settings[0]} today! `;
  } else if (params.textTone === 'mysterious') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} in my ${settings[0]}... `;
  } else if (params.textTone === 'sassy') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter}, your girl just dropped some ${descriptors[0]} content. `;
  } else {
tests/unit/server/advanced-content-generator.test.ts
New
+36
-0

import { describe, expect, it } from 'vitest';

import { generateAdvancedContent, type ContentParameters } from '../../../server/advanced-content-generator';

describe('generateAdvancedContent - titles', () => {
  const baseParams: ContentParameters = {
    photoType: 'casual',
    textTone: 'playful',
    style: 'custom-style',
    includePromotion: false,
    selectedHashtags: [],
    platform: 'instagram'
  };

  it('produces varied title sets across repeated runs', () => {
    const uniqueTitleGroups = new Set<string>();

    for (let index = 0; index < 12; index += 1) {
      const { titles } = generateAdvancedContent(baseParams);
      uniqueTitleGroups.add(titles.join(' | '));
    }

    expect(uniqueTitleGroups.size).toBeGreaterThan(1);
  });

  it('surfaces a broad mix of individual titles over multiple runs', () => {
    const uniqueTitles = new Set<string>();

    for (let index = 0; index < 20; index += 1) {
      const { titles } = generateAdvancedContent(baseParams);
      titles.forEach(title => uniqueTitles.add(title));
    }

    expect(uniqueTitles.size).toBeGreaterThan(5);
  });
});
