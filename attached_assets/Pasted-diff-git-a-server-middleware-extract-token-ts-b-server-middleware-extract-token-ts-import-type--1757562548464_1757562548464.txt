diff --git a/server/middleware/extract-token.ts b/server/middleware/extract-token.ts
+import type { Request } from "express";
+
+export function extractAuthToken(req: Request): string | null {
+  if (req.cookies?.authToken) return req.cookies.authToken;
+  if (req.headers.authorization?.startsWith("Bearer "))
+    return req.headers.authorization.slice(7);
+  return null;
+}
diff --git a/server/auth.ts b/server/auth.ts
@@
 import { logger } from './bootstrap/logger.js';
+import { extractAuthToken } from './middleware/extract-token';
@@
-      let token: string | null = null;
-      if (req.cookies && req.cookies.authToken) {
-        token = req.cookies.authToken;
-      } else if (req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {
-        token = req.headers.authorization.substring(7);
-      }
+      const token = extractAuthToken(req);
@@
-      console.log('üìß EMAIL VERIFICATION WORKFLOW STARTED');
-      console.log('  ‚îú‚îÄ üîë Token received:', token ? `${String(token).substring(0, 8)}...` : 'No token');
-      console.log('  ‚îú‚îÄ üåê Request origin:', req.headers.origin || 'Unknown');
-      console.log('  ‚îî‚îÄ üìÖ Timestamp:', new Date().toISOString());
+      logger.info('EMAIL VERIFICATION WORKFLOW STARTED', {
+        token: token ? `${String(token).substring(0, 8)}...` : 'none',
+        origin: req.headers.origin || 'unknown',
+        timestamp: new Date().toISOString()
+      });
@@
-        console.log('‚ùå EMAIL VERIFICATION FAILED: No token provided');
+        logger.warn('EMAIL VERIFICATION FAILED: No token provided');
@@
-      console.log('  üîç Looking up token in database...');
+      logger.debug('Looking up token in database');
@@
-        console.log('‚ùå EMAIL VERIFICATION FAILED: Token not found in database');
-        console.log('  ‚îî‚îÄ Token:', String(token).substring(0, 8), '...');
+        logger.warn('EMAIL VERIFICATION FAILED: Token not found', { token: String(token).substring(0,8) });
@@
-      console.log('  ‚úÖ Token found');
-      console.log('  ‚îú‚îÄ User ID:', verificationToken.userId);
-      console.log('  ‚îú‚îÄ Created:', 'N/A');
-      console.log('  ‚îî‚îÄ Expires:', new Date(verificationToken.expiresAt).toISOString());
+      logger.info('Token found', { userId: verificationToken.userId, expires: new Date(verificationToken.expiresAt).toISOString() });
@@
-        console.log('‚ùå EMAIL VERIFICATION FAILED: Token expired');
-        console.log('  ‚îú‚îÄ Expired at:', new Date(verificationToken.expiresAt).toISOString());
-        console.log('  ‚îî‚îÄ Current time:', new Date().toISOString());
+        logger.warn('EMAIL VERIFICATION FAILED: Token expired', { expires: new Date(verificationToken.expiresAt).toISOString(), now: new Date().toISOString() });
@@
-      console.log('  üìù Updating user email verification status...');
+      logger.debug('Updating user email verification status');
@@
-      console.log('  ‚úÖ User email marked as verified');
+      logger.info('User email marked as verified');
@@
-      console.log('  üîç Fetching user data...');
+      logger.debug('Fetching user data');
@@
-      console.log('  ‚úÖ User data retrieved');
-      console.log('  ‚îú‚îÄ Username:', user?.username || 'Unknown');
-      console.log('  ‚îî‚îÄ Email:', user?.email ? user.email.replace(/(.{2})(.*)(@.*)/, '$1***$3') : 'No email');
+      logger.info('User data retrieved', { username: user?.username || 'Unknown', email: user?.email ? user.email.replace(/(.{2})(.*)(@.*)/, '$1***$3') : 'No email' });
@@
-      console.log('  üóëÔ∏è Deleting used verification token...');
+      logger.debug('Deleting used verification token');
@@
-      console.log('  ‚úÖ Token deleted successfully');
+      logger.info('Token deleted successfully');
@@
-      console.log('‚úÖ EMAIL VERIFICATION SUCCESSFUL');
-      console.log('  ‚îú‚îÄ User:', user?.username || 'Unknown');
-      console.log('  ‚îú‚îÄ Email:', user?.email ? user.email.replace(/(.{2})(.*)(@.*)/, '$1***$3') : 'No email');
-      console.log('  ‚îî‚îÄ Redirecting to:', redirectUrl.replace(/email=[^&]*/, 'email=***'));
+      logger.info('EMAIL VERIFICATION SUCCESSFUL', {
+        user: user?.username || 'Unknown',
+        email: user?.email ? user.email.replace(/(.{2})(.*)(@.*)/, '$1***$3') : 'No email',
+        redirect: redirectUrl.replace(/email=[^&]*/, 'email=***')
+      });
@@
-      console.log('‚ùå EMAIL VERIFICATION ERROR:', error.message);
-      console.log('  ‚îú‚îÄ Stack:', error.stack?.split('\\n')[1]?.trim() || 'No stack trace');
-      console.log('  ‚îî‚îÄ Time:', new Date().toISOString());
+      logger.error('EMAIL VERIFICATION ERROR', { error: (error as Error).message, stack: (error as Error).stack, time: new Date().toISOString() });
diff --git a/server/services/analytics-service.ts b/server/services/analytics-service.ts
@@
-export interface AnalyticsEvent {
-  userId: string;
-  event: string;
-  properties: Record<string, any>;
-  timestamp: Date;
-  sessionId: string;
-  deviceInfo: {
-    browser: string;
-    os: string;
-    device: string;
-  };
-}
+export interface AnalyticsEvent<T extends Record<string, unknown> = Record<string, unknown>> {
+  userId: string;
+  event: string;
+  properties: T;
+  timestamp: Date;
+  sessionId: string;
+  deviceInfo: {
+    browser: string;
+    os: string;
+    device: string;
+  };
+}
@@
-  async trackFeatureUsage(userId: string, feature: string, metadata?: unknown) {
-    await this.trackEvent(userId, 'feature_used', {
-      feature,
-      ...metadata,
-      timestamp: new Date().toISOString()
-    });
-  }
+  async trackFeatureUsage<T extends Record<string, unknown>>(userId: string, feature: string, metadata?: T) {
+    await this.trackEvent<T>(userId, 'feature_used', {
+      feature,
+      ...(metadata || {}),
+      timestamp: new Date().toISOString()
+    });
+  }
@@
-  private async trackEvent(userId: string, event: string, properties: Record<string, any>) {
+  private async trackEvent<T extends Record<string, unknown>>(userId: string, event: string, properties: T) {
diff --git a/client/src/pages/admin.tsx b/client/src/pages/admin.tsx
@@
-const [stats, setStats] = useState(null);
+interface AdminStats {
+  newUsersToday: number;
+  trialUsers: number;
+  freeUsers: number;
+  proUsers: number;
+  premiumUsers: number;
+  jwtConfigured: boolean;
+  emailConfigured: boolean;
+  contentGenerated: number;
+  revenue?: number;
+}
+const [stats, setStats] = useState<AdminStats | null>(null);
@@
-                      <p className="text-2xl font-bold text-blue-400">{(stats as any)?.newUsersToday || 0}</p>
+                      <p className="text-2xl font-bold text-blue-400">{stats?.newUsersToday ?? 0}</p>
@@
-                      <p className="text-2xl font-bold text-purple-400">{(stats as any)?.trialUsers || 0}</p>
+                      <p className="text-2xl font-bold text-purple-400">{stats?.trialUsers ?? 0}</p>
@@
-                      <span className="text-gray-900">{(stats as any)?.freeUsers || 0}</span>
+                      <span className="text-gray-900">{stats?.freeUsers ?? 0}</span>
@@
-                      <span className="text-green-400">{(stats as any)?.proUsers || 0}</span>
+                      <span className="text-green-400">{stats?.proUsers ?? 0}</span>
@@
-                      <span className="text-purple-400">{(stats as any)?.premiumUsers || 0}</span>
+                      <span className="text-purple-400">{stats?.premiumUsers ?? 0}</span>
@@
-                      <div className={`w-3 h-3 rounded-full ${(stats as any)?.jwtConfigured ? 'bg-green-500' : 'bg-red-500'}`} />
-                    <Badge variant={(stats as any)?.jwtConfigured ? 'default' : 'destructive'}>
-                      {(stats as any)?.jwtConfigured ? 'Active' : 'Inactive'}
+                      <div className={`w-3 h-3 rounded-full ${stats?.jwtConfigured ? 'bg-green-500' : 'bg-red-500'}`} />
+                    <Badge variant={stats?.jwtConfigured ? 'default' : 'destructive'}>
+                      {stats?.jwtConfigured ? 'Active' : 'Inactive'}
@@
-                      <div className={`w-3 h-3 rounded-full ${(stats as any)?.emailConfigured ? 'bg-green-500' : 'bg-yellow-500'}`} />
-                    <Badge variant={(stats as any)?.emailConfigured ? 'default' : 'secondary'}>
-                      {(stats as any)?.emailConfigured ? 'Configured' : 'Not Set'}
+                      <div className={`w-3 h-3 rounded-full ${stats?.emailConfigured ? 'bg-green-500' : 'bg-yellow-500'}`} />
+                    <Badge variant={stats?.emailConfigured ? 'default' : 'secondary'}>
+                      {stats?.emailConfigured ? 'Configured' : 'Not Set'}
@@
-                    <p className="text-3xl font-bold text-gray-900">{(stats as any)?.contentGenerated || 0}</p>
+                    <p className="text-3xl font-bold text-gray-900">{stats?.contentGenerated ?? 0}</p>
@@
-                <p className="text-3xl font-bold">${(stats as any)?.revenue || '0'}</p>
+                <p className="text-3xl font-bold">${stats?.revenue ?? '0'}</p>
@@
-                    <span>{(stats as any)?.freeUsers || 0}</span>
+                    <span>{stats?.freeUsers ?? 0}</span>
@@
-                    <span className="text-green-400">{(stats as any)?.proUsers || 0}</span>
+                    <span className="text-green-400">{stats?.proUsers ?? 0}</span>
@@
-                    <span className="text-purple-400">{(stats as any)?.premiumUsers || 0}</span>
+                    <span className="text-purple-400">{stats?.premiumUsers ?? 0}</span>
@@
-                      <span className="text-green-400">${((stats as any)?.proUsers || 0) * 20 + ((stats as any)?.premiumUsers || 0) * 50}</span>
+                      <span className="text-green-400">${(stats?.proUsers ?? 0) * 20 + (stats?.premiumUsers ?? 0) * 50}</span>
@@
-                <p className="text-3xl font-bold">${Math.floor(((stats as any)?.contentGenerated || 0) * 0.02) || '0'}</p>
+                <p className="text-3xl font-bold">${Math.floor((stats?.contentGenerated ?? 0) * 0.02) || '0'}</p>
@@
-                    <span className="text-gray-900">{(stats as any)?.contentGenerated || 0}</span>
+                    <span className="text-gray-900">{stats?.contentGenerated ?? 0}</span>
diff --git a/server/middleware/security.ts b/server/middleware/security.ts
@@
-        scriptSrc: [
-          "'self'",
-          "'unsafe-inline'",
-          process.env.NODE_ENV === 'development' ? "'unsafe-eval'" : "",
-          "https://js.stripe.com",
-          "https://checkout.stripe.com",
-          "https://apis.google.com"
-        ].filter(Boolean),
-        styleSrc: [
-          "'self'",
-          "'unsafe-inline'",
-          "https://fonts.googleapis.com",
-          "https://checkout.stripe.com"
-        ],
+        scriptSrc: [
+          "'self'",
+          process.env.NODE_ENV === 'development' ? "'unsafe-eval'" : "",
+          "https://js.stripe.com",
+          "https://checkout.stripe.com",
+          "https://apis.google.com"
+        ].filter(Boolean),
+        styleSrc: [
+          "'self'",
+          "https://fonts.googleapis.com",
+          "https://checkout.stripe.com"
+        ],
diff --git a/server/lib/billing/stripe.ts b/server/lib/billing/stripe.ts
@@
-export const stripe = new Stripe(secret, {
-  apiVersion: "2025-08-27.basil",
-});
+export const STRIPE_API_VERSION = "2023-10-16";
+export const stripe = new Stripe(secret, {
+  apiVersion: STRIPE_API_VERSION,
+});
diff --git a/server/routes.ts b/server/routes.ts
@@
-const stripe = STRIPE_SECRET_KEY ? new Stripe(STRIPE_SECRET_KEY, {
-  apiVersion: '2025-08-27.basil',
-}) : null;
+const STRIPE_API_VERSION = "2023-10-16";
+const stripe = STRIPE_SECRET_KEY ? new Stripe(STRIPE_SECRET_KEY, {
+  apiVersion: STRIPE_API_VERSION,
+}) : null;
diff --git a/server/routes/upload.ts b/server/routes/upload.ts
@@
-import { imageStreamingUpload, cleanupUploadedFiles } from '../middleware/streaming-upload.js';
+import { imageStreamingUpload, cleanupUploadedFiles } from '../middleware/streaming-upload.js';
+import { NodeClam } from 'clamscan';
@@
 const router = express.Router();
+const clamscan = await new NodeClam().init().catch(() => null);
@@
-    // Basic malware check
-    const fileBuffer = await fs.readFile(tempFilePath);
-    if (performBasicMalwareCheck(fileBuffer)) {
+    if (clamscan) {
+      const { isInfected } = await clamscan.isInfected(tempFilePath);
+      if (isInfected) {
         await fs.unlink(tempFilePath);
-      logger.warn('Malware detected in streaming upload', {
-        userId: req.user.id,
-        originalName: uploadedFile.originalname,
-        detectedType: fileValidation.detectedType
-      });
-      return res.status(400).json({ message: 'File failed security check' });
-    }
+        logger.warn('Malware detected in streaming upload', {
+          userId: req.user.id,
+          originalName: uploadedFile.originalname,
+          detectedType: fileValidation.detectedType
+        });
+        return res.status(400).json({ message: 'File failed security check' });
+      }
+    }
@@
-    const fileValidation = await validateImageFile(tempFilePath, req.file.mimetype);
-    if (!fileValidation.isValid) {
+    const fileValidation = await validateImageFile(tempFilePath, req.file.mimetype);
+    if (!fileValidation.isValid) {
       await fs.unlink(tempFilePath);
@@
-    // Basic malware check
-    const fileBuffer = await fs.readFile(tempFilePath);
-    if (performBasicMalwareCheck(fileBuffer)) {
+    if (clamscan) {
+      const { isInfected } = await clamscan.isInfected(tempFilePath);
+      if (isInfected) {
         await fs.unlink(tempFilePath);
-      logger.warn('Malware detected in upload', {
-        userId: req.user.id,
-        originalName: req.file.originalname,
-        detectedType: fileValidation.detectedType
-      });
-      return res.status(400).json({ message: 'File failed security check' });
-    }
+        logger.warn('Malware detected in upload', {
+          userId: req.user.id,
+          originalName: req.file.originalname,
+          detectedType: fileValidation.detectedType
+        });
+        return res.status(400).json({ message: 'File failed security check' });
+      }
+    }
