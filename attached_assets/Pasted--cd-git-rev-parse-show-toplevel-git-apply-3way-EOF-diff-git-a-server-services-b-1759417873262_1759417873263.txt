 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/services/basic-metrics.ts b/server/services/basic-metrics.ts
index 27363efeb87469c3cc4fd42f5d5adb6a2217b47f..3bba51f0ec2d92dfac9b9f53cb2b529c4374a3d0 100644
--- a/server/services/basic-metrics.ts
+++ b/server/services/basic-metrics.ts
@@ -1,35 +1,50 @@
 // Basic in-memory metrics - can be extended to database later
-class BasicAuthMetrics {
+export class BasicAuthMetrics {
   private events: Array<{
     action: string;
     success: boolean;
     duration: number;
     error: string | null;
     timestamp: string;
   }> = [];
   private maxEvents = 1000; // Keep last 1000 events in memory
+  private readonly maxErrorKeyLength = 120;
+
+  private normalizeErrorKey(error: string): string | null {
+    const normalizedWhitespace = error.replace(/\s+/g, ' ').trim();
+
+    if (!normalizedWhitespace) {
+      return null;
+    }
+
+    if (normalizedWhitespace.length <= this.maxErrorKeyLength) {
+      return normalizedWhitespace;
+    }
+
+    return normalizedWhitespace.slice(0, this.maxErrorKeyLength);
+  }
   
   track(action: string, success: boolean, duration: number, error: string | null = null) {
     const event = {
       action,
       success,
       duration,
       error,
       timestamp: new Date().toISOString()
     };
     
     this.events.push(event);
     if (this.events.length > this.maxEvents) {
       this.events.shift();
     }
     
     // Log failures for monitoring
     if (!success) {
       console.error(`⚠️ Auth failure: ${action} - ${error}`);
     }
   }
   
   getSummary(hours = 24) {
     const since = new Date(Date.now() - hours * 60 * 60 * 1000);
     const recent = this.events.filter(e => new Date(e.timestamp) > since);
     
diff --git a/server/services/basic-metrics.ts b/server/services/basic-metrics.ts
index 27363efeb87469c3cc4fd42f5d5adb6a2217b47f..3bba51f0ec2d92dfac9b9f53cb2b529c4374a3d0 100644
--- a/server/services/basic-metrics.ts
+++ b/server/services/basic-metrics.ts
@@ -40,38 +55,43 @@ class BasicAuthMetrics {
       averageDuration: number;
       byAction: { [key: string]: { success: number; failed: number } };
       topErrors: { [key: string]: number };
     } = {
       total: recent.length,
       successful: recent.filter(e => e.success).length,
       failed: recent.filter(e => !e.success).length,
       averageDuration: recent.reduce((sum, e) => sum + e.duration, 0) / recent.length || 0,
       byAction: {},
       topErrors: {}
     };
     
     // Group by action
     recent.forEach(e => {
       if (!summary.byAction[e.action]) {
         summary.byAction[e.action] = { success: 0, failed: 0 };
       }
       if (e.success) {
         summary.byAction[e.action].success++;
       } else {
         summary.byAction[e.action].failed++;
       }
     });
     
     // Count errors
-    recent.filter(e => e.error).forEach(e => {
-      summary.topErrors[e.error!] = (summary.topErrors[e.error!] || 0) + 1;
+    recent.forEach(e => {
+      const errorKey = e.error ? this.normalizeErrorKey(e.error) : null;
+      if (!errorKey) {
+        return;
+      }
+
+      summary.topErrors[errorKey] = (summary.topErrors[errorKey] || 0) + 1;
     });
-    
+
     return summary;
   }
   
   getRecentEvents(limit = 50) {
     return this.events.slice(-limit).reverse();
   }
 }
 
 export const authMetrics = new BasicAuthMetrics();
 
EOF
)