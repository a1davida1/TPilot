Complete Reddit Image Upload Enhancement - One Shot Fix
Update Reddit Integration to Support Image/Gallery Posts
1. UPDATE server/lib/reddit.ts - Add image upload methods to RedditManager class
Find the submitPost method in the RedditManager class and ADD these new methods right after it:
typescript/**
 * Submit image post with direct upload to Reddit
 */
async submitImagePost(options: {
  subreddit: string;
  title: string;
  imageUrl?: string;
  imageBuffer?: Buffer;
  imagePath?: string;
  nsfw?: boolean;
  spoiler?: boolean;
}): Promise<RedditPostResult> {
  try {
    const reddit = await this.initReddit();
    
    // If we have a URL, download it to buffer
    if (options.imageUrl && !options.imageBuffer) {
      const response = await fetch(options.imageUrl);
      const arrayBuffer = await response.arrayBuffer();
      options.imageBuffer = Buffer.from(arrayBuffer);
    }

    // Direct image upload to Reddit
    if (options.imageBuffer || options.imagePath) {
      console.log('Uploading image directly to Reddit (i.redd.it)...');
      
      const subreddit = reddit.getSubreddit(options.subreddit);
      
      try {
        // Try direct image upload first
        const submission = await subreddit.submitImage({
          title: options.title,
          imageFile: options.imageBuffer || options.imagePath,
          nsfw: options.nsfw || false,
          spoiler: options.spoiler || false,
          sendReplies: true,
        });

        return {
          success: true,
          postId: submission.name || submission.id,
          url: `https://www.reddit.com${submission.permalink}`,
        };
      } catch (imgError: any) {
        console.error('Direct image upload failed, falling back to link post:', imgError.message);
        // Fallback to link post if image upload fails
        if (options.imageUrl) {
          return this.submitPost({
            subreddit: options.subreddit,
            title: options.title,
            url: options.imageUrl,
            nsfw: options.nsfw,
            spoiler: options.spoiler
          });
        }
        throw imgError;
      }
    }

    // No image provided
    return {
      success: false,
      error: 'No image provided for upload'
    };

  } catch (error: any) {
    console.error('Image submission failed:', error);
    return {
      success: false,
      error: error.message || 'Failed to upload image'
    };
  }
}

/**
 * Submit gallery post with multiple images
 */
async submitGalleryPost(options: {
  subreddit: string;
  title: string;
  images: Array<{
    url?: string;
    buffer?: Buffer;
    caption?: string;
  }>;
  nsfw?: boolean;
}): Promise<RedditPostResult> {
  try {
    const reddit = await this.initReddit();
    const subreddit = reddit.getSubreddit(options.subreddit);
    
    // Prepare images for gallery
    const galleryImages = await Promise.all(
      options.images.slice(0, 20).map(async (img) => { // Max 20 images
        let imageBuffer = img.buffer;
        
        if (!imageBuffer && img.url) {
          const response = await fetch(img.url);
          const arrayBuffer = await response.arrayBuffer();
          imageBuffer = Buffer.from(arrayBuffer);
        }
        
        return {
          imageFile: imageBuffer,
          caption: img.caption || ''
        };
      })
    );

    // Submit gallery
    const submission = await subreddit.submitGallery({
      title: options.title,
      images: galleryImages,
      nsfw: options.nsfw || false,
      sendReplies: true
    });

    return {
      success: true,
      postId: submission.name || submission.id,
      url: `https://www.reddit.com${submission.permalink}`
    };

  } catch (error: any) {
    // Not all subreddits support galleries
    if (error.message?.includes('INVALID_OPTION') || error.message?.includes('gallery')) {
      console.log('Gallery not supported, falling back to single image');
      return this.submitImagePost({
        subreddit: options.subreddit,
        title: options.title,
        imageBuffer: options.images[0]?.buffer,
        imageUrl: options.images[0]?.url,
        nsfw: options.nsfw
      });
    }
    
    return {
      success: false,
      error: error.message || 'Failed to submit gallery'
    };
  }
}

/**
 * Check if subreddit allows image posts
 */
async checkSubredditCapabilities(subredditName: string): Promise<{
  allowsImages: boolean;
  allowsGalleries: boolean;
  allowsVideos: boolean;
  isNsfw: boolean;
}> {
  try {
    const reddit = await this.initReddit();
    const subreddit = await reddit.getSubreddit(subredditName).fetch();
    
    return {
      allowsImages: subreddit.allow_images !== false,
      allowsGalleries: subreddit.allow_galleries === true,
      allowsVideos: subreddit.allow_videos !== false,
      isNsfw: subreddit.over18 || false
    };
  } catch (error) {
    console.error('Failed to check subreddit capabilities:', error);
    return {
      allowsImages: true,
      allowsGalleries: false,
      allowsVideos: false,
      isNsfw: false
    };
  }
}
2. UPDATE server/reddit-routes.ts - Replace the submit endpoint
Find the /api/reddit/submit endpoint and REPLACE it entirely with this enhanced version:
typescript// Enhanced submit endpoint with image support
app.post('/api/reddit/submit', authenticateToken, async (req: any, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: 'Authentication required' });
    }
    
    const { subreddit, title, body, url, nsfw, spoiler, postType, imageData } = req.body;

    if (!subreddit || !title) {
      return res.status(400).json({ error: 'Subreddit and title are required' });
    }

    // Get Reddit manager
    const reddit = await RedditManager.forUser(userId);
    if (!reddit) {
      return res.status(404).json({ 
        error: 'No active Reddit account found. Please connect your Reddit account first.' 
      });
    }

    let result;
    
    // Handle different post types
    switch (postType || 'text') {
      case 'image':
        // Single image post
        if (!imageData && !url) {
          return res.status(400).json({ error: 'Image data or URL required for image post' });
        }
        
        let imageBuffer;
        if (imageData) {
          // Convert base64 to buffer if needed
          const base64Data = imageData.replace(/^data:image\/\w+;base64,/, '');
          imageBuffer = Buffer.from(base64Data, 'base64');
        }
        
        result = await reddit.submitImagePost({
          subreddit,
          title,
          imageBuffer,
          imageUrl: url,
          nsfw: nsfw || false,
          spoiler: spoiler || false
        });
        break;
        
      case 'gallery':
        // Multiple images
        if (!req.body.images || !Array.isArray(req.body.images)) {
          return res.status(400).json({ error: 'Images array required for gallery post' });
        }
        
        const images = req.body.images.map((img: any) => ({
          url: img.url,
          caption: img.caption || ''
        }));
        
        result = await reddit.submitGalleryPost({
          subreddit,
          title,
          images,
          nsfw: nsfw || false
        });
        break;
        
      case 'link':
        // Link post
        if (!url) {
          return res.status(400).json({ error: 'URL required for link post' });
        }
        
        result = await reddit.submitPost({
          subreddit,
          title,
          url,
          nsfw: nsfw || false,
          spoiler: spoiler || false
        });
        break;
        
      case 'text':
      default:
        // Text post
        result = await reddit.submitPost({
          subreddit,
          title,
          body: body || '',
          nsfw: nsfw || false,
          spoiler: spoiler || false
        });
        break;
    }

    if (result.success) {
      console.log('Reddit post successful:', {
        userId,
        subreddit,
        postType,
        url: result.url
      });
      
      res.json({
        success: true,
        postId: result.postId,
        url: result.url,
        message: `Post submitted successfully to r/${subreddit}`
      });
    } else {
      res.status(400).json({
        success: false,
        error: result.error || 'Failed to submit post'
      });
    }

  } catch (error: any) {
    console.error('Reddit submit error:', error);
    res.status(500).json({ 
      error: error.message || 'Failed to submit post to Reddit' 
    });
  }
});

// Add new endpoint to check subreddit capabilities
app.get('/api/reddit/subreddit/:name/capabilities', authenticateToken, async (req: any, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: 'Authentication required' });
    }
    
    const reddit = await RedditManager.forUser(userId);
    if (!reddit) {
      return res.status(404).json({ error: 'No Reddit account connected' });
    }
    
    const capabilities = await reddit.checkSubredditCapabilities(req.params.name);
    res.json(capabilities);
    
  } catch (error) {
    console.error('Error checking subreddit:', error);
    res.status(500).json({ error: 'Failed to check subreddit' });
  }
});
3. UPDATE client/src/pages/reddit-posting.tsx - Add image upload UI
Find the post type selection section and REPLACE it with this enhanced version:
typescript// Replace the existing post type selection and content input section with:

const [postType, setPostType] = useState<'text' | 'link' | 'image' | 'gallery'>('image');
const [imageFile, setImageFile] = useState<File | null>(null);
const [imagePreview, setImagePreview] = useState<string>('');
const [galleryFiles, setGalleryFiles] = useState<File[]>([]);

// Add image handling functions
const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
  const file = e.target.files?.[0];
  if (file) {
    setImageFile(file);
    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result as string);
    };
    reader.readAsDataURL(file);
  }
};

const handleGallerySelect = (e: React.ChangeEvent<HTMLInputElement>) => {
  const files = Array.from(e.target.files || []).slice(0, 20); // Max 20 images
  setGalleryFiles(files);
};

// Update the submit handler
const handleSubmitPost = async () => {
  if (!subreddit || !title) {
    toast({
      title: "⚠️ Missing Required Fields",
      description: "Please enter subreddit and title",
      variant: "destructive"
    });
    return;
  }

  let postData: any = {
    subreddit,
    title,
    nsfw,
    spoiler,
    postType
  };

  // Handle different post types
  if (postType === 'image' && imageFile) {
    const reader = new FileReader();
    reader.onloadend = async () => {
      postData.imageData = reader.result;
      submitPost(postData);
    };
    reader.readAsDataURL(imageFile);
  } else if (postType === 'gallery' && galleryFiles.length > 0) {
    // For gallery, we'll send URLs or process files
    const images = await Promise.all(
      galleryFiles.map(async (file) => {
        return new Promise((resolve) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            resolve({
              data: reader.result,
              caption: file.name
            });
          };
          reader.readAsDataURL(file);
        });
      })
    );
    postData.images = images;
    submitPost(postData);
  } else if (postType === 'link') {
    postData.url = url;
    submitPost(postData);
  } else {
    postData.body = body;
    submitPost(postData);
  }
};

// Replace the existing Post Type Selection with:
<div className="flex gap-2">
  <Button
    variant={postType === 'text' ? 'default' : 'outline'}
    onClick={() => setPostType('text')}
    className="flex-1"
    size="sm"
  >
    <FileText className="h-4 w-4 mr-1" />
    Text
  </Button>
  <Button
    variant={postType === 'image' ? 'default' : 'outline'}
    onClick={() => setPostType('image')}
    className="flex-1"
    size="sm"
  >
    <ImageIcon className="h-4 w-4 mr-1" />
    Image
  </Button>
  <Button
    variant={postType === 'gallery' ? 'default' : 'outline'}
    onClick={() => setPostType('gallery')}
    className="flex-1"
    size="sm"
  >
    <Images className="h-4 w-4 mr-1" />
    Gallery
  </Button>
  <Button
    variant={postType === 'link' ? 'default' : 'outline'}
    onClick={() => setPostType('link')}
    className="flex-1"
    size="sm"
  >
    <LinkIcon className="h-4 w-4 mr-1" />
    Link
  </Button>
</div>

// Replace the Content Input section with:
{postType === 'text' ? (
  <div className="space-y-2">
    <Label htmlFor="body">Content (Optional)</Label>
    <Textarea
      id="body"
      value={body}
      onChange={(e) => setBody(e.target.value)}
      placeholder="Write your post content..."
      rows={6}
      maxLength={10000}
    />
    <div className="text-xs text-gray-500 text-right">{body.length}/10,000</div>
  </div>
) : postType === 'image' ? (
  <div className="space-y-2">
    <Label htmlFor="image">Upload Image</Label>
    <Input
      id="image"
      type="file"
      accept="image/jpeg,image/jpg,image/png,image/gif"
      onChange={handleImageSelect}
    />
    {imagePreview && (
      <div className="mt-2">
        <img 
          src={imagePreview} 
          alt="Preview" 
          className="max-h-64 rounded-lg border"
        />
      </div>
    )}
    <p className="text-sm text-gray-600">
      ✅ Image will be hosted on Reddit (i.redd.it) - preferred by most subreddits
    </p>
  </div>
) : postType === 'gallery' ? (
  <div className="space-y-2">
    <Label htmlFor="gallery">Upload Images (Max 20)</Label>
    <Input
      id="gallery"
      type="file"
      accept="image/jpeg,image/jpg,image/png"
      multiple
      onChange={handleGallerySelect}
    />
    {galleryFiles.length > 0 && (
      <div className="grid grid-cols-4 gap-2 mt-2">
        {galleryFiles.slice(0, 8).map((file, idx) => (
          <div key={idx} className="relative">
            <img 
              src={URL.createObjectURL(file)} 
              alt={`Gallery ${idx + 1}`} 
              className="w-full h-20 object-cover rounded"
            />
          </div>
        ))}
        {galleryFiles.length > 8 && (
          <div className="flex items-center justify-center bg-gray-100 rounded">
            <span className="text-sm text-gray-600">+{galleryFiles.length - 8} more</span>
          </div>
        )}
      </div>
    )}
    <p className="text-sm text-gray-600">
      {galleryFiles.length} images selected • Gallery posts get more engagement!
    </p>
  </div>
) : (
  <div className="space-y-2">
    <Label htmlFor="url">URL</Label>
    <Input
      id="url"
      value={url}
      onChange={(e) => setUrl(e.target.value)}
      placeholder="https://example.com"
      type="url"
    />
    <p className="text-sm text-yellow-600">
      ⚠️ Many NSFW subreddits ban external links - use image upload instead
    </p>
  </div>
)}
4. Add missing imports at the top of reddit-posting.tsx:
typescriptimport { ImageIcon, Images } from 'lucide-react';
5. Add this note about rate limiting in the UI:
typescript// Add this Alert component after the action buttons:
<Alert className="border-orange-200 bg-orange-50">
  <AlertTriangle className="h-4 w-4" />
  <AlertDescription>
    <strong>Reddit Rate Limits:</strong><br/>
    • Wait 10-15 minutes between posts to avoid shadowban<br/>
    • New accounts: 1 post every 10 minutes<br/>
    • Single subreddit posting is recommended<br/>
    • Different titles for each subreddit
  </AlertDescription>
</Alert>