 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/tests/unit/image-generator/enhanced-ai-service.test.ts b/tests/unit/image-generator/enhanced-ai-service.test.ts
index f70ebe313a1165f4a74af306f53f32bcd63bbcf2..d301f6732804d72f1724e98b582b8a0a4853689c 100644
--- a/tests/unit/image-generator/enhanced-ai-service.test.ts
+++ b/tests/unit/image-generator/enhanced-ai-service.test.ts
@@ -105,55 +105,78 @@ describe('Enhanced AI Service - Failure Scenarios', () => {
       };
 
       vi.mocked(generateWithMultiProvider).mockRejectedValue(
         new Error('Quota exceeded for current billing period')
       );
 
       const result = await service.generate(request);
       
       // Should return template fallback
       expect(result).toBeDefined();
       expect(['gemini-flash', 'templates', 'template-fallback', 'fallback']).toContain(result.metadata?.provider);
     });
 
     test('should handle network timeout errors', async () => {
       const request = {
         mode: 'text' as const,
         platform: 'reddit' as const,
         style: 'bold' as const,
       };
 
       vi.mocked(generateWithMultiProvider).mockRejectedValue(
         new Error('Network timeout after 30s')
       );
 
       const result = await service.generate(request);
-      
+
       expect(result).toBeDefined();
       expect(result.titles.length).toBeGreaterThan(0);
     });
 
+    test('template fallback should reflect request-specific context', async () => {
+      const request = {
+        mode: 'text' as const,
+        platform: 'reddit' as const,
+        style: 'playful' as const,
+        theme: 'Wellness',
+        prompt: 'Share a calming morning wellness routine update',
+        customInstructions: 'Highlight mindfulness and gentle self-care wins',
+        targetAudience: 'potential-subscribers' as const,
+      };
+
+      vi.mocked(generateWithMultiProvider).mockRejectedValue(
+        new Error('Template fallback engaged')
+      );
+
+      const result = await service.generate(request);
+
+      expect(result.content).toContain('Wellness');
+      expect(result.content).toContain('Highlight mindfulness');
+      expect(result.content).toContain('calming morning wellness routine');
+      expect(result.titles.some(title => title.includes('Wellness'))).toBe(true);
+    });
+
     test('should handle malformed JSON responses', async () => {
       const request = {
         mode: 'text' as const,
         platform: 'reddit' as const,
         style: 'elegant' as const,
       };
 
       vi.mocked(generateWithMultiProvider).mockRejectedValue(
         new Error('Invalid JSON in AI response')
       );
 
       const result = await service.generate(request);
       
       expect(result).toBeDefined();
       expect(result.content).toBeTruthy();
     });
   });
 
   describe('Success Path Validation', () => {
     test('should handle successful AI generation', async () => {
       const request = {
         mode: 'text' as const,
         platform: 'reddit' as const,
         style: 'sassy' as const,
       };
 
EOF
)