 can see the email verification routes exist but the frontend isn't handling the success properly. Here's the fix:
Complete Email Verification Fix
1. UPDATE client/src/components/auth-modal.tsx - Add URL param handling
Add this useEffect at the top of the AuthModal component (after the state declarations):
typescriptimport { useSearchParams } from 'react-router-dom';

// Inside AuthModal component, add:
const [searchParams] = useSearchParams();

// Add this useEffect to handle verification success
useEffect(() => {
  const verified = searchParams.get('verified');
  const verificationError = searchParams.get('error');
  const verifiedEmail = searchParams.get('email');
  
  if (verified === 'true' && isOpen) {
    toast({
      title: "✅ Email Verified!",
      description: `Your email ${verifiedEmail || ''} has been verified. You can now login.`,
      duration: 5000,
    });
    // Clear URL params
    window.history.replaceState({}, '', window.location.pathname);
  }
  
  if (verificationError && isOpen) {
    const errorMessages: Record<string, string> = {
      'missing_token': 'Verification link is invalid. Please request a new one.',
      'invalid_token': 'Verification link has expired. Please request a new one.',
      'invalid_token_type': 'Invalid verification link. Please request a new one.',
      'user_not_found': 'Account not found. Please sign up first.',
      'verification_failed': 'Verification failed. Please try again or contact support.'
    };
    
    toast({
      title: "❌ Verification Failed",
      description: errorMessages[verificationError] || 'Verification failed. Please try again.',
      variant: "destructive",
      duration: 5000,
    });
    // Clear URL params
    window.history.replaceState({}, '', window.location.pathname);
  }
}, [searchParams, isOpen, toast]);
2. CHECK server/storage.ts has these methods
Make sure your storage.ts has these methods (add them if missing):
typescriptasync updateUserEmailVerified(email: string, verified: boolean) {
  const user = await this.db.user.update({
    where: { email },
    data: { emailVerified: verified }
  });
  return user;
},

async updateUserPassword(emailOrId: string | number, hashedPassword: string) {
  if (typeof emailOrId === 'string') {
    return await this.db.user.update({
      where: { email: emailOrId },
      data: { password: hashedPassword }
    });
  } else {
    return await this.db.user.update({
      where: { id: emailOrId },
      data: { password: hashedPassword }
    });
  }
}