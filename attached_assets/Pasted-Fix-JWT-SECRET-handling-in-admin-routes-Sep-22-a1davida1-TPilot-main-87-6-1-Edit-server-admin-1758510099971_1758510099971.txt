Fix JWT_SECRET handling in admin routes
Sep 22 · a1davida1/TPilot · main
+87-6
1. Edit `server/admin-routes.ts` so that loading the module no longer throws when `process.env.JWT_SECRET` is undefined—e.g., resolve the secret lazily inside the `requireAdmin` middleware and provide a deterministic fallback when `NODE_ENV === 'test'`.
2. Make the middleware return an HTTP error (rather than throwing) when the secret is still missing in non-test environments, preserving production safeguards while letting the express app initialise for test doubles.
3. Add or update a unit test around `setupAdminRoutes` to assert that importing it without `JWT_SECRET` no longer crashes yet still rejects requests when the secret is absent in production mode.
4. Run `npm test` to verify the admin route suite and the broader test run execute end-to-end.

Summary

    Added lazy JWT secret resolution with a deterministic test fallback in the admin middleware so the module loads even when JWT_SECRET is absent, while still short-circuiting requests in non-test environments when the secret is missing.

Introduced a dedicated Vitest suite that confirms setupAdminRoutes initialises without JWT_SECRET in test mode and returns a 500 error when the secret is absent under production settings.

Testing

    ✅ npm run lint

❌ npm test *(fails because many existing suites depend on external services, queue infrastructure, and missing environment secrets; admin route tests executed within the run)*

✅ npx vitest run tests/unit/admin-routes.setup.test.ts


server/admin-routes.ts
+22-6
import { Express } from 'express';
import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';
import { storage } from './storage';
import { emailService } from './services/email-service';
import { type User } from '@shared/schema';

const JWT_SECRET = process.env.JWT_SECRET;
if (!JWT_SECRET) {
  throw new Error('JWT_SECRET environment variable is required for secure token operations');
const JWT_SECRET_TEST_FALLBACK = 'test-jwt-secret';
const MISSING_JWT_SECRET_MESSAGE = 'JWT secret not configured';

function resolveJwtSecret(): string | undefined {
  const envSecret = process.env.JWT_SECRET;

  if (typeof envSecret === 'string' && envSecret.length > 0) {
    return envSecret;
  }

  if (process.env.NODE_ENV === 'test') {
    return JWT_SECRET_TEST_FALLBACK;
  }

  return undefined;
}
// Type assertion after validation
const JWT_SECRET_VALIDATED: string = JWT_SECRET;

interface AdminRequest extends express.Request {
  user?: User;
}

function ensureAdminId(req: AdminRequest, res: express.Response): number | undefined {
  const adminId = req.user?.id;
  if (typeof adminId !== 'number') {
    res.status(401).json({ message: 'Unauthorized' });
    return undefined;
  }
  return adminId;
}

export function setupAdminRoutes(app: Express) {
  // Admin middleware to check if user is admin
  const requireAdmin = (req: AdminRequest & { isAuthenticated?: () => boolean }, res: express.Response, next: express.NextFunction) => {
    const jwtSecret = resolveJwtSecret();

    if (!jwtSecret) {
      return res.status(500).json({ message: MISSING_JWT_SECRET_MESSAGE });
    }

    // Check if user is authenticated via session OR JWT
    let user: unknown = null;
    let token: string | null = null;
    
    // Try cookie-based authentication first (preferred)
    if (req.cookies && req.cookies.authToken) {
      token = req.cookies.authToken;
    }
    // Fallback to Bearer token authentication  
    else if (req.headers.authorization && req.headers.authorization.startsWith('Bearer ')) {
      token = req.headers.authorization.substring(7);
    }
    // Also try session-based authentication
    else if (req.isAuthenticated && req.isAuthenticated()) {
      user = req.user;
    }
    
    // If we have a token, verify it
    if (token) {
      try {
        const decoded = jwt.verify(token, JWT_SECRET_VALIDATED) as { id: number; username?: string; isAdmin?: boolean; iat: number; exp: number };
        const decoded = jwt.verify(token, jwtSecret) as { id: number; username?: string; isAdmin?: boolean; iat: number; exp: number };
        user = decoded;
      } catch (error) {
        // JWT is invalid, user remains null
      }
    }

    if (!user) {
      return res.status(401).json({ message: 'Admin access required' });
    }

    // Check if user is admin (ID 999, username 'admin', or has isAdmin flag)  
    const typedUser = user as { id: number; username?: string | null; isAdmin?: boolean | null };
    if (typedUser.id !== 999 && typedUser.username !== 'admin' && !typedUser.isAdmin) {
      return res.status(403).json({ message: 'Admin access required' });
    }

    // Set user on request for later use
    req.user = user as User;
    next();
  };

  // Reset user password (Admin only)
  app.post('/api/admin/reset-password', requireAdmin, async (req, res) => {
    try {
      const { userId } = req.body;
tests/unit/admin-routes.setup.test.ts
New
+65-0
import { describe, it, expect, afterEach, vi } from 'vitest';
import request from 'supertest';
import express from 'express';

const originalJwtSecret = process.env.JWT_SECRET;
const originalNodeEnv = process.env.NODE_ENV;
const originalSendgridKey = process.env.SENDGRID_API_KEY;

function restoreEnvironment() {
  if (originalJwtSecret === undefined) {
    delete process.env.JWT_SECRET;
  } else {
    process.env.JWT_SECRET = originalJwtSecret;
  }

  if (originalNodeEnv === undefined) {
    delete process.env.NODE_ENV;
  } else {
    process.env.NODE_ENV = originalNodeEnv;
  }

  if (originalSendgridKey === undefined) {
    delete process.env.SENDGRID_API_KEY;
  } else {
    process.env.SENDGRID_API_KEY = originalSendgridKey;
  }
}

describe('setupAdminRoutes environment configuration', () => {
  afterEach(() => {
    restoreEnvironment();
  });

  it('initialises without JWT secret in test environment', async () => {
    vi.resetModules();
    delete process.env.JWT_SECRET;
    process.env.NODE_ENV = 'test';

    const { setupAdminRoutes } = await import('../../server/admin-routes.js');

    const app = express();
    app.use(express.json());
    setupAdminRoutes(app);

    const response = await request(app).get('/api/admin/users');
    expect(response.status).toBe(401);
  });

  it('rejects admin requests when JWT secret missing in production', async () => {
    vi.resetModules();
    delete process.env.JWT_SECRET;
    process.env.NODE_ENV = 'production';
    process.env.SENDGRID_API_KEY = 'SG.test-key';

    const { setupAdminRoutes } = await import('../../server/admin-routes.js');

    const app = express();
    app.use(express.json());
    setupAdminRoutes(app);

    const response = await request(app).get('/api/admin/users');
    expect(response.status).toBe(500);
    expect(response.body).toMatchObject({ message: 'JWT secret not configured' });
  });
});
