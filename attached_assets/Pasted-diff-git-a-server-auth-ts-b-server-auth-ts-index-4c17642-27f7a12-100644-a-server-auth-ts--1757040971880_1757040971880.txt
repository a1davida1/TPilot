diff --git a/server/auth.ts b/server/auth.ts
index 4c17642..27f7a12 100644
--- a/server/auth.ts
+++ b/server/auth.ts
@@ -363,9 +363,15 @@ export function setupAuth(app: Express) {
         console.log('  üì§ Preparing to send password reset email...');
         console.log('  ‚îú‚îÄ To:', user.email.replace(/(.{2})(.*)(@.*)/, '$1***$3'));
         console.log('  ‚îî‚îÄ Username:', user.username);
-
-        await emailService.sendPasswordResetEmail(user.email, user.username);
-
+
+        const token = crypto.randomBytes(32).toString('hex');
+        await storage.createVerificationToken({
+          userId: user.id,
+          token,
+          expiresAt: new Date(Date.now() + 60 * 60 * 1000)
+        });
+        await emailService.sendPasswordResetEmail(user.email, user.username, token);
+
         console.log('  ‚úÖ Password reset email sent successfully');
         console.log('  ‚îî‚îÄ Check email service logs for delivery status');
       }
diff --git a/server/services/email-service.ts b/server/services/email-service.ts
index 0d5d82f..4e210aa 100644
--- a/server/services/email-service.ts
+++ b/server/services/email-service.ts
@@ -1,6 +1,5 @@
 import sgMail from '@sendgrid/mail';
 import { safeLog } from '../lib/logger-utils.js';
-import jwt from 'jsonwebtoken';
 import { FRONTEND_URL } from '../config.js';

 // Initialize SendGrid
@@ -20,12 +19,6 @@ if (SENDGRID_API_KEY) {
   sgMail.setApiKey(SENDGRID_API_KEY);
 }

-// JWT configuration - validate once at startup
-const JWT_SECRET = process.env.JWT_SECRET;
-if (!JWT_SECRET) {
-  console.error('‚ö†Ô∏è JWT_SECRET is not configured - password reset emails will fail');
-}
-
 export const emailService = {
   get isEmailServiceConfigured(): boolean {
     return !!SENDGRID_API_KEY;
@@ -120,7 +113,7 @@ export const emailService = {
     }
   },

-  async sendPasswordResetEmail(to: string, username: string) {
+  async sendPasswordResetEmail(to: string, username: string, token: string) {
     if (!SENDGRID_API_KEY) {
       console.log('‚ùå SendGrid not configured - password reset email skipped');
       console.log('üîç SENDGRID_API_KEY exists:', !!process.env.SENDGRID_API_KEY);
@@ -133,24 +126,10 @@ export const emailService = {
 
     console.log(`üîÑ Sending password reset email to: ${to}`);
     console.log(`üìß FROM_EMAIL: ${FROM_EMAIL}`);
+    console.log(`üîë Token length: ${token?.length || 0}`);
+
+    const resetUrl = `${FRONTEND_URL}/reset-password?token=${encodeURIComponent(token)}`;

-    // Generate reset token
-    if (!JWT_SECRET) {
-      console.error('‚ùå JWT_SECRET not configured - cannot generate password reset token');
-      throw new Error('JWT_SECRET environment variable is required for password reset tokens');
-    }
-
-    const resetToken = jwt.sign(
-      { email: to, type: 'password-reset' },
-      JWT_SECRET,
-      { expiresIn: '1h' }
-    );
-
-    // CRITICAL: URL-encode the token to prevent corruption
-    const encodedToken = encodeURIComponent(resetToken);
-    const resetUrl = `${FRONTEND_URL}/reset-password?token=${encodedToken}`;
-
     console.log(`üîç Email URL being used: ${FRONTEND_URL}`);
     console.log(`üîó Full reset URL: ${resetUrl}`);
