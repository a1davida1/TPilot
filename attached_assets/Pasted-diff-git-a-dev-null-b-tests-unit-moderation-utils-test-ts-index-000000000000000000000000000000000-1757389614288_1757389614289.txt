diff --git a//dev/null b/tests/unit/moderation-utils.test.ts
index 0000000000000000000000000000000000000000..bdfef5218503df185d030461b9d6db62b9a2dd94 100644
--- a//dev/null
+++ b/tests/unit/moderation-utils.test.ts
@@ -0,0 +1,67 @@
+import { describe, it, expect, vi, beforeEach } from 'vitest';
+
+vi.mock('@server/db', () => ({
+  db: {
+    query: {
+      subredditRules: { findFirst: vi.fn() },
+      postJobs: { findMany: vi.fn() },
+      postRateLimits: { findFirst: vi.fn() },
+    },
+    insert: vi.fn().mockReturnThis(),
+    values: vi.fn().mockReturnThis(),
+    update: vi.fn().mockReturnThis(),
+    set: vi.fn().mockReturnThis(),
+    where: vi.fn().mockReturnThis(),
+  },
+}));
+
+vi.mock('@server/lib/config', () => ({
+  env: { MAX_POSTS_PER_SUBREDDIT_24H: 10, ML_SAFETY_URL: 'https://ml.example.com' },
+}));
+
+vi.mock('drizzle-orm', () => ({
+  eq: (a: unknown, b: unknown) => ({ a, b }),
+  desc: (c: unknown) => c,
+}));
+
+describe('moderation utils', () => {
+  beforeEach(() => {
+    vi.clearAllMocks();
+  });
+
+  it('fetches subreddit rules', async () => {
+    const { db } = await import('@server/db');
+    db.query.subredditRules.findFirst.mockResolvedValue({ rulesJson: { bannedDomains: ['spam.com'] } });
+    const { getSubredditRules } = await import('../../moderation/moderation-utils');
+    const rules = await getSubredditRules('test');
+    expect(rules.bannedDomains).toContain('spam.com');
+  });
+
+  it('retrieves user recent posts', async () => {
+    const { db } = await import('@server/db');
+    db.query.postJobs.findMany.mockResolvedValue([
+      { titleFinal: 'Hello', bodyFinal: 'World' },
+    ]);
+    const { getUserRecentPosts } = await import('../../moderation/moderation-utils');
+    const posts = await getUserRecentPosts(1);
+    expect(posts[0]).toContain('Hello');
+  });
+
+  it('increments rate limit count', async () => {
+    const { db } = await import('@server/db');
+    db.query.postRateLimits.findFirst.mockResolvedValue({ id: 1, lastPostAt: new Date().toISOString(), postCount24h: 2 });
+    const { getUserPostingStats } = await import('../../moderation/moderation-utils');
+    const stats = await getUserPostingStats(1);
+    expect(stats.requests).toBe(3);
+    expect(stats.allowed).toBe(10);
+  });
+
+  it('calls ml safety service', async () => {
+    global.fetch = vi.fn().mockResolvedValue({ ok: true, json: () => Promise.resolve({ nsfw: 0.1 }) });
+    const { mlSafetyCheck } = await import('../../moderation/moderation-utils');
+    const result = await mlSafetyCheck('content');
+    expect(fetch).toHaveBeenCalled();
+    expect(result.nsfw).toBe(0.1);
+  });
+});
+
