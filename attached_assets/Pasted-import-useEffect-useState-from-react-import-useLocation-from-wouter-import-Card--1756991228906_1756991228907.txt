import { useEffect, useState } from 'react';
import { useLocation } from 'wouter';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, XCircle, Loader2 } from 'lucide-react';
import { ThottoPilotLogo } from '@/components/thottopilot-logo';

export default function EmailVerificationPage() {
  const [, setLocation] = useLocation();
  const [verificationStatus, setVerificationStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [errorMessage, setErrorMessage] = useState('');
  const [email, setEmail] = useState('');

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const verified = urlParams.get('verified');
    const error = urlParams.get('error');
    const verifiedEmail = urlParams.get('email');

    // Handle already verified (from backend redirect)
    if (verified === 'true') {
      setVerificationStatus('success');
      setEmail(verifiedEmail || '');
      // Clear URL params
      window.history.replaceState({}, '', '/email-verification');
      return;
    }

    // Handle error from backend
    if (error) {
      setVerificationStatus('error');
      const errorMessages: Record<string, string> = {
        'missing_token': 'Verification link is invalid. Please request a new one.',
        'invalid_token': 'Verification link has expired. Please request a new one.',
        'expired_token': 'Verification link has expired. Please request a new one.',
        'invalid_token_type': 'Invalid verification link. Please request a new one.',
        'user_not_found': 'Account not found. Please sign up first.',
        'verification_failed': 'Verification failed. Please try again or contact support.'
      };
      setErrorMessage(errorMessages[error] || 'Verification failed. Please try again.');
      // Clear URL params
      window.history.replaceState({}, '', '/email-verification');
      return;
    }

    // If we have a token, verify it
    if (token) {
      verifyEmail(token);
    } else {
      setVerificationStatus('error');
      setErrorMessage('No verification token provided.');
    }
  }, []);

  const verifyEmail = async (token: string) => {
    try {
      // The backend expects a GET request with token as query param
      const response = await fetch(`/api/auth/verify-email?token=${encodeURIComponent(token)}`);
      
      if (response.ok) {
        // Backend will redirect, but in case it returns JSON
        setVerificationStatus('success');
      } else {
        const data = await response.json();
        setVerificationStatus('error');
        setErrorMessage(data.message || 'Verification failed.');
      }
    } catch (error) {
      setVerificationStatus('error');
      setErrorMessage('Network error. Please try again.');
    }
  };

  if (verificationStatus === 'loading') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <ThottoPilotLogo />
            </div>
            <CardTitle className="text-2xl font-bold flex items-center justify-center gap-2">
              <Loader2 className="h-6 w-6 animate-spin" />
              Verifying Email...
            </CardTitle>
          </CardHeader>
          <CardContent className="text-center">
            <p className="text-muted-foreground">
              Please wait while we verify your email address...
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (verificationStatus === 'success') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <ThottoPilotLogo />
            </div>
            <CardTitle className="text-2xl font-bold text-green-600 flex items-center justify-center gap-2">
              <CheckCircle className="h-6 w-6" />
              Email Verified!
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert className="border-green-200 bg-green-50 dark:bg-green-900/20">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription>
                Your email {email && <strong>{email}</strong>} has been successfully verified! 
                You can now log in to your account.
              </AlertDescription>
            </Alert>
            <Button 
              className="w-full" 
              onClick={() => setLocation('/login')}
            >
              Go to Login
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <ThottoPilotLogo />
          </div>
          <CardTitle className="text-2xl font-bold text-red-600 flex items-center justify-center gap-2">
            <XCircle className="h-6 w-6" />
            Verification Failed
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert variant="destructive">
            <XCircle className="h-4 w-4" />
            <AlertDescription>
              {errorMessage}
            </AlertDescription>
          </Alert>
          <div className="flex flex-col gap-2">
            <Button 
              className="w-full" 
              onClick={() => setLocation('/signup')}
            >
              Sign Up Again
            </Button>
            <Button 
              variant="outline"
              className="w-full" 
              onClick={() => setLocation('/login')}
            >
              Go to Login
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}