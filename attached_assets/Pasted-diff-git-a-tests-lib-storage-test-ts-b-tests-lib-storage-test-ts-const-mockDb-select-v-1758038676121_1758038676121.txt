diff --git a/tests/lib/storage.test.ts b/tests/lib/storage.test.ts
@@
-const mockDb = {
-  select: vi.fn().mockReturnThis(),
-  from: vi.fn().mockReturnThis(),
-  where: vi.fn().mockReturnThis(),
-  insert: vi.fn().mockReturnThis(),
-  values: vi.fn().mockReturnThis(),
-  returning: vi.fn().mockReturnThis(),
-  update: vi.fn().mockReturnThis(),
-  set: vi.fn().mockReturnThis(),
-  delete: vi.fn().mockReturnThis(),
-  execute: vi.fn(),
-  innerJoin: vi.fn().mockReturnThis(),
-  leftJoin: vi.fn().mockReturnThis(),
-  orderBy: vi.fn().mockReturnThis(),
-  limit: vi.fn().mockReturnThis(),
-};
-
-vi.mock('../../server/db.js', () => ({
-  db: mockDb
-}));
+const mockDb = vi.hoisted(() => ({
+  select: vi.fn().mockReturnThis(),
+  from: vi.fn().mockReturnThis(),
+  where: vi.fn().mockReturnThis(),
+  insert: vi.fn().mockReturnThis(),
+  values: vi.fn().mockReturnThis(),
+  returning: vi.fn().mockReturnThis(),
+  update: vi.fn().mockReturnThis(),
+  set: vi.fn().mockReturnThis(),
+  delete: vi.fn().mockReturnThis(),
+  execute: vi.fn(),
+  innerJoin: vi.fn().mockReturnThis(),
+  leftJoin: vi.fn().mockReturnThis(),
+  orderBy: vi.fn().mockReturnThis(),
+  limit: vi.fn().mockReturnThis(),
+}));
+
+vi.mock('../../server/db.js', () => ({ db: mockDb }));

diff --git a/tests/unit/policy-linter.test.ts b/tests/unit/policy-linter.test.ts
@@
-    await db.insert(subredditRules).values({
-      subreddit: 'testsub',
-      rules_json: {},
-      bannedWords: ['banned terms'],
-      titleRegex: ['pattern rules'],
-      prohibitedLinks: ['formatting rules'],
-      maxLength: 100,
-      minLength: 5
-    }).onConflictDoNothing();
+    await db.insert(subredditRules).values({
+      subreddit: 'testsub',
+      rulesJson: {
+        bannedWords: ['banned terms'],
+        titleRegex: ['pattern rules'],
+        prohibitedLinks: ['formatting rules'],
+        maxLength: 100,
+        minLength: 5
+      }
+    }).onConflictDoNothing();
@@
-    await db.delete(subredditRules).where(eq(subredditRules.subreddit, 'test_sub'));
+    await db.delete(subredditRules).where(eq(subredditRules.subreddit, 'testsub'));

diff --git a/tests/unit/auth/email-verification-redirect.test.ts b/tests/unit/auth/email-verification-redirect.test.ts
@@
-const mockStorage = {
-  getVerificationToken: vi.fn(),
-  getUser: vi.fn(),
-  updateUserEmailVerified: vi.fn(),
-  deleteVerificationToken: vi.fn(),
-};
-
-const mockEmailService = {
-  sendWelcomeEmail: vi.fn(),
-};
+const mockStorage = vi.hoisted(() => ({
+  getVerificationToken: vi.fn(),
+  getUser: vi.fn(),
+  updateUserEmailVerified: vi.fn(),
+  deleteVerificationToken: vi.fn(),
+}));
+
+const mockEmailService = vi.hoisted(() => ({
+  sendWelcomeEmail: vi.fn(),
+}));

diff --git a/tests/unit/auth/email-verification.test.ts b/tests/unit/auth/email-verification.test.ts
@@
-const mockStorage = {
-  getVerificationToken: vi.fn(async (token: string) => mockTokens.get(token)),
-  deleteVerificationToken: vi.fn(async (token: string) => mockTokens.delete(token)),
-  updateUserEmailVerified: vi.fn(async (userId: number, verified: boolean) => {
+const mockStorage = vi.hoisted(() => ({
+  getVerificationToken: vi.fn(async (token: string) => mockTokens.get(token)),
+  deleteVerificationToken: vi.fn(async (token: string) => mockTokens.delete(token)),
+  updateUserEmailVerified: vi.fn(async (userId: number, verified: boolean) => {
     const user = mockUsers.get(userId);
     if (user) user.emailVerified = verified;
-  }),
-  createVerificationToken: vi.fn(async (data: { token: string; userId: number; expiresAt: Date }) => {
+  }),
+  createVerificationToken: vi.fn(async (data: { token: string; userId: number; expiresAt: Date }) => {
     mockTokens.set(data.token, data);
     return data;
-  }),
-  getUser: vi.fn(async (id: number) => mockUsers.get(id))
-};
-
-const mockEmailService = {
-  sendVerificationEmail: vi.fn().mockResolvedValue(true)
-};
+  }),
+  getUser: vi.fn(async (id: number) => mockUsers.get(id))
+}));
+
+const mockEmailService = vi.hoisted(() => ({
+  sendVerificationEmail: vi.fn().mockResolvedValue(true)
+}));

diff --git a/tests/unit/expenses/expense-categories.test.ts b/tests/unit/expenses/expense-categories.test.ts
@@
-import { storage } from "../../server/storage";
+import { storage } from "../../server/storage.ts";

diff --git a/tests/unit/expenses/expense-operations.test.ts b/tests/unit/expenses/expense-operations.test.ts
@@
-import { storage } from "../../server/storage";
+import { storage } from "../../server/storage.ts";

diff --git a/tests/unit/expenses/receipt-upload.test.ts b/tests/unit/expenses/receipt-upload.test.ts
@@
-const mockStorage = {
-  updateExpense: vi.fn(),
-};
-
-const mockMediaManager = {
-  uploadFile: vi.fn(),
-};
-
-const mockAuthenticateToken = vi.fn();
+const mockStorage = vi.hoisted(() => ({
+  updateExpense: vi.fn(),
+}));
+
+const mockMediaManager = vi.hoisted(() => ({
+  uploadFile: vi.fn(),
+}));
+
+const mockAuthenticateToken = vi.hoisted(() => vi.fn());

diff --git a/tests/unit/image-generator/ai-service.test.ts b/tests/unit/image-generator/ai-service.test.ts
@@
-const mockOpenAI = { chat: { completions: { create: vi.fn() } } };
-const mockGemini = { generateContent: vi.fn() };
-const mockAnthropic = { messages: { create: vi.fn() } };
-const mockLogger = { log: vi.fn(), error: vi.fn(), warn: vi.fn() };
+const mockOpenAI = vi.hoisted(() => ({ chat: { completions: { create: vi.fn() } } }));
+const mockGemini = vi.hoisted(() => ({ generateContent: vi.fn() }));
+const mockAnthropic = vi.hoisted(() => ({ messages: { create: vi.fn() } }));
+const mockLogger = vi.hoisted(() => ({ log: vi.fn(), error: vi.fn(), warn: vi.fn() }));

diff --git a/tests/unit/image-generator/enhanced-ai-service.test.ts b/tests/unit/image-generator/enhanced-ai-service.test.ts
@@
-const mockLogger = { log: vi.fn(), error: vi.fn(), warn: vi.fn() };
+const mockLogger = vi.hoisted(() => ({ log: vi.fn(), error: vi.fn(), warn: vi.fn() }));

diff --git a/server/auth.ts b/server/auth.ts
@@
-        return res.json({
-          user: {
-            id: 999,
-            username: 'admin',
-            email: ADMIN_EMAIL,
-            tier: 'admin',
-            isAdmin: true,
-            role: 'admin'
-          }
-        });
+        return res.json({
+          token,
+          user: {
+            id: 999,
+            username: 'admin',
+            email: ADMIN_EMAIL,
+            tier: 'admin',
+            isAdmin: true,
+            role: 'admin'
+          }
+        });
@@
-      res.cookie('authToken', token, {
+      res.cookie('authToken', token, {
         httpOnly: true,
         secure: process.env.NODE_ENV === 'production',
         sameSite: 'strict',
         maxAge: 24 * 60 * 60 * 1000 // 24 hours
       });
-
-        res.json({
-          user: {
-          id: user.id,
-          username: user.username,
-          email: user.email,
-          tier: user.tier,
-          isAdmin: user.isAdmin,
-          role: user.role
-        }
-      });
+      res.json({
+        token,
+        user: {
+          id: user.id,
+          username: user.username,
+          email: user.email,
+          tier: user.tier,
+          isAdmin: user.isAdmin,
+          role: user.role
+        }
+      });

diff --git a/tests/unit/auth/login-identifier.test.ts b/tests/unit/auth/login-identifier.test.ts
@@
-      .values({
-        username: testUsername,
-        email: testEmail,
-        password: hashed,
-        tier: 'free',
-      })
+      .values({
+        username: testUsername,
+        email: testEmail,
+        password: hashed,
+        tier: 'free',
+        emailVerified: true,
+      })

diff --git a/server/lib/workers/index.ts b/server/lib/workers/index.ts
@@
-import { logger } from "../logger.js";
+import { logger } from "../logger.js";
+import { startQueueMonitoring } from "../queue-monitor.js";
@@
   await batchPostingWorker.initialize();
   logger.info('âœ… Batch posting worker initialized');
+
+  await startQueueMonitoring();
+  logger.info('ðŸš€ Queue monitoring started');

diff --git a/tests/unit/workers/queue-initialization.test.ts b/tests/unit/workers/queue-initialization.test.ts
@@
-      const logCalls = [...logSpy.mock.calls, ...infoSpy.mock.calls].flat();
-      const hasMonitoringLog = logCalls.some(call =>
-        typeof call === 'string' &&
-        (call.includes('queue monitoring') || call.includes('Queue monitoring'))
-      );
-      expect(logSpy).toHaveBeenCalled();
+      const logCalls = [...logSpy.mock.calls, ...infoSpy.mock.calls].flat();
+      const hasMonitoringLog = logCalls.some(call =>
+        typeof call === 'string' &&
+        (call.includes('queue monitoring') || call.includes('Queue monitoring'))
+      );
+      expect(hasMonitoringLog).toBe(true);

diff --git a/server/payments/payment-providers.ts b/server/payments/payment-providers.ts
@@
-  const baseUrl =
-    process.env.APP_BASE_URL || process.env.FRONTEND_URL || FRONTEND_URL;
-
-  if (!key) return disabled('paxum');
-  if (!baseUrl) throw new Error('APP_BASE_URL environment variable is required');
+  const baseUrl = process.env.APP_BASE_URL;
+  if (!key) return disabled('paxum');
+  if (!baseUrl) throw new Error('APP_BASE_URL environment variable is required');
@@
-        console.error('Coinbase Commerce checkout creation failed:', error);
-        throw new Error('Failed to create Coinbase Commerce checkout session');
+        console.error('Coinbase Commerce checkout creation failed:', error);
+        const message =
+          error instanceof Error
+            ? error.message
+            : 'Failed to create Coinbase Commerce checkout session';
+        throw new Error(message);

diff --git a/tests/unit/payment-providers.test.ts b/tests/unit/payment-providers.test.ts
@@
-      delete process.env.PAXUM_API_KEY;
-      delete process.env.COINBASE_COMMERCE_KEY;
+      delete process.env.PAXUM_API_KEY;
+      delete process.env.COINBASE_COMMERCE_KEY;
+      delete process.env.STRIPE_SECRET_KEY;
