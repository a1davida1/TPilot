// In server/routes/auth.ts, REPLACE the verify-email route with:

router.get("/verify-email", async (req, res) => {
  try {
    const { token } = req.query;
    
    if (!token) {
      console.log('No token provided for email verification');
      return res.redirect(`${process.env.FRONTEND_URL || 'https://thottopilot.com'}/login?error=missing_token`);
    }

    console.log('Processing email verification token...');
    
    // Check if it's a JWT token (contains dots) or database token (hex string)
    const isJWT = (token as string).includes('.');
    
    let userId: number;
    
    if (isJWT) {
      // JWT token from new signup flow
      try {
        const decoded = jwt.verify(token as string, process.env.JWT_SECRET!) as any;
        if (decoded.type !== 'email-verification') {
          return res.redirect(`${process.env.FRONTEND_URL || 'https://thottopilot.com'}/login?error=invalid_token_type`);
        }
        userId = decoded.userId;
      } catch (error) {
        console.error('JWT verification failed:', error);
        return res.redirect(`${process.env.FRONTEND_URL || 'https://thottopilot.com'}/login?error=invalid_token`);
      }
    } else {
      // Database token from auth.ts flow
      const verificationToken = await storage.getVerificationToken(token as string);
      
      if (!verificationToken) {
        console.error('Token not found in database');
        return res.redirect(`${process.env.FRONTEND_URL || 'https://thottopilot.com'}/login?error=invalid_token`);
      }
      
      // Check if expired
      if (new Date(verificationToken.expiresAt) < new Date()) {
        await storage.deleteVerificationToken(token as string);
        return res.redirect(`${process.env.FRONTEND_URL || 'https://thottopilot.com'}/login?error=expired_token`);
      }
      
      userId = verificationToken.userId;
      
      // Delete the used token
      await storage.deleteVerificationToken(token as string);
    }

    // Update user's email verification status
    await storage.updateUserEmailVerified(userId, true);
    
    const user = await storage.getUser(userId);
    
    console.log('Email verified successfully for user:', userId);

    // Send welcome email
    try {
      if (user?.email) {
        await emailService.sendWelcomeEmail(user.email, user.username || 'User');
      }
    } catch (emailError) {
      console.error('Failed to send welcome email:', emailError);
    }

    // Redirect with success message
    return res.redirect(`${process.env.FRONTEND_URL || 'https://thottopilot.com'}/login?verified=true&email=${encodeURIComponent(user?.email || '')}`);
    
  } catch (error) {
    console.error('Email verification error:', error);
    res.redirect(`${process.env.FRONTEND_URL || 'https://thottopilot.com'}/login?error=verification_failed`);
  }
});