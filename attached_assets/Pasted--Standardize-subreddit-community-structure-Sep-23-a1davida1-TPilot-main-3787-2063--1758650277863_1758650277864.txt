
Standardize subreddit community structure
Sep 23
·
a1davida1/TPilot
·
main
·
+3787
-2063

Archive

Share

Create PR


1. Decide on the canonical rule shape (e.g., `{ minKarma, minAccountAge, watermarksAllowed, ... }`) and update `server/seeds/reddit-communities-full.json` (and any other sources) to match it.
2. Adjust the backend types (`InsertRedditCommunity`) and serializers so `/api/reddit/communities` returns that structured object.
3. Update the frontend `SubredditCommunity` type (plus any components such as `client/src/components/reddit-communities.tsx`) to align with the finalized schema.
4. Add a regression test that loads a seeded community and verifies the structured rule fields reach the client intact.
Copy
Summary

Standardized the shared Reddit community schema around nested eligibility, content, posting, and notes sections and updated both seed datasets to ship data in that canonical shape.

Hardened server/reddit-communities.ts to coerce legacy rule payloads, infer selling policies, and guarantee structured rules are returned from every CRUD entry point.

Synced client types, hooks, and UI to the nested rule fields—updating admin forms, community listings, and the posting workflow to surface eligibility, selling policy, and guideline data directly from the structured rules.

Refreshed Vitest setup and test suites so the admin routes, integration schema checks, and normalization units all assert the structured rule payload end-to-end.

Testing

⚠️ npm run lint (passes with existing repository warnings)

❌ npm test (fails due to numerous pre-existing suite failures unrelated to these changes)

✅ npx vitest run tests/routes/admin-communities.test.ts tests/integration/reddit-communities-schema.test.ts tests/unit/server/reddit-communities.rules.test.ts


Files (15)

client/src/components/__tests__/admin-communities-panel.test.tsx
+76
-26

client/src/components/admin/admin-communities-panel.tsx
+83
-41

client/src/components/reddit-communities.tsx
+45
-34

client/src/hooks/use-admin-communities.ts
+24
-21

client/src/pages/__tests__/reddit-posting.test.tsx
+71
-14

client/src/pages/reddit-posting.tsx
+97
-69

client/src/types/reddit.ts
+24
-16

server/reddit-communities.ts
+214
-66

server/seeds/reddit-communities-full.json
+2474
-1334

server/seeds/reddit-communities.json
+82
-29

shared/schema.ts
+42
-38

tests/integration/reddit-communities-schema.test.ts
+126
-80

tests/routes/admin-communities.test.ts
+272
-175

tests/unit/server/reddit-communities.rules.test.ts
+153
-118

tests/vitest-setup.ts
+4
-2



Ask

Code
Diff
Logs

client/src/components/__tests__/admin-communities-panel.test.tsx
+76
-26

import React from 'react';
import { act } from 'react';
import { createRoot } from 'react-dom/client';
import { describe, expect, it, beforeEach, afterEach, vi } from 'vitest';
import { AdminCommunitiesPanel } from '../admin/admin-communities-panel';
import type { AdminCommunity, PromotionPolicy, GrowthTrend, ActivityLevel, CompetitionLevel } from '@/hooks/use-admin-communities';
import type { RedditCommunitySellingPolicy } from '@shared/schema';

// Mock dependencies
const mockUseQuery = vi.fn();
const mockUseMutation = vi.fn();
const mockInvalidateQueries = vi.fn();
const mockSetQueryData = vi.fn();
const mockMutate = vi.fn();
const mockMutateAsync = vi.fn();
const mockToast = vi.fn();

vi.mock('@tanstack/react-query', async () => {
  const actual = await vi.importActual<typeof import('@tanstack/react-query')>(
    '@tanstack/react-query'
  );

  return {
    ...actual,
    useQuery: (options: any) => mockUseQuery(options),
    useQuery: (options: unknown) => mockUseQuery(options),
    useMutation: () => mockUseMutation(),
    useQueryClient: () => ({
      invalidateQueries: mockInvalidateQueries,
      setQueryData: mockSetQueryData,
    }),
  };
});

vi.mock('@/hooks/use-toast', () => ({
  useToast: () => ({ toast: mockToast }),
}));

vi.mock('@/hooks/use-admin-communities', () => ({
  useAdminCommunities: (filters?: any) => mockUseQuery({ queryKey: ['admin-communities', filters] }),
  useAdminCommunities: (filters?: unknown) => mockUseQuery({ queryKey: ['admin-communities', filters] }),
  useCreateCommunity: () => mockUseMutation(),
  useUpdateCommunity: () => mockUseMutation(),
  useDeleteCommunity: () => mockUseMutation(),
  GROWTH_TRENDS: ['up', 'stable', 'down'],
  GROWTH_TREND_LABELS: {
    up: 'Growing',
    stable: 'Stable',
    down: 'Declining'
  },
  getGrowthTrendLabel: (trend: GrowthTrend | null | undefined) => {
    if (!trend) return 'Unknown';
    const labels = { up: 'Growing', stable: 'Stable', down: 'Declining' };
    return labels[trend];
  }
}));

// Mock global ResizeObserver and scrollIntoView
const globalScope = globalThis as typeof globalThis & {
  React?: typeof React;
  IS_REACT_ACT_ENVIRONMENT?: boolean;
};

globalScope.React = React;
globalScope.IS_REACT_ACT_ENVIRONMENT = true;

@@ -77,67 +77,86 @@ if (!(globalThis as { ResizeObserver?: unknown }).ResizeObserver) {
  vi.stubGlobal('ResizeObserver', MockResizeObserver);
}

if (!(HTMLElement.prototype as { scrollIntoView?: () => void }).scrollIntoView) {
  HTMLElement.prototype.scrollIntoView = () => undefined;
}

const flushPromises = () => new Promise<void>((resolve) => setTimeout(resolve, 0));

describe('AdminCommunitiesPanel Component', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    mockUseMutation.mockReturnValue({
      mutate: mockMutate,
      mutateAsync: mockMutateAsync,
      isPending: false,
      reset: vi.fn()
    });
  });

  afterEach(() => {
    document.body.innerHTML = '';
  });

  describe('Selling Policy Enum Variations', () => {
    const createCommunityWithSellingPolicy = (sellingPolicy: RedditCommunitySellingPolicy, promotionPolicy: PromotionPolicy = 'limited'): AdminCommunity => ({
    const createCommunityWithSellingPolicy = (
      sellingPolicy: RedditCommunitySellingPolicy,
      promotionPolicy: PromotionPolicy = 'limited'
    ): AdminCommunity => ({
      id: `community-${sellingPolicy}`,
      name: `community${sellingPolicy}`,
      displayName: `Community ${sellingPolicy}`,
      category: 'general',
      members: 1000,
      engagementRate: 50,
      verificationRequired: false,
      promotionAllowed: promotionPolicy,
      rules: {
        sellingAllowed: sellingPolicy,
        minKarma: 100,
        minAccountAge: 30,
        watermarksAllowed: true,
        titleRules: [],
        contentRules: [],
        linkRestrictions: []
        eligibility: {
          minKarma: 100,
          minAccountAgeDays: 30,
          verificationRequired: false,
          requiresApproval: false,
        },
        content: {
          sellingPolicy,
          watermarksAllowed: true,
          promotionalLinks: null,
          requiresOriginalContent: false,
          nsfwRequired: false,
          titleGuidelines: [],
          contentGuidelines: [],
          linkRestrictions: [],
          bannedContent: [],
          formattingRequirements: [],
        },
        posting: {
          maxPostsPerDay: null,
          cooldownHours: null,
        },
        notes: null,
      },
      growthTrend: 'stable',
      modActivity: 'medium',
      competitionLevel: 'medium'
    });

    it('should display allowed selling policy badge correctly', async () => {
      const community = createCommunityWithSellingPolicy('allowed', 'yes');
      mockUseQuery.mockReturnValue({
        data: [community],
        isLoading: false,
        error: null
      });

      const container = document.createElement('div');
      document.body.appendChild(container);
      const root = createRoot(container);

      await act(async () => {
        root.render(<AdminCommunitiesPanel canManage={true} />);
      });

      await act(async () => {
        await flushPromises();
      });
@@ -233,88 +252,103 @@ describe('AdminCommunitiesPanel Component', () => {
      });

      const promotionBadge = container.querySelector('[data-testid="row-community-community-unknown"]');
      expect(promotionBadge).toBeTruthy();
      expect(promotionBadge?.textContent).toContain('unknown');

      await act(async () => {
        root.unmount();
      });
      container.remove();
    });
  });

  describe('Rule Summary Display', () => {
    it('should display comprehensive rule summary with selling policy', async () => {
      const community: AdminCommunity = {
        id: 'detailed-rules',
        name: 'detailedrules',
        displayName: 'Detailed Rules Community',
        category: 'photography',
        members: 2500,
        engagementRate: 65,
        verificationRequired: true,
        promotionAllowed: 'limited',
        rules: {
          sellingAllowed: 'limited',
          minKarma: 500,
          minAccountAge: 90,
          watermarksAllowed: false,
          verificationRequired: true,
          titleRules: ['Clear descriptive titles', 'No clickbait'],
          contentRules: ['High quality images only', 'OC preferred'],
          linkRestrictions: ['No direct sales links', 'Portfolio links OK']
          eligibility: {
            minKarma: 500,
            minAccountAgeDays: 90,
            verificationRequired: true,
            requiresApproval: true,
          },
          content: {
            sellingPolicy: 'limited',
            watermarksAllowed: false,
            promotionalLinks: null,
            requiresOriginalContent: false,
            nsfwRequired: false,
            titleGuidelines: ['Clear descriptive titles', 'No clickbait'],
            contentGuidelines: ['High quality images only', 'OC preferred'],
            linkRestrictions: ['No direct sales links', 'Portfolio links OK'],
            bannedContent: [],
            formattingRequirements: [],
          },
          posting: {
            maxPostsPerDay: null,
            cooldownHours: null,
          },
          notes: null,
        },
        growthTrend: 'up',
        modActivity: 'high',
        competitionLevel: 'medium'
      };

      mockUseQuery.mockReturnValue({
        data: [community],
        isLoading: false,
        error: null
      });

      const container = document.createElement('div');
      document.body.appendChild(container);
      const root = createRoot(container);

      await act(async () => {
        root.render(<AdminCommunitiesPanel canManage={true} />);
      });

      await act(async () => {
        await flushPromises();
      });

      // Check for rule summary elements
      const rulesSummary = container.querySelector('[data-testid="row-community-detailed-rules"]');
      expect(rulesSummary).toBeTruthy();
      
      // The RuleSummary component should display the selling policy
      expect(container.textContent).toContain('limited');
      expect(container.textContent).toContain('Limited selling');

      await act(async () => {
        root.unmount();
      });
      container.remove();
    });

    it('should handle communities with no structured rules', async () => {
      const community: AdminCommunity = {
        id: 'no-rules',
        name: 'norules',
        displayName: 'No Rules Community',
        category: 'general',
        members: 100,
        engagementRate: 20,
        verificationRequired: false,
        promotionAllowed: 'unknown',
        rules: null,
        growthTrend: 'stable',
        modActivity: 'low',
        competitionLevel: 'low'
      };

      mockUseQuery.mockReturnValue({
        data: [community],
@@ -407,57 +441,73 @@ describe('AdminCommunitiesPanel Component', () => {
      const promotionSelect = container.querySelector('[data-testid="select-promotion"]');
      const verificationSelect = container.querySelector('[data-testid="select-verification"]');
      
      expect(categorySelect).toBeTruthy();
      expect(promotionSelect).toBeTruthy();
      expect(verificationSelect).toBeTruthy();

      await act(async () => {
        root.unmount();
      });
      container.remove();
    });
  });

  describe('Growth Trend Enum Display and Handling', () => {
    const createCommunityWithGrowthTrend = (growthTrend: GrowthTrend): AdminCommunity => ({
      id: `trend-${growthTrend}`,
      name: `trend${growthTrend}`,
      displayName: `Trend ${growthTrend} Community`,
      category: 'general',
      members: 1000,
      engagementRate: 50,
      verificationRequired: false,
      promotionAllowed: 'limited',
      rules: {
        sellingAllowed: 'allowed',
        minKarma: 100,
        minAccountAge: 30,
        watermarksAllowed: true,
        titleRules: [],
        contentRules: [],
        linkRestrictions: []
        eligibility: {
          minKarma: 100,
          minAccountAgeDays: 30,
          verificationRequired: false,
          requiresApproval: false,
        },
        content: {
          sellingPolicy: 'allowed',
          watermarksAllowed: true,
          promotionalLinks: null,
          requiresOriginalContent: false,
          nsfwRequired: false,
          titleGuidelines: [],
          contentGuidelines: [],
          linkRestrictions: [],
          bannedContent: [],
          formattingRequirements: [],
        },
        posting: {
          maxPostsPerDay: null,
          cooldownHours: null,
        },
        notes: null,
      },
      growthTrend,
      modActivity: 'medium',
      competitionLevel: 'medium'
    });

    it('should handle up growth trend', async () => {
      const community = createCommunityWithGrowthTrend('up');
      mockUseQuery.mockReturnValue({
        data: [community],
        isLoading: false,
        error: null
      });

      const container = document.createElement('div');
      document.body.appendChild(container);
      const root = createRoot(container);

      await act(async () => {
        root.render(<AdminCommunitiesPanel canManage={true} />);
      });

      await act(async () => {
        await flushPromises();
      });
client/src/components/admin/admin-communities-panel.tsx
+83
-41

@@ -2,291 +2,331 @@ import { useMemo, useState } from 'react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import {
  type AdminCommunity,
  type CommunityPayload,
  type CommunityRulePayload,
  type PromotionPolicy,
  type GrowthTrend,
  type ActivityLevel,
  type CompetitionLevel,
  useAdminCommunities,
  useCreateCommunity,
  useUpdateCommunity,
  useDeleteCommunity,
  GROWTH_TRENDS,
  GROWTH_TREND_LABELS,
} from '@/hooks/use-admin-communities';
import type { RedditCommunitySellingPolicy } from '@shared/schema';
import type {
  RedditCommunitySellingPolicy,
  RedditCommunityEligibilityRules,
  RedditCommunityContentRules
} from '@shared/schema';
import { cn } from '@/lib/utils';
import { CheckCircle, Edit2, Loader2, PlusCircle, ShieldAlert, Trash2 } from 'lucide-react';

interface AdminCommunitiesPanelProps {
  canManage: boolean;
}

type SellingRuleOption = 'unspecified' | RedditCommunitySellingPolicy;
type TriState = 'unspecified' | 'allowed' | 'disallowed';
type CompetitionOption = 'unspecified' | 'low' | 'medium' | 'high';

interface CommunityFormState {
  id: string;
  name: string;
  displayName: string;
  category: string;
  members: string;
  engagementRate: string;
  verificationRequired: boolean;
  promotionAllowed: PromotionPolicy;
  postingLimitsPerDay: string;
  postingLimitsPerWeek: string;
  postingLimitsCooldownHours: string;
  rulesMinKarma: string;
  rulesMinAccountAge: string;
  rulesWatermarksAllowed: TriState;
  rulesSellingAllowed: SellingRuleOption;
  rulesTitleRules: string;
  rulesContentRules: string;
  rulesLinkRestrictions: string;
  bestPostingTimes: string;
  averageUpvotes: string;
  successProbability: string;
  growthTrend: GrowthTrend;
  modActivity: ActivityLevel;
  description: string;
  tags: string;
  competitionLevel: CompetitionLevel;
  competitionLevel: CompetitionOption;
}

const defaultFormState: CommunityFormState = {
  id: '',
  name: '',
  displayName: '',
  category: '',
  members: '',
  engagementRate: '',
  verificationRequired: false,
  promotionAllowed: 'limited',
  postingLimitsPerDay: '',
  postingLimitsPerWeek: '',
  postingLimitsCooldownHours: '',
  rulesMinKarma: '',
  rulesMinAccountAge: '',
  rulesWatermarksAllowed: 'unspecified',
  rulesSellingAllowed: 'unspecified',
  rulesTitleRules: '',
  rulesContentRules: '',
  rulesLinkRestrictions: '',
  bestPostingTimes: '',
  averageUpvotes: '',
  successProbability: '',
  growthTrend: 'stable',
  modActivity: 'medium',
  description: '',
  tags: '',
  competitionLevel: 'medium',
  competitionLevel: 'unspecified',
};

function parseNumber(value: string): number | undefined {
  const trimmed = value.trim();
  if (trimmed === '') return undefined;
  const parsed = Number(trimmed);
  return Number.isNaN(parsed) ? undefined : parsed;
}

function parseList(value: string): string[] | undefined {
  const trimmed = value.trim();
  if (!trimmed) return undefined;
  const items = trimmed
    .split(/\n|,/)
    .map(item => item.trim())
    .filter(Boolean);
  return items.length ? items : undefined;
}

function communityToForm(community: AdminCommunity): CommunityFormState {
  const eligibility = community.rules?.eligibility;
  const content = community.rules?.content;

  return {
    id: community.id,
    name: community.name,
    displayName: community.displayName,
    category: community.category,
    members: String(community.members ?? ''),
    engagementRate: String(community.engagementRate ?? ''),
    verificationRequired: community.verificationRequired,
    promotionAllowed: community.promotionAllowed,
    postingLimitsPerDay: community.postingLimits?.perDay ? String(community.postingLimits.perDay) : '',
    postingLimitsPerWeek: community.postingLimits?.perWeek ? String(community.postingLimits.perWeek) : '',
    postingLimitsCooldownHours: community.postingLimits?.cooldownHours
      ? String(community.postingLimits.cooldownHours)
      : '',
    rulesMinKarma: community.rules?.minKarma !== undefined ? String(community.rules.minKarma) : '',
    rulesMinAccountAge: community.rules?.minAccountAge !== undefined ? String(community.rules.minAccountAge) : '',
    rulesMinKarma: eligibility?.minKarma !== null && eligibility?.minKarma !== undefined ? String(eligibility.minKarma) : '',
    rulesMinAccountAge:
      eligibility?.minAccountAgeDays !== null && eligibility?.minAccountAgeDays !== undefined
        ? String(eligibility.minAccountAgeDays)
        : '',
    rulesWatermarksAllowed:
      community.rules?.watermarksAllowed === true
      content?.watermarksAllowed === true
        ? 'allowed'
        : community.rules?.watermarksAllowed === false
        : content?.watermarksAllowed === false
          ? 'disallowed'
          : 'unspecified',
    rulesSellingAllowed: community.rules?.sellingAllowed ?? 'unspecified',
    rulesTitleRules: (community.rules?.titleRules ?? []).join('\n'),
    rulesContentRules: (community.rules?.contentRules ?? []).join('\n'),
    rulesLinkRestrictions: (community.rules?.linkRestrictions ?? []).join('\n'),
    rulesSellingAllowed: content?.sellingPolicy ?? 'unspecified',
    rulesTitleRules: (content?.titleGuidelines ?? []).join('\n'),
    rulesContentRules: (content?.contentGuidelines ?? []).join('\n'),
    rulesLinkRestrictions: (content?.linkRestrictions ?? []).join('\n'),
    bestPostingTimes: (community.bestPostingTimes ?? []).join(', '),
    averageUpvotes: community.averageUpvotes !== null && community.averageUpvotes !== undefined
      ? String(community.averageUpvotes)
      : '',
    successProbability: community.successProbability !== null && community.successProbability !== undefined
      ? String(community.successProbability)
      : '',
    growthTrend: community.growthTrend ?? 'stable',
    modActivity: community.modActivity ?? 'medium',
    modActivity: community.modActivity ?? 'unknown',
    description: community.description ?? '',
    tags: (community.tags ?? []).join(', '),
    competitionLevel: community.competitionLevel ?? 'medium',
    competitionLevel: community.competitionLevel ?? 'unspecified',
  };
}

function formToPayload(form: CommunityFormState): CommunityPayload {
  const members = parseNumber(form.members);
  const engagementRate = parseNumber(form.engagementRate);
  if (members === undefined) {
    throw new Error('Member count is required and must be a number.');
  }
  if (engagementRate === undefined) {
    throw new Error('Engagement rate is required and must be a number.');
  }

  const bestPostingTimes = parseList(form.bestPostingTimes);
  const tags = parseList(form.tags);
  const postingLimitsPerDay = parseNumber(form.postingLimitsPerDay);
  const postingLimitsPerWeek = parseNumber(form.postingLimitsPerWeek);
  const postingLimitsCooldownHours = parseNumber(form.postingLimitsCooldownHours);
  const rulesMinKarma = parseNumber(form.rulesMinKarma);
  const rulesMinAccountAge = parseNumber(form.rulesMinAccountAge);
  const rulesTitleRules = parseList(form.rulesTitleRules);
  const rulesContentRules = parseList(form.rulesContentRules);
  const rulesLinkRestrictions = parseList(form.rulesLinkRestrictions);
  const averageUpvotes = parseNumber(form.averageUpvotes);
  const successProbability = parseNumber(form.successProbability);
  const competitionLevel = form.competitionLevel === 'unspecified' ? null : form.competitionLevel;

  const postingLimits = {
    ...(postingLimitsPerDay !== undefined ? { perDay: postingLimitsPerDay } : {}),
    ...(postingLimitsPerWeek !== undefined ? { perWeek: postingLimitsPerWeek } : {}),
    ...(postingLimitsCooldownHours !== undefined ? { cooldownHours: postingLimitsCooldownHours } : {}),
  };
  const normalizedPostingLimits = Object.keys(postingLimits).length ? postingLimits : null;

  const watermarksAllowed =
    form.rulesWatermarksAllowed === 'allowed'
      ? true
      : form.rulesWatermarksAllowed === 'disallowed'
        ? false
        : undefined;
  const sellingAllowed = form.rulesSellingAllowed === 'unspecified' ? undefined : form.rulesSellingAllowed;

  const rules = {
    ...(rulesMinKarma !== undefined ? { minKarma: rulesMinKarma } : {}),
    ...(rulesMinAccountAge !== undefined ? { minAccountAge: rulesMinAccountAge } : {}),
    ...(watermarksAllowed !== undefined ? { watermarksAllowed } : {}),
    ...(sellingAllowed !== undefined ? { sellingAllowed } : {}),
    ...(rulesTitleRules ? { titleRules: rulesTitleRules } : {}),
    ...(rulesContentRules ? { contentRules: rulesContentRules } : {}),
    ...(rulesLinkRestrictions ? { linkRestrictions: rulesLinkRestrictions } : {}),
  };
  const normalizedRules = Object.keys(rules).length ? rules : null;
  const sellingPolicy = form.rulesSellingAllowed === 'unspecified' ? undefined : form.rulesSellingAllowed;

  const eligibility: Partial<RedditCommunityEligibilityRules> = {};
  if (rulesMinKarma !== undefined) {
    eligibility.minKarma = rulesMinKarma;
  }
  if (rulesMinAccountAge !== undefined) {
    eligibility.minAccountAgeDays = rulesMinAccountAge;
  }

  const content: Partial<RedditCommunityContentRules> = {};
  if (watermarksAllowed !== undefined) {
    content.watermarksAllowed = watermarksAllowed;
  }
  if (sellingPolicy !== undefined) {
    content.sellingPolicy = sellingPolicy;
  }
  if (rulesTitleRules && rulesTitleRules.length > 0) {
    content.titleGuidelines = rulesTitleRules;
  }
  if (rulesContentRules && rulesContentRules.length > 0) {
    content.contentGuidelines = rulesContentRules;
  }
  if (rulesLinkRestrictions && rulesLinkRestrictions.length > 0) {
    content.linkRestrictions = rulesLinkRestrictions;
  }

  const rules: CommunityRulePayload = {};
  if (Object.keys(eligibility).length > 0) {
    rules.eligibility = eligibility;
  }
  if (Object.keys(content).length > 0) {
    rules.content = content;
  }

  const normalizedRules = Object.keys(rules).length > 0 ? rules : null;

  return {
    id: form.id.trim() || undefined,
    name: form.name.trim(),
    displayName: form.displayName.trim(),
    category: form.category.trim(),
    members,
    engagementRate,
    verificationRequired: form.verificationRequired,
    promotionAllowed: form.promotionAllowed,
    postingLimits: normalizedPostingLimits,
    rules: normalizedRules,
    bestPostingTimes: bestPostingTimes ?? null,
    averageUpvotes: averageUpvotes ?? null,
    successProbability: successProbability ?? null,
    growthTrend: form.growthTrend,
    modActivity: form.modActivity,
    description: form.description.trim() || null,
    tags: tags ?? null,
    competitionLevel: form.competitionLevel,
    competitionLevel,
  };
}

function RuleSummary({ community }: { community: AdminCommunity }) {
  const ruleItems: string[] = [];
  if (community.rules?.minKarma !== undefined) {
    ruleItems.push(`Min Karma ${community.rules.minKarma}`);
  const eligibility = community.rules?.eligibility;
  const content = community.rules?.content;

  if (eligibility?.minKarma !== null && eligibility?.minKarma !== undefined) {
    ruleItems.push(`Min Karma ${eligibility.minKarma}`);
  }
  if (community.rules?.minAccountAge !== undefined) {
    ruleItems.push(`Account ${community.rules.minAccountAge}d`);
  if (eligibility?.minAccountAgeDays !== null && eligibility?.minAccountAgeDays !== undefined) {
    ruleItems.push(`Account ${eligibility.minAccountAgeDays}d`);
  }
  if (community.rules?.watermarksAllowed === true) {
  if (content?.watermarksAllowed === true) {
    ruleItems.push('Watermarks allowed');
  }
  if (community.rules?.watermarksAllowed === false) {
  if (content?.watermarksAllowed === false) {
    ruleItems.push('No watermarks');
  }
  const sellingPolicy = community.rules?.sellingAllowed;
  const sellingPolicy = content?.sellingPolicy;
  if (sellingPolicy === 'allowed') {
    ruleItems.push('Selling allowed');
  } else if (sellingPolicy === 'limited') {
    ruleItems.push('Limited selling');
  } else if (sellingPolicy === 'not_allowed') {
    ruleItems.push('No selling');
  } else if (sellingPolicy === 'unknown') {
    ruleItems.push('Selling policy unknown');
  }
  if ((community.rules?.titleRules?.length ?? 0) > 0) {
    ruleItems.push(`${community.rules?.titleRules?.length ?? 0} title rules`);
  if ((content?.titleGuidelines?.length ?? 0) > 0) {
    ruleItems.push(`${content?.titleGuidelines?.length ?? 0} title rules`);
  }
  if ((community.rules?.contentRules?.length ?? 0) > 0) {
    ruleItems.push(`${community.rules?.contentRules?.length ?? 0} content rules`);
  if ((content?.contentGuidelines?.length ?? 0) > 0) {
    ruleItems.push(`${content?.contentGuidelines?.length ?? 0} content rules`);
  }
  if ((community.rules?.linkRestrictions?.length ?? 0) > 0) {
  if ((content?.linkRestrictions?.length ?? 0) > 0) {
    ruleItems.push('Link restrictions');
  }
  return (
    <div className="flex flex-wrap gap-1">
      {ruleItems.length ? (
        ruleItems.map(item => (
          <Badge key={item} variant="secondary" className="bg-purple-50 text-purple-700">
            {item}
          </Badge>
        ))
      ) : (
        <span className="text-sm text-muted-foreground">No structured rules</span>
      )}
    </div>
  );
}

export function AdminCommunitiesPanel({ canManage }: AdminCommunitiesPanelProps) {
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [promotionFilter, setPromotionFilter] = useState<'all' | PromotionPolicy>('all');
  const [verificationFilter, setVerificationFilter] = useState<'all' | 'required' | 'not-required'>('all');
  const [formState, setFormState] = useState<CommunityFormState>(defaultFormState);
  const [isCreateOpen, setIsCreateOpen] = useState(false);
@@ -489,51 +529,53 @@ export function AdminCommunitiesPanel({ canManage }: AdminCommunitiesPanelProps)
                    <TableHead>Promotion</TableHead>
                    <TableHead>Rules Summary</TableHead>
                    {canManage && <TableHead>Actions</TableHead>}
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {communities?.map((community) => (
                    <TableRow key={community.id} data-testid={`row-community-${community.id}`}>
                      <TableCell>
                        <div>
                          <div className="font-medium">{community.displayName}</div>
                          <div className="text-sm text-muted-foreground">r/{community.name}</div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline">{community.category}</Badge>
                      </TableCell>
                      <TableCell>{community.members.toLocaleString()}</TableCell>
                      <TableCell>
                        <Badge
                          variant={
                            community.promotionAllowed === 'yes'
                              ? 'default'
                              : community.promotionAllowed === 'limited'
                                ? 'secondary'
                                : 'destructive'
                                : community.promotionAllowed === 'unknown'
                                  ? 'outline'
                                  : 'destructive'
                          }
                        >
                          {community.promotionAllowed}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <RuleSummary community={community} />
                      </TableCell>
                      {canManage && (
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleEdit(community)}
                              data-testid={`button-edit-${community.id}`}
                            >
                              <Edit2 className="h-4 w-4" />
                            </Button>
                            <AlertDialog>
                              <AlertDialogTrigger asChild>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  data-testid={`button-delete-${community.id}`}
@@ -818,60 +860,60 @@ export function AdminCommunitiesPanel({ canManage }: AdminCommunitiesPanelProps)
                    data-testid="input-success-probability"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="growthTrend">Growth Trend</Label>
                  <Select
                    value={formState.growthTrend}
                    onValueChange={(value) => setFormState(prev => ({ ...prev, growthTrend: value as GrowthTrend }))}
                  >
                    <SelectTrigger data-testid="select-growth-trend">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {GROWTH_TRENDS.map(trend => (
                        <SelectItem key={trend} value={trend}>
                          {GROWTH_TREND_LABELS[trend]}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="competitionLevel">Competition Level</Label>
                  <Select
                    value={formState.competitionLevel}
                    onValueChange={(value) => setFormState(prev => ({ ...prev, competitionLevel: value as CompetitionLevel }))}
                    onValueChange={(value) => setFormState(prev => ({ ...prev, competitionLevel: value as CompetitionOption }))}
                  >
                    <SelectTrigger data-testid="select-competition-level">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="unspecified">Unspecified</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="unknown">Unknown</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  placeholder="Community description..."
                  value={formState.description}
                  onChange={(e) => setFormState(prev => ({ ...prev, description: e.target.value }))}
                  data-testid="textarea-description"
                />
              </div>
            </div>
            
            {/* Action Buttons */}
            <div className="flex justify-end gap-2">
              <Button
                variant="outline"
                onClick={() => setIsCreateOpen(false)}
                data-testid="button-cancel"
              >
                Cancel
client/src/components/reddit-communities.tsx
+45
-34

@@ -8,86 +8,85 @@ import {
  SelectContent,
  SelectItem,
  SelectTrigger,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { 
  Users, 
  TrendingUp, 
  Shield, 
  Megaphone, 
  Search,
  ChevronUp,
  ChevronDown,
  CheckCircle,
  XCircle,
} from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import type { RedditCommunity, PostingLimits, RedditCommunitySellingPolicy } from "@shared/schema";
import {
  type RedditCommunity,
  type PostingLimits,
  type RedditCommunitySellingPolicy,
  postingLimitsSchema,
  redditCommunityRuleSetSchema
} from "@shared/schema";
import { GROWTH_TRENDS, GROWTH_TREND_LABELS, getGrowthTrendLabel, growthTrendSchema } from "@shared/growth-trends";
import { z } from "zod";

export function RedditCommunities() {
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState<'members' | 'engagement' | 'upvotes' | 'name' | 'success'>('success');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [filterPromotion, setFilterPromotion] = useState<string>('all');
  const [filterVerification, setFilterVerification] = useState<string>('all');
  const [expandedRow, setExpandedRow] = useState<string | null>(null);

  // Client validation schema - server enforces canonical enums and validation
  const RedditCommunityArraySchema = z.array(z.object({
    id: z.string(),
    name: z.string(),
    displayName: z.string(),
    members: z.number(),
    engagementRate: z.number(),
    category: z.enum(['age', 'amateur', 'appearance', 'body_type', 'cam', 'clothing', 'comparison', 'content_type', 'cosplay', 'couples', 'dancer', 'ethnicity', 'fetish', 'fitness', 'gaming', 'general', 'gonewild', 'lifestyle', 'natural', 'niche', 'reveal', 'selling', 'social', 'specific', 'style', 'theme']),
    verificationRequired: z.boolean(),
    promotionAllowed: z.enum(['yes', 'limited', 'no']),
    postingLimits: z.any().nullable().optional(),
    rules: z.object({
      sellingAllowed: z.enum(['allowed', 'limited', 'not_allowed', 'unknown']).optional(),
      watermarksAllowed: z.boolean().optional(),
      minKarma: z.number().optional(),
      minAccountAge: z.number().optional(),
      titleRules: z.array(z.string()).optional(),
      contentRules: z.array(z.string()).optional()
    }).optional(),
    promotionAllowed: z.enum(['yes', 'limited', 'no', 'subtle', 'strict', 'unknown']),
    postingLimits: postingLimitsSchema.nullable().optional(),
    rules: redditCommunityRuleSetSchema.optional(),
    bestPostingTimes: z.array(z.string()).optional(),
    averageUpvotes: z.number().nullable().optional(),
    successProbability: z.number().nullable().optional(),
    growthTrend: growthTrendSchema.optional(),
    modActivity: z.enum(['active', 'moderate', 'inactive']).nullable().optional(),
    modActivity: z.enum(['low', 'medium', 'high', 'unknown']).nullable().optional(),
    description: z.string().nullable().optional(),
    tags: z.array(z.string()).optional(),
    competitionLevel: z.enum(['low', 'medium', 'high']).nullable().optional()
  }));

  // Fetch communities data with runtime validation
  const { data: communities = [], isLoading } = useQuery({
    queryKey: ['/api/reddit/communities', filterCategory, searchTerm],
    queryFn: async (): Promise<RedditCommunity[]> => {
      const params = new URLSearchParams();
      if (filterCategory !== 'all') params.append('category', filterCategory);
      if (searchTerm) params.append('search', searchTerm);

      const response = await apiRequest('GET', `/api/reddit/communities?${params.toString()}`);
      const rawData = await response.json();
      
      // Runtime validation using inline canonical schema structure
      // Note: Server enforces full canonical validation with proper enums
      try {
        const validatedData = RedditCommunityArraySchema.parse(rawData);
        return validatedData as RedditCommunity[];
      } catch (parseError) {
        console.error('API response validation failed:', parseError);
        throw new Error('Invalid API response format');
      }
@@ -142,52 +141,58 @@ export function RedditCommunities() {
          return (b.successProbability ?? 0) - (a.successProbability ?? 0);
        case 'name':
          return a.name.localeCompare(b.name);
        default:
          return 0;
      }
    });

    return filtered;
  }, [displayCommunities, searchTerm, filterCategory, filterPromotion, filterVerification, sortBy]);

  const formatNumber = (num: number): string => {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(0)}K`;
    return num.toString();
  };

  const getPromotionBadge = (promotion: string) => {
    switch (promotion) {
      case 'yes':
        return <Badge className="bg-green-500/20 text-green-400">Allowed</Badge>;
      case 'limited':
        return <Badge className="bg-yellow-500/20 text-yellow-400">Limited</Badge>;
      case 'no':
        return <Badge className="bg-red-500/20 text-red-400">Not Allowed</Badge>;
      case 'subtle':
        return <Badge className="bg-amber-500/20 text-amber-400">Subtle Only</Badge>;
      case 'strict':
        return <Badge className="bg-red-600/20 text-red-500">Strict</Badge>;
      case 'unknown':
        return <Badge className="bg-gray-500/20 text-gray-400">Unknown</Badge>;
      default:
        return null;
        return <Badge className="bg-gray-500/20 text-gray-400">Unknown</Badge>;
    }
  };

  const getSellingPolicyBadge = (policy: RedditCommunitySellingPolicy | undefined) => {
    switch (policy) {
      case 'allowed':
        return <Badge className="bg-green-500/20 text-green-400">Selling allowed</Badge>;
      case 'limited':
        return <Badge className="bg-yellow-500/20 text-yellow-400">Limited selling</Badge>;
      case 'not_allowed':
        return <Badge className="bg-red-500/20 text-red-400">No selling</Badge>;
      case 'unknown':
        return <Badge className="bg-gray-500/20 text-gray-400">Selling policy unknown</Badge>;
      default:
        return <Badge className="bg-gray-500/20 text-gray-400">Selling policy unknown</Badge>;
    }
  };

  const getCategoryBadge = (category: string) => {
    const colors: Record<string, string> = {
      // Primary categories
      premium: 'bg-purple-500/20 text-purple-400',
      gonewild: 'bg-pink-500/20 text-pink-400',
      general: 'bg-blue-500/20 text-blue-400',
      niche: 'bg-cyan-500/20 text-cyan-400',
@@ -199,51 +204,52 @@ export function RedditCommunities() {
      amateur: 'bg-blue-400/20 text-blue-300',
      age: 'bg-indigo-500/20 text-indigo-400',
      appearance: 'bg-rose-500/20 text-rose-400',
      body_type: 'bg-pink-400/20 text-pink-300',
      cam: 'bg-purple-400/20 text-purple-300',
      clothing: 'bg-teal-500/20 text-teal-400',
      comparison: 'bg-slate-500/20 text-slate-400',
      content_type: 'bg-amber-500/20 text-amber-400',
      cosplay: 'bg-violet-500/20 text-violet-400',
      couples: 'bg-red-500/20 text-red-400',
      dancer: 'bg-fuchsia-500/20 text-fuchsia-400',
      ethnicity: 'bg-emerald-500/20 text-emerald-400',
      fitness: 'bg-lime-500/20 text-lime-400',
      gaming: 'bg-sky-500/20 text-sky-400',
      lifestyle: 'bg-zinc-500/20 text-zinc-400',
      natural: 'bg-green-400/20 text-green-300',
      reveal: 'bg-orange-400/20 text-orange-300',
      social: 'bg-blue-300/20 text-blue-200',
      specific: 'bg-gray-500/20 text-gray-400',
      style: 'bg-cyan-400/20 text-cyan-300',
      theme: 'bg-purple-300/20 text-purple-200'
    };
    return <Badge className={colors[category] || 'bg-gray-500/20 text-gray-400'}>{category}</Badge>;
  };

  const getSuccessProbabilityColor = (probability: number) => {
  const getSuccessProbabilityColor = (probability: number | null | undefined) => {
    if (probability == null) return 'text-gray-400';
    if (probability >= 85) return 'text-green-400';
    if (probability >= 70) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getGrowthTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up':
        return <TrendingUp className="h-3 w-3 text-green-400" />;
      case 'down':
        return <ChevronDown className="h-3 w-3 text-red-400" />;
      default:
        return <div className="h-3 w-3 bg-gray-400 rounded-full" />;
    }
  };

  return (
    <Card className="bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl border-pink-200/50 dark:border-pink-500/20 shadow-xl">
      <CardHeader>
        <CardTitle className="text-2xl bg-gradient-to-r from-pink-600 via-rose-500 to-purple-600 dark:from-pink-400 dark:via-rose-400 dark:to-purple-400 bg-clip-text text-transparent">
          Reddit Communities Database
        </CardTitle>
        <p className="text-sm text-gray-600 dark:text-gray-300">
          100+ communities with success probability scoring, growth trends, and intelligent recommendations
        </p>
@@ -348,51 +354,51 @@ export function RedditCommunities() {
                <TableHead className="text-purple-300">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredCommunities.map((community) => (
                <React.Fragment key={community.id}>
                  <TableRow 
                    className="border-purple-500/10 hover:bg-purple-500/5 cursor-pointer"
                    onClick={() => setExpandedRow(expandedRow === community.id ? null : community.id)}
                  >
                    <TableCell>
                      <div>
                        <p className="font-medium text-white">{community.name}</p>
                        <p className="text-xs text-gray-400">{community.displayName}</p>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-1">
                        <Users className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-300">{formatNumber(community.members)}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-1">
                        <span className={`font-medium ${getSuccessProbabilityColor(community.successProbability)}`}>
                          {community.successProbability}%
                          {community.successProbability != null ? `${community.successProbability}%` : '—'}
                        </span>
                        {getGrowthTrendIcon(community.growthTrend)}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-1">
                        <TrendingUp className="h-4 w-4 text-green-400" />
                        <span className="text-gray-300">{community.engagementRate}%</span>
                      </div>
                    </TableCell>
                    <TableCell>{getCategoryBadge(community.category)}</TableCell>
                    <TableCell>
                      {community.verificationRequired ? (
                        <CheckCircle className="h-4 w-4 text-green-400" />
                      ) : (
                        <XCircle className="h-4 w-4 text-gray-400" />
                      )}
                    </TableCell>
                    <TableCell>{getPromotionBadge(community.promotionAllowed)}</TableCell>
                    <TableCell>
                      <div className="text-xs text-gray-400">
                        {(() => {
                          const limits = community.postingLimits as PostingLimits | null;
                          const postsPerDay = limits?.perDay ?? limits?.daily;
                          const cooldown = limits?.cooldownHours;
@@ -406,105 +412,110 @@ export function RedditCommunities() {
                        })()}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Button 
                        size="sm" 
                        variant="ghost"
                        className="text-purple-400 hover:text-purple-300"
                      >
                        {expandedRow === community.id ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                      </Button>
                    </TableCell>
                  </TableRow>
                  
                  {/* Expanded Details Row */}
                  {expandedRow === community.id && (
                    <TableRow>
                      <TableCell colSpan={8} className="bg-gray-800/30">
                        <div className="p-4 space-y-4">
                          <p className="text-sm text-gray-300">{community.description}</p>
                          
                          <div className="grid md:grid-cols-4 gap-4">
                            <div>
                              <h4 className="text-sm font-semibold text-purple-300 mb-2">Requirements</h4>
                              <div className="space-y-1 text-xs text-gray-400">
                                {community.rules.minKarma && <p>• Min Karma: {community.rules.minKarma}</p>}
                                {community.rules.minAccountAge && <p>• Min Account Age: {community.rules.minAccountAge} days</p>}
                                <p>• Watermarks: {community.rules.watermarksAllowed ? '✓ Allowed' : '✗ Not Allowed'}</p>
                                <p>• Selling: {(() => {
                                  const policy = community.rules?.sellingAllowed;
                                  switch (policy) {
                                    case 'allowed': return '✓ Allowed';
                                    case 'limited': return '⚠ Limited';
                                    case 'not_allowed': return '✗ Not Allowed';
                                    case 'unknown': return '? Unknown';
                                    default: return '? Unknown';
                                  }
                                })()}</p>
                                {community.rules?.eligibility?.minKarma && (
                                  <p>• Min Karma: {community.rules.eligibility.minKarma}</p>
                                )}
                                {community.rules?.eligibility?.minAccountAgeDays && (
                                  <p>• Min Account Age: {community.rules.eligibility.minAccountAgeDays} days</p>
                                )}
                                <p>
                                  • Watermarks:{' '}
                                  {community.rules?.content?.watermarksAllowed === true && '✓ Allowed'}
                                  {community.rules?.content?.watermarksAllowed === false && '✗ Not Allowed'}
                                  {community.rules?.content?.watermarksAllowed == null && 'Unknown'}
                                </p>
                                <p>• Selling: {getSellingPolicyBadge(community.rules?.content?.sellingPolicy)}</p>
                              </div>
                            </div>

                            <div>
                              <h4 className="text-sm font-semibold text-purple-300 mb-2">Intelligence</h4>
                              <div className="space-y-1 text-xs text-gray-400">
                                <p>• Success Rate: <span className={getSuccessProbabilityColor(community.successProbability)}>{community.successProbability}%</span></p>
                                <p>
                                  • Success Rate:{' '}
                                  <span className={getSuccessProbabilityColor(community.successProbability)}>
                                    {community.successProbability != null ? `${community.successProbability}%` : '—'}
                                  </span>
                                </p>
                                <p>• Competition: <span className={community.competitionLevel === 'low' ? 'text-green-400' : community.competitionLevel === 'medium' ? 'text-yellow-400' : 'text-red-400'}>{community.competitionLevel}</span></p>
                                <p>• Growth: <span className={community.growthTrend === 'up' ? 'text-green-400' : community.growthTrend === 'stable' ? 'text-yellow-400' : 'text-red-400'}>{getGrowthTrendLabel(community.growthTrend)}</span></p>
                                <p>• Mod Activity: <span className={community.modActivity === 'high' ? 'text-red-400' : community.modActivity === 'medium' ? 'text-yellow-400' : 'text-green-400'}>{community.modActivity}</span></p>
                              </div>
                            </div>
                            
                            <div>
                              <h4 className="text-sm font-semibold text-purple-300 mb-2">Best Posting Times</h4>
                              <div className="space-y-1 text-xs text-gray-400">
                                {community.bestPostingTimes.slice(0, 3).map((time: string, idx: number) => (
                                {(community.bestPostingTimes ?? []).slice(0, 3).map((time: string, idx: number) => (
                                  <p key={idx}>• {time}</p>
                                ))}
                              </div>
                            </div>
                            
                            <div>
                              <h4 className="text-sm font-semibold text-purple-300 mb-2">Performance</h4>
                              <div className="space-y-1 text-xs text-gray-400">
                                <p>• Avg Upvotes: {community.averageUpvotes.toLocaleString()}</p>
                                <p>• Avg Upvotes: {community.averageUpvotes != null ? community.averageUpvotes.toLocaleString() : '—'}</p>
                                <p>• Engagement Rate: {community.engagementRate}%</p>
                                <p>• Total Members: {community.members.toLocaleString()}</p>
                              </div>
                            </div>
                          </div>

                          {/* Rules and Tags */}
                          <div className="grid md:grid-cols-2 gap-4 mt-4">
                            {(community.rules.titleRules || community.rules.contentRules) && (
                            {((community.rules?.content?.titleGuidelines?.length ?? 0) > 0 || (community.rules?.content?.contentGuidelines?.length ?? 0) > 0) && (
                              <div>
                                <h4 className="text-sm font-semibold text-purple-300 mb-2">Community Rules</h4>
                                <div className="space-y-1 text-xs text-gray-400">
                                  {community.rules.titleRules && community.rules.titleRules.map((rule: string, idx: number) => (
                                  {community.rules?.content?.titleGuidelines?.map((rule: string, idx: number) => (
                                    <p key={idx}>• Title: {rule}</p>
                                  ))}
                                  {community.rules.contentRules && community.rules.contentRules.map((rule: string, idx: number) => (
                                  {community.rules?.content?.contentGuidelines?.map((rule: string, idx: number) => (
                                    <p key={idx}>• Content: {rule}</p>
                                  ))}
                                </div>
                              </div>
                            )}

                            {community.tags && community.tags.length > 0 && (
                              <div>
                                <h4 className="text-sm font-semibold text-purple-300 mb-2">Tags</h4>
                                <div className="flex flex-wrap gap-1">
                                  {community.tags.map((tag: string, idx: number) => (
                                    <Badge key={idx} className="bg-gray-700/50 text-gray-300 text-xs">
                                      {tag}
                                    </Badge>
                                  ))}
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </TableCell>
                    </TableRow>
                  )}
                </React.Fragment>
              ))}
client/src/hooks/use-admin-communities.ts
+24
-21

import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import type { RedditCommunitySellingPolicy } from '@shared/schema';
import type {
  RedditCommunityRuleSet,
  RedditCommunitySellingPolicy,
  PromotionAllowed,
  RedditCommunityEligibilityRules,
  RedditCommunityContentRules,
  RedditCommunityPostingRules,
  ModActivity,
  CompetitionLevel as SharedCompetitionLevel
} from '@shared/schema';
import { 
  type GrowthTrend,
  GROWTH_TRENDS,
  GROWTH_TREND_LABELS,
  getGrowthTrendLabel
} from '@shared/growth-trends';

export type PromotionPolicy = 'yes' | 'no' | 'limited' | 'subtle' | 'strict' | 'unknown';
export type PromotionPolicy = PromotionAllowed;
// GrowthTrend type imported from @shared/growth-trends - uses canonical values: 'up' | 'stable' | 'down'
export type ActivityLevel = 'low' | 'medium' | 'high' | 'unknown';
export type CompetitionLevel = 'low' | 'medium' | 'high' | 'unknown';
export type ActivityLevel = ModActivity;
export type CompetitionLevel = SharedCompetitionLevel;

// Re-export growth trend constants and labels for use by components
export { GROWTH_TRENDS, GROWTH_TREND_LABELS, getGrowthTrendLabel };

export interface CommunityRules {
  minKarma?: number;
  minAccountAge?: number;
  watermarksAllowed?: boolean;
  sellingAllowed?: RedditCommunitySellingPolicy;
  titleRules?: string[];
  contentRules?: string[];
  linkRestrictions?: string[];
  verificationRequired?: boolean;
  requiresApproval?: boolean;
  nsfwRequired?: boolean;
  maxPostsPerDay?: number;
  cooldownHours?: number;
export type CommunityRules = RedditCommunityRuleSet;

export interface CommunityRulePayload {
  eligibility?: Partial<RedditCommunityEligibilityRules> | null;
  content?: Partial<RedditCommunityContentRules> | null;
  posting?: Partial<RedditCommunityPostingRules> | null;
  notes?: string | null;
}

export interface PostingLimits {
  perDay?: number;
  perWeek?: number;
  cooldownHours?: number;
}

export interface AdminCommunity {
  id: string;
  name: string;
  displayName: string;
  category: string;
  members: number;
  engagementRate: number;
  verificationRequired: boolean;
  promotionAllowed: PromotionPolicy;
  postingLimits?: PostingLimits | null;
  rules?: CommunityRules | null;
  bestPostingTimes?: string[] | null;
  averageUpvotes?: number | null;
  successProbability?: number | null;
  growthTrend?: GrowthTrend | null;
  modActivity?: ActivityLevel | null;
  modActivity?: ActivityLevel;
  description?: string | null;
  tags?: string[] | null;
  competitionLevel?: CompetitionLevel | null;
  competitionLevel?: CompetitionLevel;
}

export interface CommunityPayload {
  id?: string;
  name: string;
  displayName: string;
  category: string;
  members: number;
  engagementRate: number;
  verificationRequired: boolean;
  promotionAllowed: PromotionPolicy;
  postingLimits?: PostingLimits | null;
  rules?: Partial<CommunityRules> | null;
  rules?: CommunityRulePayload | null;
  bestPostingTimes?: string[] | null;
  averageUpvotes?: number | null;
  successProbability?: number | null;
  growthTrend?: GrowthTrend;
  modActivity?: ActivityLevel;
  description?: string | null;
  tags?: string[] | null;
  competitionLevel?: CompetitionLevel;
  competitionLevel?: CompetitionLevel | null;
}

export interface CommunityFilters {
  search?: string;
  category?: string;
  promotionAllowed?: PromotionPolicy | 'all';
  verificationRequired?: 'all' | 'required' | 'not-required';
}

export function useAdminCommunities(filters?: CommunityFilters) {
  const queryParams = new URLSearchParams();

  if (filters?.search) {
    queryParams.set('search', filters.search);
  }
  if (filters?.category && filters.category !== 'all') {
    queryParams.set('category', filters.category);
  }
  if (filters?.promotionAllowed && filters.promotionAllowed !== 'all') {
    queryParams.set('promotionAllowed', filters.promotionAllowed);
  }
  if (filters?.verificationRequired && filters.verificationRequired !== 'all') {
    queryParams.set('verificationRequired', filters.verificationRequired === 'required' ? 'true' : 'false');
  }

client/src/pages/__tests__/reddit-posting.test.tsx
+71
-14

import React from 'react';
import { act } from 'react';
import { createRoot } from 'react-dom/client';
import { describe, expect, it, beforeEach, afterEach, vi } from 'vitest';

const mockUseQuery = vi.fn();
const mockUseMutation = vi.fn();
const mockInvalidateQueries = vi.fn();
const mockSetQueryData = vi.fn();
const mockApiRequest = vi.fn(async () => ({ json: async () => ({}) }));

vi.mock('@tanstack/react-query', async () => {
  const actual = await vi.importActual<typeof import('@tanstack/react-query')>(
    '@tanstack/react-query'
  );

  return {
    ...actual,
    useQuery: (options: any) => mockUseQuery(options),
    useQuery: (options: unknown) => mockUseQuery(options),
    useMutation: () => mockUseMutation(),
    useQueryClient: () => ({
      invalidateQueries: mockInvalidateQueries,
      setQueryData: mockSetQueryData,
    }),
  };
});

vi.mock('@/hooks/use-toast', () => ({
  useToast: () => ({ toast: vi.fn() }),
}));

vi.mock('@/hooks/useAuth', () => ({
  useAuth: () => ({ isAuthenticated: true, user: { id: 1 } }),
}));

vi.mock('@/components/MediaLibrarySelector', () => ({
  MediaLibrarySelector: () => <div data-testid="media-selector-mock" />,
}));

vi.mock('@/components/auth-modal', () => ({
  AuthModal: () => null,
}));

vi.mock('@/lib/queryClient', () => ({
@@ -96,97 +96,154 @@ describe('RedditPosting community picker', () => {
      {
        id: 1,
        username: 'creator',
        isActive: true,
        connectedAt: '2023-01-01T00:00:00.000Z',
        karma: 2400,
        verified: true,
        accountAgeDays: 400,
      },
    ];

    const communities = [
      {
        id: 'creatorclub',
        name: 'r/CreatorClub',
        displayName: 'Creator Club',
        members: 120000,
        engagementRate: 12,
        category: 'general',
        promotionAllowed: 'yes',
        bestPostingTimes: ['morning'],
        averageUpvotes: 220,
        successProbability: 78,
        description: 'High-signal creator collabs.',
        rules: {
          minKarma: 500,
          minAccountAge: 60,
          sellingAllowed: 'allowed',
          watermarksAllowed: true,
          eligibility: {
            minKarma: 500,
            minAccountAgeDays: 60,
            verificationRequired: false,
            requiresApproval: false,
          },
          content: {
            sellingPolicy: 'allowed',
            watermarksAllowed: true,
            promotionalLinks: null,
            requiresOriginalContent: false,
            nsfwRequired: false,
            titleGuidelines: [],
            contentGuidelines: [],
            linkRestrictions: [],
            bannedContent: [],
            formattingRequirements: [],
          },
          posting: {
            maxPostsPerDay: null,
            cooldownHours: null,
          },
          notes: null,
        },
      },
      {
        id: 'prohub',
        name: 'r/ProHub',
        displayName: 'Pro Hub',
        members: 95000,
        engagementRate: 10,
        category: 'general',
        promotionAllowed: 'limited',
        bestPostingTimes: ['afternoon'],
        averageUpvotes: 180,
        successProbability: 70,
        description: 'Advanced strategy discussions.',
        rules: {
          minKarma: 800,
          minAccountAge: 90,
          sellingAllowed: 'allowed',
          watermarksAllowed: false,
          eligibility: {
            minKarma: 800,
            minAccountAgeDays: 90,
            verificationRequired: false,
            requiresApproval: false,
          },
          content: {
            sellingPolicy: 'allowed',
            watermarksAllowed: false,
            promotionalLinks: null,
            requiresOriginalContent: false,
            nsfwRequired: false,
            titleGuidelines: [],
            contentGuidelines: [],
            linkRestrictions: [],
            bannedContent: [],
            formattingRequirements: [],
          },
          posting: {
            maxPostsPerDay: null,
            cooldownHours: null,
          },
          notes: null,
        },
      },
      {
        id: 'gatedelite',
        name: 'r/GatedElite',
        displayName: 'Gated Elite',
        members: 510000,
        engagementRate: 15,
        category: 'premium',
        promotionAllowed: 'limited',
        bestPostingTimes: ['evening'],
        averageUpvotes: 410,
        successProbability: 82,
        description: 'Invitation-only audience.',
        rules: {
          minKarma: 5000,
          minAccountAge: 365,
          sellingAllowed: 'not_allowed',
          watermarksAllowed: false,
          eligibility: {
            minKarma: 5000,
            minAccountAgeDays: 365,
            verificationRequired: false,
            requiresApproval: false,
          },
          content: {
            sellingPolicy: 'not_allowed',
            watermarksAllowed: false,
            promotionalLinks: null,
            requiresOriginalContent: false,
            nsfwRequired: false,
            titleGuidelines: [],
            contentGuidelines: [],
            linkRestrictions: [],
            bannedContent: [],
            formattingRequirements: [],
          },
          posting: {
            maxPostsPerDay: null,
            cooldownHours: null,
          },
          notes: null,
        },
      },
    ];

    mockUseQuery.mockImplementation(({ queryKey }: any) => {
    mockUseQuery.mockImplementation(({ queryKey }: { queryKey: unknown }) => {
      const key = Array.isArray(queryKey) ? queryKey[0] : queryKey;
      switch (key) {
        case '/api/reddit/accounts':
          return { data: accounts, isLoading: false, error: null };
        case '/api/reddit/communities':
          return { data: communities, isLoading: false, error: null };
        case '/api/media':
          return { data: [], isLoading: false, error: null };
        default:
          return { data: undefined, isLoading: false, error: null };
      }
    });

    mockUseMutation.mockImplementation(() => ({
      mutate: () => undefined,
      mutateAsync: async () => undefined,
      isPending: false,
      reset: () => undefined,
    }));

    const { default: RedditPostingPage } = await import('../reddit-posting');

    const container = document.createElement('div');
    document.body.appendChild(container);
    const root = createRoot(container);
client/src/pages/reddit-posting.tsx
+97
-69

@@ -31,109 +31,83 @@ import {
  Eye,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Link as LinkIcon,
  Globe,
  Settings,
  Clock,
  BarChart3,
  Users,
  TrendingUp,
  Zap,
  Shield,
  FileText,
  TestTube,
  ExternalLink,
  ImageIcon,
  Images,
  LogIn,
  UserCheck,
  ChevronsUpDown,
  RefreshCcw,
  Loader2
} from 'lucide-react';
import { MediaLibrarySelector } from '@/components/MediaLibrarySelector';
import type { 
  ShadowbanStatusType, 
  ShadowbanCheckApiResponse,
  RedditCommunitySellingPolicy 
import type {
  ShadowbanStatusType,
  ShadowbanCheckApiResponse
} from '@shared/schema';
import type { SubredditCommunity, ContentValidationResponse } from '@/types/reddit';

function isApiError(error: unknown): error is ApiError {
  return error instanceof Error && 'status' in error && typeof (error as { status?: unknown }).status === 'number';
}

interface RedditAccount {
  id: number;
  username: string;
  isActive: boolean;
  connectedAt: string;
  karma: number;
  verified: boolean;
  accountAgeDays?: number;
}

interface SubredditCommunity {
  id: string;
  name: string;
  displayName: string;
  members: number;
  engagementRate: number;
  category: string;
  promotionAllowed: string;
  bestPostingTimes: string[];
  averageUpvotes: number;
  successProbability: number;
  description: string;
  rules?: {
    minKarma?: number;
    minAccountAge?: number;
    watermarksAllowed?: boolean;
    sellingAllowed?: RedditCommunitySellingPolicy;
    titleRules?: string[];
    contentRules?: string[];
  };
}

// API response interfaces
interface ConnectionTestResponse {
  connected: boolean;
  profile?: {
    username: string;
    karma: number;
  };
}

interface ConnectRedditResponse {
  authUrl: string;
}

interface ContentValidationResponse {
  policyState: 'allow' | 'warn' | 'block';
}

interface PostSubmissionResponse {
  success: boolean;
  error?: string;
}

interface SchedulePostResponse {
  success: boolean;
  postJobId: number;
  scheduledAt: string;
}

interface MediaAsset {
  id: number;
  filename: string;
  signedUrl?: string;
  downloadUrl?: string;
  createdAt: string;
}

interface PostData {
  subreddit: string;
  title: string;
  nsfw: boolean;
  spoiler: boolean;
  postType: 'text' | 'link' | 'image' | 'gallery';
@@ -167,77 +141,80 @@ function checkCommunityEligibility(
  const reasons: string[] = [];
  let isEligible = true;

  const badges = {
    karmaOk: true,
    ageOk: true,
    sellingOk: true,
    watermarkOk: true,
  };

  if (!account) {
    reasons.push('Account not connected');
    return {
      community,
      isEligible: false,
      reasons,
      badges: {
        karmaOk: false,
        ageOk: false,
        sellingOk: false,
        watermarkOk: false,
      },
    };
  }

  if (community.rules?.minKarma && account.karma < community.rules.minKarma) {
    reasons.push(`Requires ${community.rules.minKarma} karma (you have ${account.karma})`);
  const eligibilityRules = community.rules?.eligibility;
  const contentRules = community.rules?.content;

  if (eligibilityRules?.minKarma && account.karma < eligibilityRules.minKarma) {
    reasons.push(`Requires ${eligibilityRules.minKarma} karma (you have ${account.karma})`);
    isEligible = false;
    badges.karmaOk = false;
  }

  if (community.rules?.minAccountAge && account.accountAgeDays) {
    if (account.accountAgeDays < community.rules.minAccountAge) {
      reasons.push(`Account must be ${community.rules.minAccountAge} days old (yours is ${account.accountAgeDays} days)`);
  if (eligibilityRules?.minAccountAgeDays && account.accountAgeDays) {
    if (account.accountAgeDays < eligibilityRules.minAccountAgeDays) {
      reasons.push(`Account must be ${eligibilityRules.minAccountAgeDays} days old (yours is ${account.accountAgeDays} days)`);
      isEligible = false;
      badges.ageOk = false;
    }
  }

  // Include selling and watermark restrictions in eligibility
  if (community.rules?.sellingAllowed === 'not_allowed') {
  if (contentRules?.sellingPolicy === 'not_allowed') {
    badges.sellingOk = false;
    reasons.push('Selling not allowed in this community');
    isEligible = false;
  }
  
  if (community.rules?.sellingAllowed === 'unknown') {

  if (contentRules?.sellingPolicy === 'unknown') {
    badges.sellingOk = false;
    reasons.push('Selling policy unclear - check community rules');
  }

  if (community.rules?.watermarksAllowed === false) {
  if (contentRules?.watermarksAllowed === false) {
    badges.watermarkOk = false;
    reasons.push('Watermarks not allowed in this community');
    isEligible = false;
  }

  return {
    community,
    isEligible,
    reasons,
    badges,
  };
}

export default function RedditPostingPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { isAuthenticated, user } = useAuth();
  
  // Form state
  const [subreddit, setSubreddit] = useState('');
  const [communityPickerOpen, setCommunityPickerOpen] = useState(false);
  const [title, setTitle] = useState('');
  const [body, setBody] = useState('');
  const [url, setUrl] = useState('');
  const [nsfw, setNsfw] = useState(false);
@@ -350,52 +327,52 @@ export default function RedditPostingPage() {
    : shadowbanStatusLevel === 'clear'
      ? 'border-green-200 text-green-700 hover:bg-green-50'
      : 'border-blue-200 text-blue-700 hover:bg-blue-50';

  const lastShadowbanCheck = shadowbanStatus?.evidence.checkedAt
    ? new Date(shadowbanStatus.evidence.checkedAt).toLocaleString()
    : undefined;

  const selectedAssets = mediaAssets.filter((asset) => selectedMediaIds.includes(asset.id));

  // Sort communities by eligibility and karma requirements
  const sortedCommunities = useMemo(() => {
    if (!communities || communities.length === 0) return [];

    const communitiesWithEligibility = communities.map((community) => 
      checkCommunityEligibility(community, activeAccount)
    );

    // Sort: eligible first, then by karma requirement (ascending)
    return communitiesWithEligibility.sort((a, b) => {
      if (a.isEligible !== b.isEligible) {
        return a.isEligible ? -1 : 1; // Eligible first
      }
      
      // Within same eligibility, sort by karma requirement
      const aKarma = a.community.rules?.minKarma || 0;
      const bKarma = b.community.rules?.minKarma || 0;
      const aKarma = a.community.rules?.eligibility?.minKarma || 0;
      const bKarma = b.community.rules?.eligibility?.minKarma || 0;
      return aKarma - bKarma;
    });
  }, [communities, activeAccount]);

  // Set default community to first eligible one (only if no selection made yet)
  useEffect(() => {
    if (sortedCommunities.length > 0 && !subreddit) {
      const firstEligible = sortedCommunities.find(sc => sc.isEligible);
      if (firstEligible) {
        setSubreddit(firstEligible.community.id);
      }
    }
  }, [sortedCommunities]); // Remove subreddit dependency to prevent fighting user choice

  // Test Reddit connection
  const { mutate: testConnection, isPending: testingConnection } = useMutation({
    mutationFn: async () => {
      const response = await apiRequest('POST', '/api/reddit/test');
      return response.json();
    },
    onSuccess: (data: ConnectionTestResponse) => {
      void queryClient.invalidateQueries({ queryKey: ['/api/reddit/shadowban-status'] });
      toast({
        title: "✅ Connection Test",
        description: data.connected ? 
@@ -416,52 +393,56 @@ export default function RedditPostingPage() {
  // Connect Reddit account
  const { mutate: connectReddit, isPending: connectingReddit } = useMutation({
    mutationFn: async () => {
      const response = await apiRequest('GET', '/api/reddit/connect');
      return response.json();
    },
    onSuccess: (data: ConnectRedditResponse) => {
      if (data.authUrl) {
        window.open(data.authUrl, '_blank');
        toast({
          title: "🔗 Reddit Authorization",
          description: "Complete the authorization in the popup window"
        });
      }
    },
    onError: (error: Error) => {
      toast({
        title: "❌ Connection Failed",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  // Content policy validation
  const { mutate: validateContent, isPending: validating, data: validation } = useMutation({
    mutationFn: async (data: { subreddit: string; title: string; body: string; hasLink: boolean }) => {
  const { mutate: validateContent, isPending: validating, data: validation } = useMutation<
    ContentValidationResponse,
    Error,
    { subreddit: string; title: string; body: string; hasLink: boolean }
  >({
    mutationFn: async (data) => {
      const response = await apiRequest('POST', '/api/preview', data);
      return response.json();
    },
    onSuccess: (data: ContentValidationResponse) => {
      toast({
        title: "🔍 Content Validated",
        description: `Policy check: ${data.policyState}`,
        variant: data.policyState === 'block' ? 'destructive' : 'default'
      });
    }
  });

  // Submit post
  const { mutate: submitPost, isPending: submitting } = useMutation({
    mutationFn: async (data: PostData) => {
      const response = await apiRequest('POST', '/api/reddit/submit', data);
      return response.json();
    },
    onSuccess: (data: PostSubmissionResponse) => {
      if (data.success) {
        toast({
          title: "🎉 Post Published!",
          description: `Successfully posted to r/${subreddit}`,
          variant: "default"
        });
@@ -538,50 +519,58 @@ export default function RedditPostingPage() {
        description: fallbackMessage,
        variant: "destructive",
      });
    }
  });

  // Handle content validation
  const handleValidateContent = () => {
    if (!subreddit || !title) {
      toast({
        title: "⚠️ Missing Required Fields",
        description: "Please enter subreddit and title",
        variant: "destructive"
      });
      return;
    }

    validateContent({
      subreddit,
      title,
      body,
      hasLink: postType === 'link' && !!url
    });
  };

  const normalizedValidationState = validation
    ? validation.policyState === 'allow'
      ? 'pass'
      : validation.policyState
    : undefined;

  const validationWarnings = validation?.warnings ?? [];

  // Handle post submission - Enhanced for multiple post types
  const handleSubmitPost = async () => {
    if (!subreddit || !title) {
      toast({
        title: "⚠️ Missing Required Fields",
        description: "Please enter subreddit and title",
        variant: "destructive"
      });
      return;
    }

    const postData: PostData = {
      subreddit,
      title,
      nsfw,
      spoiler,
      postType
    };

    // Handle different post types
    if (postType === 'image' && imageFile) {
      const reader = new FileReader();
      reader.onloadend = async () => {
        postData.imageData = reader.result as string | undefined;
        submitPost(postData);
@@ -619,53 +608,56 @@ export default function RedditPostingPage() {
      postData.body = body;
      submitPost(postData);
    }
  };

  // Handle post scheduling
  const handleSchedulePost = () => {
    if (!subreddit || !title) {
      toast({
        title: "⚠️ Missing Required Fields",
        description: "Please enter subreddit and title",
        variant: "destructive"
      });
      return;
    }

    schedulePost({
      subreddit,
      title,
      body,
      scheduledAt: scheduledAt || undefined
    });
  };

  // Find community data for selected subreddit (normalized case-insensitive matching)
  const selectedCommunity = communities.find((c) => 
  const selectedCommunity = communities.find((c) =>
    c.id.toLowerCase() === subreddit.toLowerCase()
  );
  const selectedRules = selectedCommunity?.rules;
  const selectedEligibility = selectedRules?.eligibility;
  const selectedContentRules = selectedRules?.content;

  return (
    <div className="min-h-screen bg-gradient-to-br from-rose-50 to-pink-100 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        
        {/* Header */}
        <Card className="bg-white/90 backdrop-blur-sm border-pink-200 shadow-xl">
          <CardHeader>
            <div className="flex items-center gap-3">
              <div className="p-2 bg-orange-500 rounded-lg">
                <Globe className="h-6 w-6 text-white" />
              </div>
              <div>
                <CardTitle className="text-2xl bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">
                  Reddit Posting Hub
                </CardTitle>
                <CardDescription className="text-gray-600">
                  Create, validate, and publish content to Reddit communities with intelligent optimization
                </CardDescription>
              </div>
            </div>
          </CardHeader>
        </Card>

        <div className="grid lg:grid-cols-3 gap-6">
@@ -1018,98 +1010,112 @@ export default function RedditPostingPage() {
                          {eligibility.badges.karmaOk ? (
                            <Badge variant="secondary" className="text-green-700 bg-green-50 border-green-200">
                              <CheckCircle className="h-3 w-3 mr-1" />
                              Karma OK
                            </Badge>
                          ) : (
                            <Badge variant="destructive" className="text-red-700 bg-red-50 border-red-200">
                              <XCircle className="h-3 w-3 mr-1" />
                              Karma Required
                            </Badge>
                          )}
                          
                          {eligibility.badges.ageOk ? (
                            <Badge variant="secondary" className="text-green-700 bg-green-50 border-green-200">
                              <CheckCircle className="h-3 w-3 mr-1" />
                              Age OK
                            </Badge>
                          ) : (
                            <Badge variant="destructive" className="text-red-700 bg-red-50 border-red-200">
                              <XCircle className="h-3 w-3 mr-1" />
                              Age Required
                            </Badge>
                          )}
                          
                          {(() => {
                            const policy = selectedCommunity.rules?.sellingAllowed;
                            const policy = selectedContentRules?.sellingPolicy;
                            if (policy === 'allowed') {
                              return (
                                <Badge variant="secondary" className="text-green-700 bg-green-50 border-green-200">
                                  <CheckCircle className="h-3 w-3 mr-1" />
                                  Selling OK
                                </Badge>
                              );
                            } else if (policy === 'limited') {
                              return (
                                <Badge variant="outline" className="text-yellow-700 bg-yellow-50 border-yellow-200">
                                  <AlertTriangle className="h-3 w-3 mr-1" />
                                  Limited Selling
                                </Badge>
                              );
                            } else if (policy === 'not_allowed') {
                              return (
                                <Badge variant="outline" className="text-red-700 bg-red-50 border-red-200">
                                  <XCircle className="h-3 w-3 mr-1" />
                                  No Selling
                                </Badge>
                              );
                            } else {
                              return (
                                <Badge variant="outline" className="text-gray-700 bg-gray-50 border-gray-200">
                                  <AlertTriangle className="h-3 w-3 mr-1" />
                                  Selling Unknown
                                </Badge>
                              );
                            }
                          })()}
                          
                          {selectedCommunity.rules?.watermarksAllowed !== false ? (
                          {selectedContentRules?.watermarksAllowed !== false ? (
                            <Badge variant="secondary" className="text-green-700 bg-green-50 border-green-200">
                              <CheckCircle className="h-3 w-3 mr-1" />
                              Watermarks OK
                            </Badge>
                          ) : (
                            <Badge variant="outline" className="text-orange-700 bg-orange-50 border-orange-200">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              No Watermarks
                            </Badge>
                          )}
                        </div>
                        
                        <div className="grid grid-cols-2 gap-2 text-xs">
                          <div>Success Rate: <span className="font-medium text-green-600">{selectedCommunity.successProbability}%</span></div>
                          <div>Avg Upvotes: <span className="font-medium text-blue-600">{selectedCommunity.averageUpvotes}</span></div>
                          <div>
                            Success Rate:{' '}
                            <span className="font-medium text-green-600">
                              {selectedCommunity.successProbability != null
                                ? `${selectedCommunity.successProbability}%`
                                : '—'}
                            </span>
                          </div>
                          <div>
                            Avg Upvotes:{' '}
                            <span className="font-medium text-blue-600">
                              {selectedCommunity.averageUpvotes != null
                                ? selectedCommunity.averageUpvotes
                                : '—'}
                            </span>
                          </div>
                        </div>
                      </div>
                    );
                  })()}
                </div>

                {/* Title Input */}
                <div className="space-y-2">
                  <Label htmlFor="title">Title</Label>
                  <Input
                    id="title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    maxLength={300}
                    data-testid="input-title"
                  />
                  <div className="text-xs text-gray-500 text-right">{title.length}/300</div>
                </div>

                {/* Content Input */}
                {postType === 'image' && (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="image">Select Image</Label>
                      <Input
@@ -1182,112 +1188,118 @@ export default function RedditPostingPage() {
                {/* Post Options */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="nsfw"
                      checked={nsfw}
                      onCheckedChange={setNsfw}
                      data-testid="switch-nsfw"
                    />
                    <Label htmlFor="nsfw" className="text-sm">Mark as NSFW</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="spoiler"
                      checked={spoiler}
                      onCheckedChange={setSpoiler}
                      data-testid="switch-spoiler"
                    />
                    <Label htmlFor="spoiler" className="text-sm">Mark as Spoiler</Label>
                  </div>
                </div>

                {/* Content Validation */}
                {validation && (
                  <div className={`p-4 rounded-lg border ${
                    (validation as any)?.policyState === 'pass' ? 'bg-green-50 border-green-200' :
                    (validation as any)?.policyState === 'warn' ? 'bg-yellow-50 border-yellow-200' :
                    'bg-red-50 border-red-200'
                    normalizedValidationState === 'pass'
                      ? 'bg-green-50 border-green-200'
                      : normalizedValidationState === 'warn'
                        ? 'bg-yellow-50 border-yellow-200'
                        : 'bg-red-50 border-red-200'
                  }`}>
                    <div className="flex items-center gap-2 mb-2">
                      {(validation as any)?.policyState === 'pass' ? (
                      {normalizedValidationState === 'pass' ? (
                        <CheckCircle className="h-5 w-5 text-green-600" />
                      ) : (validation as any)?.policyState === 'warn' ? (
                      ) : normalizedValidationState === 'warn' ? (
                        <AlertTriangle className="h-5 w-5 text-yellow-600" />
                      ) : (
                        <XCircle className="h-5 w-5 text-red-600" />
                      )}
                      <span className={`font-medium ${
                        (validation as any)?.policyState === 'pass' ? 'text-green-800' :
                        (validation as any)?.policyState === 'warn' ? 'text-yellow-800' :
                        'text-red-800'
                        normalizedValidationState === 'pass'
                          ? 'text-green-800'
                          : normalizedValidationState === 'warn'
                            ? 'text-yellow-800'
                            : 'text-red-800'
                      }`}>
                        Policy Check: {((validation as any)?.policyState || 'unknown').toUpperCase()}
                        Policy Check: {(normalizedValidationState ?? 'unknown').toUpperCase()}
                      </span>
                    </div>
                    {(validation as any)?.warnings && (validation as any)?.warnings.length > 0 && (
                    {validationWarnings.length > 0 && (
                      <ul className={`text-sm space-y-1 ${
                        (validation as any)?.policyState === 'pass' ? 'text-green-700' :
                        (validation as any)?.policyState === 'warn' ? 'text-yellow-700' :
                        'text-red-700'
                        normalizedValidationState === 'pass'
                          ? 'text-green-700'
                          : normalizedValidationState === 'warn'
                            ? 'text-yellow-700'
                            : 'text-red-700'
                      }`}>
                        {(validation as any)?.warnings.map((warning: string, index: number) => (
                        {validationWarnings.map((warning: string, index: number) => (
                          <li key={index}>• {warning}</li>
                        ))}
                      </ul>
                    )}
                  </div>
                )}

                {/* Rate Limiting Warning */}
                <Alert className="bg-yellow-50 border-yellow-200">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <AlertDescription className="text-yellow-800">
                    <strong>Rate Limit Notice:</strong> Reddit enforces a 10-15 minute cooldown between posts. 
                    Wait between submissions to avoid restrictions.
                  </AlertDescription>
                </Alert>

                {/* Action Buttons */}
                <div className="flex gap-3">
                  <Button
                    onClick={handleValidateContent}
                    disabled={validating || !subreddit || !title}
                    variant="outline"
                    className="flex-1"
                    data-testid="button-validate"
                  >
                    {validating ? (
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-gray-500 border-t-transparent mr-2" />
                    ) : (
                      <Shield className="h-4 w-4 mr-2" />
                    )}
                    Validate Content
                  </Button>
                  <Button
                    onClick={handleSubmitPost}
                    disabled={submitting || !subreddit || !title || (accounts as any[])?.length === 0}
                    disabled={submitting || !subreddit || !title || accounts.length === 0}
                    className="flex-1 bg-orange-500 hover:bg-orange-600"
                    data-testid="button-submit"
                  >
                    {submitting ? (
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2" />
                    ) : (
                      <Send className="h-4 w-4 mr-2" />
                    )}
                    Post Now
                  </Button>
                </div>

                {/* Scheduling Section */}
                <div className="border-t pt-4 space-y-4">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-5 w-5 text-gray-500" />
                    <Label className="text-sm font-medium">Schedule for Later</Label>
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <Input
                        type="datetime-local"
                        value={scheduledAt}
                        onChange={(e) => setScheduledAt(e.target.value)}
                        min={new Date().toISOString().slice(0, 16)}
@@ -1342,66 +1354,82 @@ export default function RedditPostingPage() {
                      <p className="text-blue-600">Members</p>
                    </div>
                    <div className="bg-green-50 p-3 rounded-lg border border-green-200">
                      <TrendingUp className="h-4 w-4 text-green-600 mb-1" />
                      <p className="font-medium text-green-800">{selectedCommunity.engagementRate}%</p>
                      <p className="text-green-600">Engagement</p>
                    </div>
                    <div className="bg-purple-50 p-3 rounded-lg border border-purple-200">
                      <Zap className="h-4 w-4 text-purple-600 mb-1" />
                      <p className="font-medium text-purple-800">{selectedCommunity.successProbability}%</p>
                      <p className="text-purple-600">Success Rate</p>
                    </div>
                    <div className="bg-orange-50 p-3 rounded-lg border border-orange-200">
                      <TrendingUp className="h-4 w-4 text-orange-600 mb-1" />
                      <p className="font-medium text-orange-800">{selectedCommunity.averageUpvotes}</p>
                      <p className="text-orange-600">Avg Upvotes</p>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <h4 className="font-medium text-gray-800 mb-2">Community Rules</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Min Karma:</span>
                          <span className="font-medium">{selectedCommunity.rules.minKarma}</span>
                          <span className="font-medium">{selectedEligibility?.minKarma ?? '—'}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Min Account Age:</span>
                          <span className="font-medium">{selectedCommunity.rules.minAccountAge} days</span>
                          <span className="font-medium">
                            {selectedEligibility?.minAccountAgeDays != null
                              ? `${selectedEligibility.minAccountAgeDays} days`
                              : '—'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Watermarks:</span>
                          <Badge variant={selectedCommunity.rules.watermarksAllowed ? 'default' : 'destructive'} className="text-xs">
                            {selectedCommunity.rules.watermarksAllowed ? 'Allowed' : 'Not Allowed'}
                          </Badge>
                          {selectedContentRules?.watermarksAllowed === true && (
                            <Badge variant="default" className="text-xs">
                              Allowed
                            </Badge>
                          )}
                          {selectedContentRules?.watermarksAllowed === false && (
                            <Badge variant="destructive" className="text-xs">
                              Not Allowed
                            </Badge>
                          )}
                          {selectedContentRules?.watermarksAllowed == null && (
                            <Badge variant="outline" className="text-xs">
                              Unknown
                            </Badge>
                          )}
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Selling:</span>
                          {(() => {
                            const policy = selectedCommunity.rules.sellingAllowed;
                            const policy = selectedContentRules?.sellingPolicy;
                            switch (policy) {
                              case 'allowed':
                                return <Badge variant="default" className="text-xs">Allowed</Badge>;
                              case 'limited':
                                return <Badge variant="secondary" className="text-xs bg-yellow-100 text-yellow-800">Limited</Badge>;
                              case 'not_allowed':
                                return <Badge variant="destructive" className="text-xs">Not Allowed</Badge>;
                              case 'unknown':
                              default:
                                return <Badge variant="outline" className="text-xs bg-gray-100 text-gray-800">Unknown</Badge>;
                            }
                          })()}
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Quick Tips */}
            <Card className="bg-white/90 backdrop-blur-sm border-pink-200 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <Eye className="h-5 w-5" />
client/src/types/reddit.ts
+24
-16

export interface ShadowbanStatusResponse {
  isShadowbanned: boolean;
  statusMessage: string;
  checkedAt: string;
  publicCount: number;
  totalSelfPosts: number;
  hiddenPosts: Array<{
    id: string;
    title: string;
    createdUtc: number;
  }>;
  error?: string;
}

export interface RedditAccount {
  id: number;
  username: string;
  isActive: boolean;
  connectedAt: string;
  karma: number;
  verified: boolean;
  accountAgeDays?: number;
}

import type { RedditCommunitySellingPolicy } from '@shared/schema';
import type {
  PromotionAllowed,
  Category,
  RedditCommunityRuleSet,
  PostingLimits,
  ModActivity,
  CompetitionLevel
} from '@shared/schema';
import type { GrowthTrend } from '@shared/growth-trends';

export interface SubredditCommunity {
  id: string;
  name: string;
  displayName: string;
  members: number;
  engagementRate: number;
  category: string;
  promotionAllowed: string;
  bestPostingTimes: string[];
  averageUpvotes: number;
  successProbability: number;
  description: string;
  rules?: {
    minKarma?: number;
    minAccountAge?: number;
    watermarksAllowed?: boolean;
    sellingAllowed?: RedditCommunitySellingPolicy;
    titleRules?: string[];
    contentRules?: string[];
  };
  category: Category;
  promotionAllowed: PromotionAllowed;
  verificationRequired: boolean;
  postingLimits?: PostingLimits | null;
  rules: RedditCommunityRuleSet;
  bestPostingTimes?: string[];
  averageUpvotes?: number | null;
  successProbability?: number | null;
  growthTrend?: GrowthTrend | null;
  modActivity?: ModActivity | null;
  competitionLevel?: CompetitionLevel | null;
  description?: string | null;
  tags?: string[] | null;
}

export interface ConnectionTestResponse {
  connected: boolean;
  profile?: {
    username: string;
    karma: number;
  };
}

export interface ConnectRedditResponse {
  authUrl: string;
}

export interface ContentValidationResponse {
  policyState: 'allow' | 'warn' | 'block';
  policyState: 'pass' | 'warn' | 'block' | 'allow';
  warnings?: string[];
}

export interface PostSubmissionResponse {
  success: boolean;
  error?: string;
}
server/reddit-communities.ts
+214
-66

import { db } from './db.js';
import {
  redditCommunities,
  subredditRules,
  type RedditCommunity,
  insertRedditCommunitySchema,
  type InsertRedditCommunity,
  type RedditCommunityRuleSet,
  type RedditCommunitySellingPolicy,
  redditCommunityRuleSetSchema,
  createDefaultRules
  createDefaultRules,
  type RedditCommunityEligibilityRules,
  ruleAllowanceSchema,
  redditCommunitySellingPolicySchema
} from '@shared/schema';
import { type GrowthTrend, isValidGrowthTrend, getGrowthTrendLabel } from '@shared/growth-trends';
import { eq, ilike, desc, or } from 'drizzle-orm';
import { lintCaption } from './lib/policy-linter.js';
import { z } from 'zod';

// ==========================================
// ELIGIBILITY TYPES AND INTERFACES
// ==========================================

export interface CommunityEligibilityCriteria {
  karma?: number;
  accountAgeDays?: number;
  verified: boolean;
}

export interface CommunityRules {
  minKarma?: number | null;
  minAccountAge?: number | null;
  verificationRequired?: boolean;
}

export type NormalizedRedditCommunity = Omit<RedditCommunity, 'rules'> & {
  rules: RedditCommunityRuleSet;
};

/**
 * Parse community rules from the database response
 * Handles both legacy column-level rules and new structured rules
 */
export function parseCommunityRules(community: RedditCommunity): CommunityRules {
export function parseCommunityRules(community: RedditCommunity): RedditCommunityEligibilityRules {
  const columnLevelVerification = community.verificationRequired;
  const structuredRules = normalizeRules(community.rules, community.promotionAllowed, community.category);
  

  const eligibility = structuredRules.eligibility;

  return {
    minKarma: structuredRules?.minKarma ?? null,
    minAccountAge: structuredRules?.minAccountAge ?? null,
    verificationRequired: columnLevelVerification || (structuredRules?.verificationRequired ?? false)
    ...eligibility,
    verificationRequired: columnLevelVerification || eligibility.verificationRequired
  };
}

/**
 * Filter communities based on user eligibility criteria
 */
export async function getEligibleCommunitiesForUser(criteria: CommunityEligibilityCriteria): Promise<RedditCommunity[]> {
  // Get all communities
  const allCommunities = await listCommunities();
  
  // Filter based on eligibility criteria
  return allCommunities.filter(community => {
    const rules = parseCommunityRules(community);
    

    // Check minimum karma requirement
    if (rules.minKarma !== null && rules.minKarma !== undefined) {
      if (criteria.karma === undefined || criteria.karma < rules.minKarma) {
        return false;
      }
    }
    

    // Check minimum account age requirement
    if (rules.minAccountAge !== null && rules.minAccountAge !== undefined) {
      if (criteria.accountAgeDays === undefined || criteria.accountAgeDays < rules.minAccountAge) {
    if (rules.minAccountAgeDays !== null && rules.minAccountAgeDays !== undefined) {
      if (criteria.accountAgeDays === undefined || criteria.accountAgeDays < rules.minAccountAgeDays) {
        return false;
      }
    }
    

    // Check verification requirement
    if (rules.verificationRequired && !criteria.verified) {
      return false;
    }
    
    return true;
  });
}

/**
 * Normalize and hydrate community rules from database response
 * Handles backward compatibility with legacy array-based rules
 */
const legacyRuleSchema = z.object({
  minKarma: z.number().nullable().optional(),
  minAccountAge: z.number().nullable().optional(),
  minAccountAgeDays: z.number().nullable().optional(),
  watermarksAllowed: z.boolean().nullable().optional(),
  sellingAllowed: z.union([
    redditCommunitySellingPolicySchema,
    z.enum(['yes', 'no', 'limited']).transform(value =>
      value === 'yes' ? 'allowed' : value === 'no' ? 'not_allowed' : 'limited'
    )
  ]).optional(),
  promotionalLinksAllowed: z.union([ruleAllowanceSchema, z.literal('unknown')]).optional(),
  titleRules: z.array(z.string()).optional(),
  contentRules: z.array(z.string()).optional(),
  bannedContent: z.array(z.string()).optional(),
  linkRestrictions: z.array(z.string()).optional(),
  formattingRequirements: z.array(z.string()).optional(),
  notes: z.string().nullable().optional(),
  verificationRequired: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  requiresOriginalContent: z.boolean().optional(),
  nsfwRequired: z.boolean().optional(),
  maxPostsPerDay: z.number().nullable().optional(),
  cooldownHours: z.number().nullable().optional()
}).passthrough();

const getDefaultRules = (): RedditCommunityRuleSet => {
  if (typeof createDefaultRules === 'function') {
    return createDefaultRules();
  }

  // Fallback when the shared schema module is partially mocked in tests
  return redditCommunityRuleSetSchema.parse({});
};

function coerceNullableNumber(value: unknown): number | null {
  if (typeof value === 'number' && Number.isFinite(value)) {
    return value;
  }
  return null;
}

function coerceBoolean(value: unknown, fallback: boolean): boolean {
  if (typeof value === 'boolean') {
    return value;
  }
  return fallback;
}

function coerceSellingPolicy(value: unknown): RedditCommunitySellingPolicy | undefined {
  if (typeof value !== 'string') {
    return undefined;
  }
  const normalized = value.toLowerCase();
  switch (normalized) {
    case 'allowed':
    case 'yes':
      return 'allowed';
    case 'limited':
      return 'limited';
    case 'not_allowed':
    case 'no':
      return 'not_allowed';
    case 'unknown':
      return 'unknown';
    default:
      return undefined;
  }
}

function coercePromotionalLinks(value: unknown): RuleAllowance | null {
  if (typeof value !== 'string') {
    return null;
  }
  if (value === 'unknown') {
    return null;
  }
  return ruleAllowanceSchema.safeParse(value).success ? (value as RuleAllowance) : null;
}

function applySellingPolicy(
  rules: RedditCommunityRuleSet,
  promotionAllowed?: string,
  category?: string
): RedditCommunityRuleSet {
  if (rules.content.sellingPolicy && rules.content.sellingPolicy !== 'unknown') {
    return rules;
  }

  const inferred = inferSellingPolicy(promotionAllowed || 'unknown', category || 'general', rules);
  if (!inferred) {
    return rules;
  }

  return {
    ...rules,
    content: {
      ...rules.content,
      sellingPolicy: inferred
    }
  };
}

export function normalizeRules(rawRules: unknown, promotionAllowed?: string, category?: string): RedditCommunityRuleSet {
  const defaults = getDefaultRules();

  try {
    // Handle null or undefined
    if (!rawRules) {
      return createDefaultRules();
      return applySellingPolicy(defaults, promotionAllowed, category);
    }
    
    // Handle legacy array-based rules (backward compatibility)

    if (Array.isArray(rawRules)) {
      const defaults = createDefaultRules();
      return {
      const contentGuidelines = rawRules.filter((rule): rule is string => typeof rule === 'string');
      const normalized: RedditCommunityRuleSet = {
        ...defaults,
        contentRules: rawRules.filter(rule => typeof rule === 'string'),
        titleRules: defaults?.titleRules || [],
        bannedContent: defaults?.bannedContent || [],
        formattingRequirements: defaults?.formattingRequirements || [],
        sellingAllowed: inferSellingPolicy(promotionAllowed || 'no', category || 'general')
        content: {
          ...defaults.content,
          contentGuidelines
        }
      };
      return applySellingPolicy(normalized, promotionAllowed, category);
    }
    
    // Handle object-based rules

    if (typeof rawRules === 'object') {
      // Try to parse as structured rules
      const parsed = redditCommunityRuleSetSchema.parse(rawRules);
      
      if (parsed) {
        // If sellingAllowed is undefined/null, try to infer from promotion flags
        if (!parsed.sellingAllowed && (promotionAllowed || category)) {
          parsed.sellingAllowed = inferSellingPolicy(promotionAllowed || 'no', category || 'general', parsed);
        }
        
        return parsed;
      const ruleObject = rawRules as Record<string, unknown>;

      if ('eligibility' in ruleObject || 'content' in ruleObject || 'posting' in ruleObject) {
        const parsed = redditCommunityRuleSetSchema.parse(rawRules);
        return applySellingPolicy(parsed, promotionAllowed, category);
      }

      const legacy = legacyRuleSchema.parse(ruleObject);
      const structured: RedditCommunityRuleSet = {
        eligibility: {
          ...defaults.eligibility,
          minKarma: coerceNullableNumber(legacy.minKarma),
          minAccountAgeDays: coerceNullableNumber(legacy.minAccountAgeDays ?? legacy.minAccountAge),
          verificationRequired: coerceBoolean(legacy.verificationRequired, defaults.eligibility.verificationRequired),
          requiresApproval: coerceBoolean(legacy.requiresApproval, defaults.eligibility.requiresApproval)
        },
        content: {
          ...defaults.content,
          watermarksAllowed: typeof legacy.watermarksAllowed === 'boolean' ? legacy.watermarksAllowed : defaults.content.watermarksAllowed,
          sellingPolicy: coerceSellingPolicy(legacy.sellingAllowed) ?? defaults.content.sellingPolicy,
          promotionalLinks: coercePromotionalLinks(legacy.promotionalLinksAllowed),
          requiresOriginalContent: coerceBoolean(legacy.requiresOriginalContent, defaults.content.requiresOriginalContent),
          nsfwRequired: coerceBoolean(legacy.nsfwRequired, defaults.content.nsfwRequired),
          titleGuidelines: Array.isArray(legacy.titleRules) ? legacy.titleRules : defaults.content.titleGuidelines,
          contentGuidelines: Array.isArray(legacy.contentRules) ? legacy.contentRules : defaults.content.contentGuidelines,
          bannedContent: Array.isArray(legacy.bannedContent) ? legacy.bannedContent : defaults.content.bannedContent,
          linkRestrictions: Array.isArray(legacy.linkRestrictions) ? legacy.linkRestrictions : defaults.content.linkRestrictions,
          formattingRequirements: Array.isArray(legacy.formattingRequirements)
            ? legacy.formattingRequirements
            : defaults.content.formattingRequirements
        },
        posting: {
          ...defaults.posting,
          maxPostsPerDay: coerceNullableNumber(legacy.maxPostsPerDay),
          cooldownHours: coerceNullableNumber(legacy.cooldownHours)
        },
        notes: legacy.notes ?? defaults.notes
      };

      return applySellingPolicy(structured, promotionAllowed, category);
    }
    
    return createDefaultRules();

    return applySellingPolicy(defaults, promotionAllowed, category);
  } catch (error) {
    console.warn('Failed to parse community rules, using defaults:', error);
    return createDefaultRules();
    return applySellingPolicy(defaults, promotionAllowed, category);
  }
}

/**
 * Infer selling policy from promotion flags and category
 */
export function inferSellingPolicy(promotionAllowed: string, category: string, rules?: RedditCommunityRuleSet): RedditCommunitySellingPolicy | undefined {
  // If rules already specify selling policy, use it
  if (rules && 'sellingAllowed' in rules && rules.sellingAllowed) {
    return rules.sellingAllowed;
  if (rules?.content?.sellingPolicy && rules.content.sellingPolicy !== 'unknown') {
    return rules.content.sellingPolicy;
  }
  
  // Infer from promotion flags and category
  if (promotionAllowed === 'yes' || category === 'selling') {

  const normalizedPromotion = promotionAllowed?.toLowerCase();

  if (normalizedPromotion === 'yes' || category === 'selling') {
    return 'allowed';
  } else if (promotionAllowed === 'limited' || promotionAllowed === 'subtle') {
  }
  if (normalizedPromotion === 'limited' || normalizedPromotion === 'subtle') {
    return 'limited';
  } else if (promotionAllowed === 'no' || promotionAllowed === 'strict') {
  }
  if (normalizedPromotion === 'no' || normalizedPromotion === 'strict') {
    return 'not_allowed';
  }
  
  return 'unknown';
  if (normalizedPromotion === 'unknown') {
    return 'unknown';
  }

  return undefined;
}

export function normalizeCommunityRecord(community: RedditCommunity): NormalizedRedditCommunity {
  return {
    ...community,
    rules: normalizeRules(community.rules, community.promotionAllowed, community.category)
  };
}

export async function listCommunities(): Promise<NormalizedRedditCommunity[]> {
  const communities = await db.select().from(redditCommunities).orderBy(desc(redditCommunities.members));
  return communities.map(normalizeCommunityRecord);
}

export async function searchCommunities(query: string): Promise<NormalizedRedditCommunity[]> {
  const like = `%${query}%`;
  const communities = await db.select()
    .from(redditCommunities)
    .where(
      or(
        ilike(redditCommunities.name, like),
        ilike(redditCommunities.displayName, like),
        ilike(redditCommunities.description, like)
      )
    );
@@ -199,67 +335,79 @@ export async function deleteCommunity(id: string) {
}

export async function getCommunityInsights(communityId: string): Promise<{
  bestTimes: string[];
  successTips: string[];
  warnings: string[];
}> {
  const [community] = await db
    .select()
    .from(redditCommunities)
    .where(eq(redditCommunities.id, communityId))
    .limit(1);
  if (!community) return { bestTimes: [], successTips: [], warnings: [] };

  // Normalize rules
  const rules = normalizeRules(community.rules, community.promotionAllowed, community.category);
  const successTips: string[] = [];
  const warnings: string[] = [];

  // Basic success indicators
  if ((community.successProbability ?? 0) > 85) successTips.push('High success rate - great choice');
  if (community.growthTrend === 'up') successTips.push(`${getGrowthTrendLabel('up')} community - get in early`);
  if (community.competitionLevel === 'low') successTips.push('Low competition - your content will stand out');

  // Rule-based warnings using structured rules with safe null checks
  if (rules?.verificationRequired) warnings.push('Verification required - complete r/GetVerified');
  if (rules?.sellingAllowed === 'not_allowed') warnings.push('No promotion/selling allowed - content only');
  if (rules?.sellingAllowed === 'limited') warnings.push('Limited promotion allowed - check specific rules');
  if (rules?.sellingAllowed === 'unknown') warnings.push('Selling policy unclear - check community rules');
  if (rules?.watermarksAllowed === false) warnings.push('Watermarks not allowed - use clean images');
  if (rules?.minKarma && rules.minKarma > 50) warnings.push(`Requires ${rules.minKarma}+ karma`);
  if (rules?.minAccountAge && rules.minAccountAge > 7) warnings.push(`Account must be ${rules.minAccountAge}+ days old`);
  if (rules?.maxPostsPerDay && rules.maxPostsPerDay <= 1) warnings.push(`Limited to ${rules.maxPostsPerDay} post${rules.maxPostsPerDay === 1 ? '' : 's'} per day`);
  if (rules?.cooldownHours && rules.cooldownHours >= 24) warnings.push(`${rules.cooldownHours}h cooldown between posts`);
  if (rules?.requiresApproval) warnings.push('Posts require mod approval - expect delays');
  if (rules.eligibility.verificationRequired) warnings.push('Verification required - complete r/GetVerified');
  if (rules.content.sellingPolicy === 'not_allowed') warnings.push('No promotion/selling allowed - content only');
  if (rules.content.sellingPolicy === 'limited') warnings.push('Limited promotion allowed - check specific rules');
  if (rules.content.sellingPolicy === 'unknown') warnings.push('Selling policy unclear - check community rules');
  if (rules.content.watermarksAllowed === false) warnings.push('Watermarks not allowed - use clean images');
  if (rules.eligibility.minKarma && rules.eligibility.minKarma > 50) {
    warnings.push(`Requires ${rules.eligibility.minKarma}+ karma`);
  }
  if (rules.eligibility.minAccountAgeDays && rules.eligibility.minAccountAgeDays > 7) {
    warnings.push(`Account must be ${rules.eligibility.minAccountAgeDays}+ days old`);
  }
  if (rules.posting.maxPostsPerDay && rules.posting.maxPostsPerDay <= 1) {
    warnings.push(`Limited to ${rules.posting.maxPostsPerDay} post${rules.posting.maxPostsPerDay === 1 ? '' : 's'} per day`);
  }
  if (rules.posting.cooldownHours && rules.posting.cooldownHours >= 24) {
    warnings.push(`${rules.posting.cooldownHours}h cooldown between posts`);
  }
  if (rules.eligibility.requiresApproval) warnings.push('Posts require mod approval - expect delays');

  // Add title and content rule warnings with safe null checks
  if (rules?.titleRules && rules.titleRules.length > 0) {
    warnings.push(`Title rules: ${rules.titleRules.slice(0, 2).join(', ')}${rules.titleRules.length > 2 ? '...' : ''}`);
  if (rules.content.titleGuidelines.length > 0) {
    warnings.push(
      `Title rules: ${rules.content.titleGuidelines.slice(0, 2).join(', ')}${rules.content.titleGuidelines.length > 2 ? '...' : ''}`
    );
  }
  if (rules?.contentRules && rules.contentRules.length > 0) {
    warnings.push(`Content rules: ${rules.contentRules.slice(0, 2).join(', ')}${rules.contentRules.length > 2 ? '...' : ''}`);
  if (rules.content.contentGuidelines.length > 0) {
    warnings.push(
      `Content rules: ${rules.content.contentGuidelines.slice(0, 2).join(', ')}${rules.content.contentGuidelines.length > 2 ? '...' : ''}`
    );
  }

  // Enhanced rule-based warnings using the policy linter as fallback
  try {
    const lintResult = await lintCaption({
      subreddit: community.name,
      title: 'Sample title for validation',
      body: 'Sample body content for rule checking',
      hasLink: false
    });
    
    if (lintResult.warnings.length > 0) {
      // Filter out generic warnings and add specific ones
      const ruleWarnings = lintResult.warnings.filter(warning => 
        !warning.includes('Sample') && // Remove sample-related warnings
        !warning.includes('upvote') && // Remove generic engagement warnings
        !warnings.some(existing => existing.includes(warning.slice(0, 20))) // Avoid duplicates
      );
      warnings.push(...ruleWarnings.slice(0, 3)); // Limit additional warnings
    }
  } catch (error) {
    console.warn('Failed to get enhanced rule insights for community:', community.name, error);
  }

  return { bestTimes: community.bestPostingTimes || [], successTips, warnings };
server/seeds/reddit-communities-full.json
+2474
-1334

[
  {
    "id": "gonewild",
    "name": "gonewild",
    "displayName": "GoneWild",
    "members": 3200000,
    "engagementRate": 12,
    "category": "gonewild",
    "verificationRequired": true,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 3,
      "weekly": 10
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": false,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Verification required",
        "No selling",
        "OC only"
      ],
      "verificationRequired": true,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": true,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": false,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Verification required",
          "No selling",
          "OC only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening",
      "night"
    ],
    "averageUpvotes": 500,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Share your wild side",
    "tags": [
      "amateur",
      "verified"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "realgirls",
    "name": "RealGirls",
    "displayName": "Real Girls",
    "members": 2800000,
    "engagementRate": 10,
    "category": "amateur",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": false,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "No selling",
        "Amateur only"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": false,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "No selling",
          "Amateur only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 400,
    "successProbability": 60,
    "growthTrend": "up",
    "modActivity": "medium",
    "description": "Real amateur content",
    "tags": [
      "amateur"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "onlyfans",
    "name": "OnlyFans",
    "displayName": "OnlyFans",
    "members": 850000,
    "engagementRate": 15,
    "category": "selling",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 5
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": true,
      "sellingAllowed": "yes",
      "titleRules": [
        "Must follow format"
      ],
      "contentRules": [
        "Promotional content allowed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 5,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": true,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [
          "Must follow format"
        ],
        "contentGuidelines": [
          "Promotional content allowed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 5,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon",
      "evening"
    ],
    "averageUpvotes": 150,
    "successProbability": 75,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "OnlyFans promotion",
    "tags": [
      "promotion",
      "selling"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "onlyfansgirls101",
    "name": "OnlyFansGirls101",
    "displayName": "OnlyFans Girls 101",
    "members": 620000,
    "engagementRate": 18,
    "category": "selling",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": true,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "One post per day",
        "Direct links allowed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": true,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "One post per day",
          "Direct links allowed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 200,
    "successProbability": 80,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "OnlyFans creator promotion",
    "tags": [
      "promotion",
      "onlyfans"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "petitegonewild",
    "name": "PetiteGoneWild",
    "displayName": "Petite Gone Wild",
    "members": 1500000,
    "engagementRate": 14,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Petite only",
        "Limited selling"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Petite only",
          "Limited selling"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening",
      "night"
    ],
    "averageUpvotes": 350,
    "successProbability": 70,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Petite content creators",
    "tags": [
      "petite",
      "body_type"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "asiansgonewild",
    "name": "AsiansGoneWild",
    "displayName": "Asians Gone Wild",
    "members": 1300000,
    "engagementRate": 13,
    "category": "ethnicity",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Asian creators only",
        "Respectful comments"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Asian creators only",
          "Respectful comments"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 300,
    "successProbability": 68,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Asian content creators",
    "tags": [
      "asian",
      "ethnicity"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "thick",
    "name": "thick",
    "displayName": "Thick",
    "members": 980000,
    "engagementRate": 11,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Thick/curvy content",
        "Body positive"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Thick/curvy content",
          "Body positive"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon",
      "evening"
    ],
    "averageUpvotes": 250,
    "successProbability": 65,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Thick and curvy creators",
    "tags": [
      "thick",
      "curvy"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "pawg",
    "name": "pawg",
    "displayName": "PAWG",
    "members": 870000,
    "engagementRate": 12,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Theme specific content only"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Theme specific content only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 280,
    "successProbability": 66,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Specific body type content",
    "tags": [
      "body_type"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "latinas",
    "name": "latinas",
    "displayName": "Latinas",
    "members": 750000,
    "engagementRate": 11,
    "category": "ethnicity",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Latina creators",
        "Respectful content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Latina creators",
          "Respectful content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 220,
    "successProbability": 64,
    "growthTrend": "up",
    "modActivity": "medium",
    "description": "Latina content creators",
    "tags": [
      "latina",
      "ethnicity"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "onlyfanspromote",
    "name": "OnlyFansPromote",
    "displayName": "OnlyFans Promote",
    "members": 450000,
    "engagementRate": 20,
    "category": "selling",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 5
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": true,
      "sellingAllowed": "yes",
      "titleRules": [
        "Follow title format"
      ],
      "contentRules": [
        "Promotion allowed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 5,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": true,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [
          "Follow title format"
        ],
        "contentGuidelines": [
          "Promotion allowed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 5,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 100,
    "successProbability": 85,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Dedicated promotion space",
    "tags": [
      "promotion",
      "selling"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "gonewildcurvy",
    "name": "GoneWildCurvy",
    "displayName": "Gone Wild Curvy",
    "members": 680000,
    "engagementRate": 10,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Curvy content only",
        "No selling"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Curvy content only",
          "No selling"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 200,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Curvy content creators",
    "tags": [
      "curvy",
      "body_type"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "collegesluts",
    "name": "collegesluts",
    "displayName": "College Theme",
    "members": 1200000,
    "engagementRate": 9,
    "category": "theme",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "College age theme",
        "Limited promotion"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "College age theme",
          "Limited promotion"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 300,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "College themed content",
    "tags": [
      "college",
      "theme"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "adorableporn",
    "name": "adorableporn",
    "displayName": "Adorable Content",
    "members": 920000,
    "engagementRate": 8,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Cute/adorable theme",
        "No direct selling"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Cute/adorable theme",
          "No direct selling"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 250,
    "successProbability": 58,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Cute and adorable content",
    "tags": [
      "cute",
      "style"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "biggerthanyouthought",
    "name": "BiggerThanYouThought",
    "displayName": "Bigger Than You Thought",
    "members": 1100000,
    "engagementRate": 10,
    "category": "reveal",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Reveal content only",
        "OC preferred"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Reveal content only",
          "OC preferred"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 400,
    "successProbability": 55,
    "growthTrend": "up",
    "modActivity": "medium",
    "description": "Reveal style content",
    "tags": [
      "reveal",
      "surprise"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "bustypetite",
    "name": "BustyPetite",
    "displayName": "Busty Petite",
    "members": 1400000,
    "engagementRate": 11,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Specific body type",
        "No selling"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Specific body type",
          "No selling"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 350,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Specific body type content",
    "tags": [
      "petite",
      "busty"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "nsfw",
    "name": "nsfw",
    "displayName": "NSFW",
    "members": 2500000,
    "engagementRate": 7,
    "category": "general",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "General NSFW",
        "No spam"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "General NSFW",
          "No spam"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 200,
    "successProbability": 50,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "General NSFW content",
    "tags": [
      "general"
    ],
    "competitionLevel": "very_high"
  },
  {
    "id": "milf",
    "name": "milf",
    "displayName": "MILF",
    "members": 820000,
    "engagementRate": 10,
    "category": "age",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Age appropriate content",
        "Respectful"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Age appropriate content",
          "Respectful"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon",
      "evening"
    ],
    "averageUpvotes": 250,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Mature content creators",
    "tags": [
      "mature",
      "milf"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "gonewild30plus",
    "name": "gonewild30plus",
    "displayName": "Gone Wild 30+",
    "members": 750000,
    "engagementRate": 12,
    "category": "age",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "30+ creators only",
        "Age verification"
      ],
      "verificationRequired": true,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": true,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "30+ creators only",
          "Age verification"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 280,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "medium",
    "description": "30+ content creators",
    "tags": [
      "mature",
      "30plus"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "altgonewild",
    "name": "altgonewild",
    "displayName": "Alt Gone Wild",
    "members": 580000,
    "engagementRate": 13,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Alternative style",
        "Tattoos/piercings welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Alternative style",
          "Tattoos/piercings welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 220,
    "successProbability": 68,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Alternative style creators",
    "tags": [
      "alt",
      "tattoo",
      "piercing"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "workgonewild",
    "name": "workgonewild",
    "displayName": "Work Gone Wild",
    "members": 520000,
    "engagementRate": 9,
    "category": "theme",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Work themed",
        "No identifying info"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Work themed",
          "No identifying info"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 180,
    "successProbability": 55,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Work themed content",
    "tags": [
      "work",
      "theme"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "onoff",
    "name": "OnOff",
    "displayName": "On/Off",
    "members": 890000,
    "engagementRate": 10,
    "category": "comparison",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [
        "Before/after format"
      ],
      "contentRules": [
        "Two images required"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [
          "Before/after format"
        ],
        "contentGuidelines": [
          "Two images required"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 300,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "On/Off comparison content",
    "tags": [
      "comparison",
      "onoff"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "tittydrop",
    "name": "TittyDrop",
    "displayName": "TittyDrop",
    "members": 750000,
    "engagementRate": 11,
    "category": "reveal",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Drop/reveal content",
        "Video preferred"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Drop/reveal content",
          "Video preferred"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 320,
    "successProbability": 58,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Drop/reveal content",
    "tags": [
      "reveal",
      "drop"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "freeuse",
    "name": "freeuse",
    "displayName": "Free Use",
    "members": 420000,
    "engagementRate": 8,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Theme specific",
        "Consensual content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Theme specific",
          "Consensual content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 150,
    "successProbability": 52,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Specific theme content",
    "tags": [
      "fetish",
      "theme"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "gothsluts",
    "name": "gothsluts",
    "displayName": "Goth Style",
    "members": 380000,
    "engagementRate": 14,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Goth aesthetic",
        "Promotion allowed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Goth aesthetic",
          "Promotion allowed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 200,
    "successProbability": 72,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Goth style creators",
    "tags": [
      "goth",
      "alt"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "palegirls",
    "name": "palegirls",
    "displayName": "Pale Girls",
    "members": 450000,
    "engagementRate": 10,
    "category": "appearance",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Pale skin appreciation",
        "Body positive"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Pale skin appreciation",
          "Body positive"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 180,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Pale skin creators",
    "tags": [
      "pale",
      "appearance"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "redheads",
    "name": "redheads",
    "displayName": "Redheads",
    "members": 520000,
    "engagementRate": 11,
    "category": "appearance",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Natural or dyed redheads",
        "Hair visible"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Natural or dyed redheads",
          "Hair visible"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 210,
    "successProbability": 67,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Redhead creators",
    "tags": [
      "redhead",
      "hair"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "blonde",
    "name": "Blonde",
    "displayName": "Blonde",
    "members": 480000,
    "engagementRate": 9,
    "category": "appearance",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Blonde hair",
        "Natural or dyed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Blonde hair",
          "Natural or dyed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 170,
    "successProbability": 63,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Blonde creators",
    "tags": [
      "blonde",
      "hair"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "brunette",
    "name": "Brunette",
    "displayName": "Brunette",
    "members": 460000,
    "engagementRate": 9,
    "category": "appearance",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Brunette hair",
        "Hair visible"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Brunette hair",
          "Hair visible"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 165,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Brunette creators",
    "tags": [
      "brunette",
      "hair"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "feet",
    "name": "feet",
    "displayName": "Feet",
    "members": 380000,
    "engagementRate": 15,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Feet content",
        "Selling allowed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Feet content",
          "Selling allowed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 120,
    "successProbability": 75,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Feet content creators",
    "tags": [
      "feet",
      "fetish"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "feetpics",
    "name": "FeetPics",
    "displayName": "Feet Pics",
    "members": 290000,
    "engagementRate": 16,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 5
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Feet focus",
        "Selling welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 5,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Feet focus",
          "Selling welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 5,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 100,
    "successProbability": 78,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Feet picture sales",
    "tags": [
      "feet",
      "selling"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "bdsm",
    "name": "BDSM",
    "displayName": "BDSM",
    "members": 450000,
    "engagementRate": 10,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Safe, sane, consensual",
        "Educational welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Safe, sane, consensual",
          "Educational welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 160,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "BDSM content and education",
    "tags": [
      "bdsm",
      "kink"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "femdom",
    "name": "FemDom",
    "displayName": "FemDom",
    "members": 320000,
    "engagementRate": 12,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Female domination theme",
        "Respectful"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Female domination theme",
          "Respectful"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 140,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "medium",
    "description": "Female domination content",
    "tags": [
      "femdom",
      "domme"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "findom",
    "name": "FinDom",
    "displayName": "Financial Domination",
    "members": 180000,
    "engagementRate": 18,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 5
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Financial domination",
        "Clear terms"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 5,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Financial domination",
          "Clear terms"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 5,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 80,
    "successProbability": 82,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Financial domination",
    "tags": [
      "findom",
      "fetish"
    ],
    "competitionLevel": "very_low"
  },
  {
    "id": "cosplaygirls",
    "name": "cosplaygirls",
    "displayName": "Cosplay Girls",
    "members": 680000,
    "engagementRate": 9,
    "category": "cosplay",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Cosplay content",
        "Credit characters"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Cosplay content",
          "Credit characters"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon",
      "evening"
    ],
    "averageUpvotes": 200,
    "successProbability": 62,
    "growthTrend": "up",
    "modActivity": "medium",
    "description": "Cosplay creators",
    "tags": [
      "cosplay",
      "costume"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "nsfwcosplay",
    "name": "NSFWcosplay",
    "displayName": "NSFW Cosplay",
    "members": 420000,
    "engagementRate": 11,
    "category": "cosplay",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Adult cosplay",
        "Character names required"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Adult cosplay",
          "Character names required"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 180,
    "successProbability": 68,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Adult cosplay content",
    "tags": [
      "cosplay",
      "nsfw"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "geekygirls",
    "name": "geekygirls",
    "displayName": "Geeky Girls",
    "members": 350000,
    "engagementRate": 10,
    "category": "niche",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Geek culture theme",
        "Gaming/anime welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Geek culture theme",
          "Gaming/anime welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 150,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Geeky content creators",
    "tags": [
      "geek",
      "nerd"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "gamergirls",
    "name": "GamerGirls",
    "displayName": "Gamer Girls",
    "members": 380000,
    "engagementRate": 8,
    "category": "gaming",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Gaming related",
        "Setup pics welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Gaming related",
          "Setup pics welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 140,
    "successProbability": 58,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Gaming content creators",
    "tags": [
      "gaming",
      "gamer"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "fitgirls",
    "name": "FitGirls",
    "displayName": "Fit Girls",
    "members": 520000,
    "engagementRate": 9,
    "category": "fitness",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Fitness focus",
        "Workout content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Fitness focus",
          "Workout content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "morning",
      "afternoon"
    ],
    "averageUpvotes": 170,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Fitness content creators",
    "tags": [
      "fitness",
      "fit"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "yoga_nsfw",
    "name": "Yoga_NSFW",
    "displayName": "Yoga NSFW",
    "members": 280000,
    "engagementRate": 10,
    "category": "fitness",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Yoga poses",
        "Flexibility content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Yoga poses",
          "Flexibility content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "morning"
    ],
    "averageUpvotes": 130,
    "successProbability": 65,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Yoga and flexibility",
    "tags": [
      "yoga",
      "flexible"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "hotmoms",
    "name": "HotMoms",
    "displayName": "Hot Moms",
    "members": 420000,
    "engagementRate": 11,
    "category": "age",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Mom creators",
        "Age appropriate"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Mom creators",
          "Age appropriate"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 160,
    "successProbability": 72,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Mom content creators",
    "tags": [
      "milf",
      "mom"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "mombod",
    "name": "mombod",
    "displayName": "Mom Bod",
    "members": 350000,
    "engagementRate": 12,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Mom body positivity",
        "Natural bodies"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Mom body positivity",
          "Natural bodies"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 140,
    "successProbability": 75,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Mom body appreciation",
    "tags": [
      "mombod",
      "natural"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "amateur_milfs",
    "name": "Amateur_MILFs",
    "displayName": "Amateur MILFs",
    "members": 380000,
    "engagementRate": 13,
    "category": "age",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Amateur mature content",
        "30+ creators"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Amateur mature content",
          "30+ creators"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 150,
    "successProbability": 74,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Amateur mature creators",
    "tags": [
      "milf",
      "amateur"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "ebonygirls",
    "name": "EbonyGirls",
    "displayName": "Ebony Girls",
    "members": 450000,
    "engagementRate": 10,
    "category": "ethnicity",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Black creators",
        "Respectful space"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Black creators",
          "Respectful space"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 180,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Black content creators",
    "tags": [
      "ebony",
      "black"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "blackgirls",
    "name": "BlackGirls",
    "displayName": "Black Girls",
    "members": 380000,
    "engagementRate": 11,
    "category": "ethnicity",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Black creators only",
        "Celebration space"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Black creators only",
          "Celebration space"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 160,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Black creator community",
    "tags": [
      "black",
      "woc"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "indiangirls",
    "name": "IndianGirls",
    "displayName": "Indian Girls",
    "members": 420000,
    "engagementRate": 9,
    "category": "ethnicity",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Indian/South Asian creators",
        "Cultural respect"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Indian/South Asian creators",
          "Cultural respect"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 150,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Indian content creators",
    "tags": [
      "indian",
      "desi"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "juicyasians",
    "name": "juicyasians",
    "displayName": "Juicy Asians",
    "members": 680000,
    "engagementRate": 10,
    "category": "ethnicity",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Asian creators",
        "Body positive"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Asian creators",
          "Body positive"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 200,
    "successProbability": 64,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Asian creator community",
    "tags": [
      "asian",
      "thick"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "paag",
    "name": "paag",
    "displayName": "PAAG",
    "members": 520000,
    "engagementRate": 11,
    "category": "ethnicity",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Asian creators",
        "Theme specific"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Asian creators",
          "Theme specific"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 180,
    "successProbability": 66,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Specific Asian content",
    "tags": [
      "asian",
      "body_type"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "smallboobs",
    "name": "SmallBoobs",
    "displayName": "Small Boobs",
    "members": 480000,
    "engagementRate": 10,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Small chest appreciation",
        "Body positive"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Small chest appreciation",
          "Body positive"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 160,
    "successProbability": 68,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Small chest appreciation",
    "tags": [
      "small",
      "petite"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "tinytits",
    "name": "TinyTits",
    "displayName": "Tiny Tits",
    "members": 520000,
    "engagementRate": 11,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Petite chest focus",
        "Respectful"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Petite chest focus",
          "Respectful"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 170,
    "successProbability": 69,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Petite chest creators",
    "tags": [
      "tiny",
      "small"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "hugeboobs",
    "name": "HugeBoobs",
    "displayName": "Huge Boobs",
    "members": 720000,
    "engagementRate": 9,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Large chest content",
        "Natural or enhanced"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Large chest content",
          "Natural or enhanced"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 220,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Large chest creators",
    "tags": [
      "busty",
      "large"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "bigboobs",
    "name": "BigBoobs",
    "displayName": "Big Boobs",
    "members": 850000,
    "engagementRate": 8,
    "category": "body_type",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Large chest focus",
        "No selling"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Large chest focus",
          "No selling"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 250,
    "successProbability": 58,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Big chest appreciation",
    "tags": [
      "big",
      "busty"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "naturaltits",
    "name": "NaturalTits",
    "displayName": "Natural",
    "members": 580000,
    "engagementRate": 10,
    "category": "natural",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Natural only",
        "No enhancements"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Natural only",
          "No enhancements"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 190,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Natural body creators",
    "tags": [
      "natural",
      "real"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "tattooedgirls",
    "name": "TattooedGirls",
    "displayName": "Tattooed Girls",
    "members": 420000,
    "engagementRate": 11,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Tattoo visibility",
        "Ink appreciation"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Tattoo visibility",
          "Ink appreciation"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening",
      "night"
    ],
    "averageUpvotes": 160,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Tattooed creators",
    "tags": [
      "tattoo",
      "ink"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "piercedgirls",
    "name": "PiercedGirls",
    "displayName": "Pierced Girls",
    "members": 320000,
    "engagementRate": 12,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Piercing focus",
        "Body modification"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Piercing focus",
          "Body modification"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 140,
    "successProbability": 72,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Pierced creators",
    "tags": [
      "piercing",
      "alt"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "emogirls",
    "name": "EmoGirls",
    "displayName": "Emo Girls",
    "members": 280000,
    "engagementRate": 13,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Emo aesthetic",
        "Scene welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Emo aesthetic",
          "Scene welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 130,
    "successProbability": 74,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Emo style creators",
    "tags": [
      "emo",
      "scene"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "scenegirls",
    "name": "SceneGirls",
    "displayName": "Scene Girls",
    "members": 250000,
    "engagementRate": 14,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Scene style",
        "Colorful aesthetic"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Scene style",
          "Colorful aesthetic"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 120,
    "successProbability": 75,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Scene style creators",
    "tags": [
      "scene",
      "alt"
    ],
    "competitionLevel": "very_low"
  },
  {
    "id": "egirls",
    "name": "egirls",
    "displayName": "E-Girls",
    "members": 380000,
    "engagementRate": 15,
    "category": "style",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 4
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "E-girl aesthetic",
        "Gaming/anime themes"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 4,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "E-girl aesthetic",
          "Gaming/anime themes"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 4,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 150,
    "successProbability": 76,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "E-girl aesthetic creators",
    "tags": [
      "egirl",
      "gaming"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "collegegirls",
    "name": "CollegeGirls",
    "displayName": "College Girls",
    "members": 580000,
    "engagementRate": 8,
    "category": "age",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "College age",
        "School themes"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "College age",
          "School themes"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 180,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "College themed content",
    "tags": [
      "college",
      "young"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "barelylegal",
    "name": "BarelyLegal",
    "displayName": "18+",
    "members": 480000,
    "engagementRate": 7,
    "category": "age",
    "verificationRequired": true,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Age verification required",
        "18+ only"
      ],
      "verificationRequired": true,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": true,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Age verification required",
          "18+ only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 150,
    "successProbability": 55,
    "growthTrend": "stable",
    "modActivity": "very_high",
    "description": "Young adult creators",
    "tags": [
      "18plus",
      "young"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "2000sgirls",
    "name": "2000sGirls",
    "displayName": "2000s Girls",
    "members": 320000,
    "engagementRate": 10,
    "category": "age",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Born 2000-2005",
        "Young adult content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Born 2000-2005",
          "Young adult content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 140,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "2000s born creators",
    "tags": [
      "2000s",
      "young"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "snapchatgirls",
    "name": "SnapchatGirls",
    "displayName": "Snapchat Girls",
    "members": 420000,
    "engagementRate": 12,
    "category": "social",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 4
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Snapchat promotion",
        "Username sharing"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 4,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Snapchat promotion",
          "Username sharing"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 4,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 100,
    "successProbability": 75,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Snapchat promotion",
    "tags": [
      "snapchat",
      "social"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "tiktokgirls",
    "name": "TikTokGirls",
    "displayName": "TikTok Girls",
    "members": 380000,
    "engagementRate": 11,
    "category": "social",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "TikTok creators",
        "Dance/trend content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "TikTok creators",
          "Dance/trend content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon",
      "evening"
    ],
    "averageUpvotes": 120,
    "successProbability": 72,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "TikTok creator promotion",
    "tags": [
      "tiktok",
      "social"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "instagrammodels",
    "name": "InstagramModels",
    "displayName": "Instagram Models",
    "members": 520000,
    "engagementRate": 8,
    "category": "social",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "IG promotion",
        "Model content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "IG promotion",
          "Model content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 150,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Instagram model promotion",
    "tags": [
      "instagram",
      "model"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "camgirls",
    "name": "CamGirls",
    "displayName": "Cam Girls",
    "members": 380000,
    "engagementRate": 14,
    "category": "cam",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 4
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Cam promotion",
        "Schedule sharing"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 4,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Cam promotion",
          "Schedule sharing"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 4,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 110,
    "successProbability": 78,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Cam performer promotion",
    "tags": [
      "cam",
      "live"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "camsluts",
    "name": "CamSluts",
    "displayName": "Cam Performers",
    "members": 320000,
    "engagementRate": 15,
    "category": "cam",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 5
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Cam content",
        "Links allowed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 5,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Cam content",
          "Links allowed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 5,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 90,
    "successProbability": 80,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Cam site promotion",
    "tags": [
      "cam",
      "streaming"
    ],
    "competitionLevel": "very_low"
  },
  {
    "id": "stripgirls",
    "name": "StripGirls",
    "displayName": "Strip Girls",
    "members": 280000,
    "engagementRate": 12,
    "category": "dancer",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Dancer content",
        "Stage/pole welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Dancer content",
          "Stage/pole welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 120,
    "successProbability": 73,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Dancer/stripper content",
    "tags": [
      "dancer",
      "stripper"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "poledancing",
    "name": "PoleDancing",
    "displayName": "Pole Dancing",
    "members": 220000,
    "engagementRate": 11,
    "category": "dancer",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Pole content",
        "Athletic focus"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Pole content",
          "Athletic focus"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 100,
    "successProbability": 68,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Pole dancing content",
    "tags": [
      "pole",
      "dance"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "homemadeporn",
    "name": "HomemadePorn",
    "displayName": "Homemade",
    "members": 680000,
    "engagementRate": 9,
    "category": "amateur",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": false,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Amateur content",
        "OC only"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": false,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Amateur content",
          "OC only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 200,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Homemade amateur content",
    "tags": [
      "homemade",
      "amateur"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "amateur",
    "name": "Amateur",
    "displayName": "Amateur",
    "members": 820000,
    "engagementRate": 8,
    "category": "amateur",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": false,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Amateur only",
        "No pro content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": false,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Amateur only",
          "No pro content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 180,
    "successProbability": 58,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Amateur content only",
    "tags": [
      "amateur",
      "real"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "homemadexxx",
    "name": "HomemadeXXX",
    "displayName": "Homemade XXX",
    "members": 520000,
    "engagementRate": 10,
    "category": "amateur",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": false,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Homemade content",
        "Couples welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": false,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Homemade content",
          "Couples welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 160,
    "successProbability": 70,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Homemade adult content",
    "tags": [
      "homemade",
      "couple"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "couplesgonewild",
    "name": "CouplesGoneWild",
    "displayName": "Couples Gone Wild",
    "members": 480000,
    "engagementRate": 10,
    "category": "couples",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Couples content",
        "Both partners visible"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Couples content",
          "Both partners visible"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 170,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Couple content",
    "tags": [
      "couple",
      "partners"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "gwcouples",
    "name": "GWCouples",
    "displayName": "GW Couples",
    "members": 420000,
    "engagementRate": 11,
    "category": "couples",
    "verificationRequired": true,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Verified couples",
        "No selling"
      ],
      "verificationRequired": true,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": true,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Verified couples",
          "No selling"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 190,
    "successProbability": 63,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Verified couple content",
    "tags": [
      "couple",
      "verified"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "hotwife",
    "name": "HotWife",
    "displayName": "HotWife",
    "members": 380000,
    "engagementRate": 12,
    "category": "lifestyle",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Lifestyle content",
        "Respectful"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Lifestyle content",
          "Respectful"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 150,
    "successProbability": 68,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Hotwife lifestyle",
    "tags": [
      "hotwife",
      "lifestyle"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "wifesharing",
    "name": "WifeSharing",
    "displayName": "Wife Sharing",
    "members": 350000,
    "engagementRate": 11,
    "category": "lifestyle",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Consensual content",
        "Partner aware"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Consensual content",
          "Partner aware"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 140,
    "successProbability": 66,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Wife sharing content",
    "tags": [
      "sharing",
      "lifestyle"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "swingers",
    "name": "Swingers",
    "displayName": "Swingers",
    "members": 320000,
    "engagementRate": 10,
    "category": "lifestyle",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Swinger lifestyle",
        "Respectful community"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Swinger lifestyle",
          "Respectful community"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 120,
    "successProbability": 70,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Swinger lifestyle content",
    "tags": [
      "swinger",
      "lifestyle"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "slutwife",
    "name": "SlutWife",
    "displayName": "SlutWife",
    "members": 280000,
    "engagementRate": 13,
    "category": "lifestyle",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Lifestyle content",
        "Consensual"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Lifestyle content",
          "Consensual"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 110,
    "successProbability": 72,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Alternative lifestyle",
    "tags": [
      "lifestyle",
      "wife"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "cuckold",
    "name": "Cuckold",
    "displayName": "Cuckold",
    "members": 250000,
    "engagementRate": 11,
    "category": "lifestyle",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Lifestyle specific",
        "Consensual only"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Lifestyle specific",
          "Consensual only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 100,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Cuckold lifestyle",
    "tags": [
      "cuckold",
      "lifestyle"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "breeding",
    "name": "Breeding",
    "displayName": "Breeding",
    "members": 320000,
    "engagementRate": 9,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Fantasy content",
        "Role play"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Fantasy content",
          "Role play"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 130,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Breeding fantasy content",
    "tags": [
      "breeding",
      "fantasy"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "knockmeup",
    "name": "KnockMeUp",
    "displayName": "Knock Me Up",
    "members": 280000,
    "engagementRate": 10,
    "category": "fetish",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Fantasy theme",
        "Role play content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Fantasy theme",
          "Role play content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 110,
    "successProbability": 68,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Breeding fantasy",
    "tags": [
      "breeding",
      "roleplay"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "creampie",
    "name": "Creampie",
    "displayName": "Creampie",
    "members": 420000,
    "engagementRate": 8,
    "category": "content_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Specific content type",
        "OC preferred"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Specific content type",
          "OC preferred"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 150,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Specific content type",
    "tags": [
      "creampie",
      "content"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "cumsluts",
    "name": "CumSluts",
    "displayName": "Cum Content",
    "members": 480000,
    "engagementRate": 9,
    "category": "content_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Theme specific",
        "OC welcome"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Theme specific",
          "OC welcome"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 170,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Specific content theme",
    "tags": [
      "cum",
      "content"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "facial",
    "name": "Facial",
    "displayName": "Facial",
    "members": 380000,
    "engagementRate": 8,
    "category": "content_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Specific content",
        "OC preferred"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Specific content",
          "OC preferred"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 140,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Facial content",
    "tags": [
      "facial",
      "content"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "squirting",
    "name": "Squirting",
    "displayName": "Squirting",
    "members": 420000,
    "engagementRate": 10,
    "category": "content_type",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Squirt content",
        "OC encouraged"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Squirt content",
          "OC encouraged"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 160,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Squirting content",
    "tags": [
      "squirt",
      "content"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "grool",
    "name": "Grool",
    "displayName": "Grool",
    "members": 320000,
    "engagementRate": 11,
    "category": "content_type",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Specific content",
        "Natural only"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Specific content",
          "Natural only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 130,
    "successProbability": 65,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Natural wetness content",
    "tags": [
      "grool",
      "natural"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "wetspot",
    "name": "WetSpot",
    "displayName": "Wet Spot",
    "members": 180000,
    "engagementRate": 12,
    "category": "content_type",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Wet spot content",
        "Clothing focus"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Wet spot content",
          "Clothing focus"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 90,
    "successProbability": 72,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Wet spot content",
    "tags": [
      "wetspot",
      "clothing"
    ],
    "competitionLevel": "very_low"
  },
  {
    "id": "panties",
    "name": "Panties",
    "displayName": "Panties",
    "members": 380000,
    "engagementRate": 10,
    "category": "clothing",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Panty content",
        "Selling allowed"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Panty content",
          "Selling allowed"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 120,
    "successProbability": 70,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Panty content and sales",
    "tags": [
      "panties",
      "underwear"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "usedpanties",
    "name": "UsedPanties",
    "displayName": "Used Panties",
    "members": 220000,
    "engagementRate": 14,
    "category": "selling",
    "verificationRequired": true,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 5
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": true,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Selling platform",
        "Verification required"
      ],
      "verificationRequired": true,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 5,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": true,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": true,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Selling platform",
          "Verification required"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 5,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "all_day"
    ],
    "averageUpvotes": 80,
    "successProbability": 80,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Panty selling marketplace",
    "tags": [
      "selling",
      "panties"
    ],
    "competitionLevel": "very_low"
  },
  {
    "id": "lingerie",
    "name": "Lingerie",
    "displayName": "Lingerie",
    "members": 520000,
    "engagementRate": 9,
    "category": "clothing",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Lingerie focus",
        "Quality content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Lingerie focus",
          "Quality content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 170,
    "successProbability": 64,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Lingerie content",
    "tags": [
      "lingerie",
      "clothing"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "stockings",
    "name": "Stockings",
    "displayName": "Stockings",
    "members": 320000,
    "engagementRate": 10,
    "category": "clothing",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Stocking/hosiery content",
        "Legs focus"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Stocking/hosiery content",
          "Legs focus"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 130,
    "successProbability": 68,
    "growthTrend": "stable",
    "modActivity": "low",
    "description": "Stocking and hosiery content",
    "tags": [
      "stockings",
      "legs"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "thighhighs",
    "name": "ThighHighs",
    "displayName": "Thigh Highs",
    "members": 280000,
    "engagementRate": 11,
    "category": "clothing",
    "verificationRequired": false,
    "promotionAllowed": "yes",
    "postingLimits": {
      "daily": 3
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "yes",
      "titleRules": [],
      "contentRules": [
        "Thigh high focus",
        "Socks/stockings"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 3,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Thigh high focus",
          "Socks/stockings"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 3,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 120,
    "successProbability": 70,
    "growthTrend": "up",
    "modActivity": "low",
    "description": "Thigh high content",
    "tags": [
      "thighhighs",
      "socks"
    ],
    "competitionLevel": "low"
  },
  {
    "id": "yoga_pants",
    "name": "YogaPants",
    "displayName": "Yoga Pants",
    "members": 420000,
    "engagementRate": 8,
    "category": "clothing",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Yoga pants/leggings",
        "Athletic wear"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Yoga pants/leggings",
          "Athletic wear"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 140,
    "successProbability": 62,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Yoga pants and leggings",
    "tags": [
      "yogapants",
      "athletic"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "girlsinyogapants",
    "name": "GirlsInYogaPants",
    "displayName": "Girls In Yoga Pants",
    "members": 680000,
    "engagementRate": 7,
    "category": "clothing",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "Yoga pants only",
        "No nudity"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Yoga pants only",
          "No nudity"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 180,
    "successProbability": 58,
    "growthTrend": "stable",
    "modActivity": "high",
    "description": "Yoga pants appreciation",
    "tags": [
      "yogapants",
      "sfw"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "asshole",
    "name": "Asshole",
    "displayName": "Asshole",
    "members": 520000,
    "engagementRate": 9,
    "category": "specific",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Specific focus",
        "Close-up content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Specific focus",
          "Close-up content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 160,
    "successProbability": 63,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Specific body part focus",
    "tags": [
      "ass",
      "closeup"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "pussy",
    "name": "Pussy",
    "displayName": "Pussy",
    "members": 780000,
    "engagementRate": 8,
    "category": "specific",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "limited",
      "titleRules": [],
      "contentRules": [
        "Specific focus",
        "Quality content"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 2,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "Specific focus",
          "Quality content"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "night"
    ],
    "averageUpvotes": 190,
    "successProbability": 60,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Specific content focus",
    "tags": [
      "pussy",
      "closeup"
    ],
    "competitionLevel": "high"
  },
  {
    "id": "godpussy",
    "name": "GodPussy",
    "displayName": "God Pussy",
    "members": 620000,
    "engagementRate": 10,
    "category": "specific",
    "verificationRequired": false,
    "promotionAllowed": "no",
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": null,
      "sellingAllowed": "no",
      "titleRules": [],
      "contentRules": [
        "High quality only",
        "Aesthetic focus"
      ],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": true,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": null,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": true,
        "titleGuidelines": [],
        "contentGuidelines": [
          "High quality only",
          "Aesthetic focus"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": [
      "evening"
    ],
    "averageUpvotes": 250,
    "successProbability": 55,
    "growthTrend": "stable",
    "modActivity": "very_high",
    "description": "High quality specific content",
    "tags": [
      "quality",
      "aesthetic"
    ],
    "competitionLevel": "very_high"
  }
]
]
server/seeds/reddit-communities.json
+82
-29

[
  {
    "id": "photography",
    "name": "photography",
    "displayName": "Photography",
    "members": 5000000,
    "engagementRate": 5,
    "category": "art",
    "verificationRequired": false,
    "promotionAllowed": "limited",
    "postingLimits": {"daily": 1},
    "postingLimits": {
      "daily": 1
    },
    "rules": {
      "minKarma": null,
      "minAccountAge": null,
      "watermarksAllowed": true,
      "sellingAllowed": "limited",
      "titleRules": ["Be descriptive", "No clickbait"],
      "contentRules": ["Be nice", "No spam", "High quality images only"],
      "verificationRequired": false,
      "requiresApproval": false,
      "nsfwRequired": false,
      "maxPostsPerDay": 1,
      "cooldownHours": null
      "eligibility": {
        "minKarma": null,
        "minAccountAgeDays": null,
        "verificationRequired": false,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": true,
        "sellingPolicy": "limited",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": false,
        "titleGuidelines": [
          "Be descriptive",
          "No clickbait"
        ],
        "contentGuidelines": [
          "Be nice",
          "No spam",
          "High quality images only"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 1,
        "cooldownHours": null
      },
      "notes": null
    },
    "bestPostingTimes": ["morning", "evening"],
    "bestPostingTimes": [
      "morning",
      "evening"
    ],
    "averageUpvotes": 100,
    "successProbability": 60,
    "growthTrend": "up",
    "modActivity": "high",
    "description": "A place to share photos.",
    "tags": ["photography", "art"],
    "tags": [
      "photography",
      "art"
    ],
    "competitionLevel": "medium"
  },
  {
    "id": "fitness",
    "name": "fitness",
    "displayName": "Fitness",
    "members": 10000000,
    "engagementRate": 7,
    "category": "health",
    "verificationRequired": true,
    "promotionAllowed": "strict",
    "postingLimits": {"daily": 2},
    "postingLimits": {
      "daily": 2
    },
    "rules": {
      "minKarma": 100,
      "minAccountAge": 30,
      "watermarksAllowed": false,
      "sellingAllowed": "not_allowed",
      "titleRules": ["Include workout type", "No self-promotion"],
      "contentRules": ["No self-promotion", "Stay on topic", "Include progress or advice"],
      "verificationRequired": true,
      "requiresApproval": false,
      "nsfwRequired": false,
      "maxPostsPerDay": 2,
      "cooldownHours": 12
      "eligibility": {
        "minKarma": 100,
        "minAccountAgeDays": 30,
        "verificationRequired": true,
        "requiresApproval": false
      },
      "content": {
        "watermarksAllowed": false,
        "sellingPolicy": "not_allowed",
        "promotionalLinks": null,
        "requiresOriginalContent": false,
        "nsfwRequired": false,
        "titleGuidelines": [
          "Include workout type",
          "No self-promotion"
        ],
        "contentGuidelines": [
          "No self-promotion",
          "Stay on topic",
          "Include progress or advice"
        ],
        "linkRestrictions": [],
        "bannedContent": [],
        "formattingRequirements": []
      },
      "posting": {
        "maxPostsPerDay": 2,
        "cooldownHours": 12
      },
      "notes": null
    },
    "bestPostingTimes": ["afternoon"],
    "bestPostingTimes": [
      "afternoon"
    ],
    "averageUpvotes": 250,
    "successProbability": 70,
    "growthTrend": "stable",
    "modActivity": "medium",
    "description": "Workout tips and discussion.",
    "tags": ["fitness", "health"],
    "tags": [
      "fitness",
      "health"
    ],
    "competitionLevel": "high"
  }
]
]
shared/schema.ts
+42
-38

@@ -240,156 +240,160 @@ export type RuleAllowance = z.infer<typeof ruleAllowanceSchema>;
// CANONICAL REDDIT COMMUNITY ENUMS
// ==========================================

export const redditCommunitySellingPolicySchema = z.enum(['allowed', 'limited', 'not_allowed', 'unknown']);
export type RedditCommunitySellingPolicy = z.infer<typeof redditCommunitySellingPolicySchema>;

export const promotionAllowedSchema = z.enum(['yes', 'no', 'limited', 'subtle', 'strict', 'unknown']);
export type PromotionAllowed = z.infer<typeof promotionAllowedSchema>;

export const categorySchema = z.enum([
  'age', 'amateur', 'appearance', 'body_type', 'cam', 'clothing', 'comparison',
  'content_type', 'cosplay', 'couples', 'dancer', 'ethnicity', 'fetish',
  'fitness', 'gaming', 'general', 'gonewild', 'lifestyle', 'natural',
  'niche', 'reveal', 'selling', 'social', 'specific', 'style', 'theme'
]);
export type Category = z.infer<typeof categorySchema>;

export const competitionLevelSchema = z.enum(['low', 'medium', 'high']).nullable();
export type CompetitionLevel = z.infer<typeof competitionLevelSchema>;

// Growth trend schema and type are imported from ./growth-trends.js

export const modActivitySchema = z.enum(['low', 'medium', 'high', 'unknown']).nullable();
export type ModActivity = z.infer<typeof modActivitySchema>;

export const redditCommunityEligibilityRulesSchema = z.object({
  minKarma: z.number().nullable().default(null),
  minAccountAgeDays: z.number().nullable().default(null),
  verificationRequired: z.boolean().default(false),
  requiresApproval: z.boolean().default(false)
});
export type RedditCommunityEligibilityRules = z.infer<typeof redditCommunityEligibilityRulesSchema>;

export const redditCommunityContentRulesSchema = z.object({
  watermarksAllowed: z.boolean().nullable().default(null),
  sellingPolicy: redditCommunitySellingPolicySchema.default('unknown'),
  promotionalLinks: ruleAllowanceSchema.nullable().default(null),
  requiresOriginalContent: z.boolean().default(false),
  nsfwRequired: z.boolean().default(false),
  titleGuidelines: z.array(z.string()).default([]),
  contentGuidelines: z.array(z.string()).default([]),
  linkRestrictions: z.array(z.string()).default([]),
  bannedContent: z.array(z.string()).default([]),
  formattingRequirements: z.array(z.string()).default([])
});
export type RedditCommunityContentRules = z.infer<typeof redditCommunityContentRulesSchema>;

export const redditCommunityPostingRulesSchema = z.object({
  maxPostsPerDay: z.number().nullable().default(null),
  cooldownHours: z.number().nullable().default(null)
});
export type RedditCommunityPostingRules = z.infer<typeof redditCommunityPostingRulesSchema>;

const defaultEligibilityRules = redditCommunityEligibilityRulesSchema.parse({});
const defaultContentRules = redditCommunityContentRulesSchema.parse({});
const defaultPostingRules = redditCommunityPostingRulesSchema.parse({});

export const redditCommunityRuleSetSchema = z.object({
  minKarma: z.number().nullable().optional(),
  minAccountAge: z.number().nullable().optional(), // in days (legacy)
  minAccountAgeDays: z.number().nullable().optional(), // in days (new)
  watermarksAllowed: z.boolean().nullable().optional(),
  sellingAllowed: redditCommunitySellingPolicySchema.optional(),
  promotionalLinksAllowed: ruleAllowanceSchema.optional(),
  titleRules: z.array(z.string()).optional().default([]),
  contentRules: z.array(z.string()).optional().default([]),
  bannedContent: z.array(z.string()).optional().default([]),
  formattingRequirements: z.array(z.string()).optional().default([]),
  notes: z.string().optional(),
  verificationRequired: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  requiresOriginalContent: z.boolean().optional(),
  nsfwRequired: z.boolean().optional(),
  maxPostsPerDay: z.number().nullable().optional(),
  cooldownHours: z.number().nullable().optional()
}).optional();
  eligibility: redditCommunityEligibilityRulesSchema.default(defaultEligibilityRules),
  content: redditCommunityContentRulesSchema.default(defaultContentRules),
  posting: redditCommunityPostingRulesSchema.default(defaultPostingRules),
  notes: z.string().nullable().optional().default(null)
});

export type RedditCommunityRuleSet = z.infer<typeof redditCommunityRuleSetSchema>;

// Posting limits schema
export const postingLimitsSchema = z.object({
  perDay: z.number().nullable().optional(),
  perWeek: z.number().nullable().optional(),
  daily: z.number().nullable().optional(), // legacy support
  weekly: z.number().nullable().optional(), // legacy support
  cooldownHours: z.number().nullable().optional()
}).nullable().optional();

export type PostingLimits = z.infer<typeof postingLimitsSchema>;

// ==========================================
// CANONICAL REDDIT COMMUNITY ZOD SCHEMA
// ==========================================

export const redditCommunityZodSchema = z.object({
  id: z.string(),
  name: z.string(),
  displayName: z.string(),
  members: z.number(),
  engagementRate: z.number(),
  category: categorySchema,
  verificationRequired: z.boolean(),
  promotionAllowed: promotionAllowedSchema,
  postingLimits: postingLimitsSchema,
  rules: redditCommunityRuleSetSchema,
  bestPostingTimes: z.array(z.string()).optional(),
  averageUpvotes: z.number().nullable().optional(),
  successProbability: z.number().nullable().optional(),
  growthTrend: growthTrendSchema.optional(),
  modActivity: modActivitySchema.optional(),
  description: z.string().nullable().optional(),
  tags: z.array(z.string()).optional(),
  competitionLevel: competitionLevelSchema.optional()
});

export const redditCommunityArrayZodSchema = z.array(redditCommunityZodSchema);

export type RedditCommunityZod = z.infer<typeof redditCommunityZodSchema>;

// Default rule set factory
export const createDefaultRules = (): RedditCommunityRuleSet => ({
  minKarma: null,
  minAccountAge: null,
  minAccountAgeDays: null,
  watermarksAllowed: null,
  sellingAllowed: undefined,
  promotionalLinksAllowed: undefined,
  titleRules: [],
  contentRules: [],
  bannedContent: [],
  formattingRequirements: [],
  notes: undefined,
  verificationRequired: false,
  requiresApproval: false,
  requiresOriginalContent: false,
  nsfwRequired: false,
  maxPostsPerDay: null,
  cooldownHours: null
});
export const createDefaultRules = (): RedditCommunityRuleSet => redditCommunityRuleSetSchema.parse({});

export const redditCommunities = pgTable("reddit_communities", {
  id: varchar("id", { length: 100 }).primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  displayName: varchar("display_name", { length: 255 }).notNull(),
  members: integer("members").notNull(),
  engagementRate: integer("engagement_rate").notNull(),
  category: varchar("category", { length: 50 }).notNull(),
  verificationRequired: boolean("verification_required").default(false).notNull(),
  promotionAllowed: varchar("promotion_allowed", { length: 20 }).default("no").notNull(),
  postingLimits: jsonb("posting_limits"),
  rules: jsonb("rules").$type<RedditCommunityRuleSet>(),
  bestPostingTimes: jsonb("best_posting_times").$type<string[]>(),
  averageUpvotes: integer("average_upvotes"),
  successProbability: integer("success_probability"),
  growthTrend: varchar("growth_trend", { length: 20 }),
  modActivity: varchar("mod_activity", { length: 20 }),
  description: text("description"),
  tags: jsonb("tags").$type<string[]>(),
  competitionLevel: varchar("competition_level", { length: 20 })
});
export type RedditCommunity = typeof redditCommunities.$inferSelect;
export type InsertRedditCommunity = typeof redditCommunities.$inferInsert;
export const insertRedditCommunitySchema = createInsertSchema(redditCommunities);
export const insertRedditCommunitySchema = createInsertSchema(redditCommunities, {
  rules: redditCommunityRuleSetSchema.optional(),
  postingLimits: postingLimitsSchema
});

export const subscriptions = pgTable("subscriptions", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).unique().notNull(),
  status: varchar("status", { length: 20 }).notNull(), // "active" | "past_due" | "canceled"
  plan: varchar("plan", { length: 20 }).notNull(), // "free" | "pro"
  priceCents: integer("price_cents").notNull(),
  processor: varchar("processor", { length: 20 }).notNull(), // "ccbill" | "segpay" | "epoch" | "crypto"
  processorSubId: varchar("processor_sub_id", { length: 255 }),
  currentPeriodEnd: timestamp("current_period_end"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const invoices = pgTable("invoices", {
  id: serial("id").primaryKey(),
  subscriptionId: integer("subscription_id").references(() => subscriptions.id).notNull(),
  amountCents: integer("amount_cents").notNull(),
  status: varchar("status", { length: 20 }).notNull(), // "paid" | "failed" | "refunded"
  processor: varchar("processor", { length: 20 }).notNull(),
  processorRef: varchar("processor_ref", { length: 255 }),
  referralCodeId: integer("referral_code_id").references(() => referralCodes.id), // Phase 5: Referral simplification
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

tests/integration/reddit-communities-schema.test.ts
+126
-80

/* eslint-env node, jest */
import { describe, test, expect } from 'vitest';
import { describe, test, expect, beforeAll, vi } from 'vitest';
import request from 'supertest';
import { createApp } from '../../server/app';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import type { RedditCommunityRuleSet } from '@shared/schema';

interface ApiCommunity {
  id: string;
  name: string;
  displayName: string;
  members: number;
  engagementRate: number;
  promotionAllowed: string;
  rules: RedditCommunityRuleSet;
  [key: string]: unknown;
}

let createApp: typeof import('../../server/app').createApp;
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '../..');
const fullSeedPath = path.join(projectRoot, 'server/seeds/reddit-communities-full.json');
const seededCommunities = JSON.parse(fs.readFileSync(fullSeedPath, 'utf8'));

vi.mock('../../server/middleware/security.ts', async () => {
  const actual = await vi.importActual<typeof import('../../server/middleware/security.ts')>('../../server/middleware/security.ts');
  return { ...actual, validateEnvironment: () => {} };
});

vi.mock('../../server/admin-routes.js', async () => {
  const actual = await vi.importActual<typeof import('../../server/admin-routes.js')>('../../server/admin-routes.js');
  return {
    ...actual,
    requireAdmin: (_req: unknown, _res: unknown, next: () => void) => next(),
    requireSuperAdmin: (_req: unknown, _res: unknown, next: () => void) => next(),
  };
});

vi.mock('../../server/reddit-communities.ts', async () => {
  const actual = await vi.importActual<typeof import('../../server/reddit-communities.ts')>('../../server/reddit-communities.ts');
  return {
    ...actual,
    listCommunities: async () => seededCommunities,
    searchCommunities: async () => seededCommunities,
  };
});

beforeAll(async () => {
  if (!process.env.OPENAI_API_KEY) {
    process.env.OPENAI_API_KEY = 'test-openai-key';
  }
  if (!process.env.GOOGLE_GENAI_API_KEY) {
    process.env.GOOGLE_GENAI_API_KEY = 'test-google-key';
  }
  if (!process.env.REDDIT_CLIENT_ID) {
    process.env.REDDIT_CLIENT_ID = 'test-client-id';
  }
  if (!process.env.REDDIT_CLIENT_SECRET) {
    process.env.REDDIT_CLIENT_SECRET = 'test-client-secret';
  }
  if (!process.env.ADMIN_EMAIL) {
    process.env.ADMIN_EMAIL = 'admin@example.com';
  }
  if (!process.env.ADMIN_PASSWORD_HASH) {
    process.env.ADMIN_PASSWORD_HASH = 'test-hash-0123456789abcdef0123456789abcdef';
  }
  if (!process.env.SESSION_SECRET) {
    process.env.SESSION_SECRET = 'test-session-secret-0123456789ABCDEF1234567890';
  }
  if (!process.env.JWT_SECRET) {
    process.env.JWT_SECRET = 'jwt-secret-0123456789abcdef0123456789abcdef';
  }
  if (!process.env.STRIPE_SECRET_KEY) {
    process.env.STRIPE_SECRET_KEY = 'sk_test_123';
  }
  if (!process.env.STRIPE_API_VERSION) {
    process.env.STRIPE_API_VERSION = '2023-10-16';
  }

  ({ createApp } = await import('../../server/app'));
});

describe('Reddit Communities Schema Integration', () => {

  test('should return communities with structured rules schema from seeded data', async () => {
    const { app } = await createApp();
    const { app } = await createApp({ startQueue: false, configureStaticAssets: false });
    const response = await request(app)
      .get('/api/reddit/communities')
      .expect(200);

    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBeGreaterThan(0);
    
    // Test the first community's structure
    const community = response.body[0];
    expect(community).toBeDefined();

    // Verify the community has the expected basic structure
    expect(community.id).toBeDefined();
    expect(community.name).toBeDefined();
    expect(community.displayName).toBeDefined();
    expect(typeof community.members).toBe('number');
    expect(typeof community.engagementRate).toBe('number');

    // Verify the rules object contains structured fields
    expect(community.rules).toBeDefined();
    expect(typeof community.rules).toBe('object');

    // Test that sellingAllowed uses the new enum values (not boolean)
    if (community.rules.sellingAllowed !== undefined) {
      expect(['allowed', 'limited', 'not_allowed', 'unknown']).toContain(community.rules.sellingAllowed);
    }

    // Test that promotionalLinksAllowed uses enum values if present
    if (community.rules.promotionalLinksAllowed !== undefined) {
      expect(['yes', 'limited', 'no']).toContain(community.rules.promotionalLinksAllowed);
    }
    const communities = response.body as ApiCommunity[];
    expect(communities.length).toBeGreaterThan(0);

    // Test optional numeric fields are either number or undefined
    if (community.rules.minKarma !== undefined) {
      expect(typeof community.rules.minKarma).toBe('number');
    }
    if (community.rules.minAccountAge !== undefined) {
      expect(typeof community.rules.minAccountAge).toBe('number');
    }
    // Regression: ensure a known seeded community exposes structured rule fields
    const gonewild = communities.find((community) => community.id === 'gonewild');
    expect(gonewild).toBeDefined();
    expect(gonewild.rules).toBeDefined();
    expect(gonewild.rules.content.sellingPolicy).toBe('not_allowed');
    expect(gonewild.rules.content.watermarksAllowed).toBe(false);
    expect(gonewild.rules.eligibility.verificationRequired).toBe(true);
    expect(gonewild.rules.posting.maxPostsPerDay).toBe(3);

    // Test array fields are arrays if present
    if (community.rules.titleRules !== undefined) {
      expect(Array.isArray(community.rules.titleRules)).toBe(true);
    }
    if (community.rules.contentRules !== undefined) {
      expect(Array.isArray(community.rules.contentRules)).toBe(true);
    }
    // Verify canonical structure for the first response element as well
    const community = communities[0];
    expect(community.rules).toHaveProperty('eligibility');
    expect(community.rules).toHaveProperty('content');
    expect(community.rules).toHaveProperty('posting');
    expect(Array.isArray(community.rules.content.titleGuidelines)).toBe(true);
    expect(Array.isArray(community.rules.content.contentGuidelines)).toBe(true);
  });

  test('should validate schema consistency across multiple communities', async () => {
    const { app } = await createApp();
    const { app } = await createApp({ startQueue: false, configureStaticAssets: false });
    const response = await request(app)
      .get('/api/reddit/communities')
      .expect(200);

    expect(Array.isArray(response.body)).toBe(true);
    
    // Test multiple communities to ensure schema consistency
    const communitiesToTest = response.body.slice(0, 3); // Test first 3 communities
    
    const communities = response.body as ApiCommunity[];

    const communitiesToTest = communities.slice(0, 3);

    for (const community of communitiesToTest) {
      // Each community should have consistent required fields
      expect(community.id).toBeDefined();
      expect(community.name).toBeDefined();
      expect(community.rules).toBeDefined();
      expect(typeof community.rules).toBe('object');
      expect(['allowed', 'limited', 'not_allowed', 'unknown']).toContain(community.rules.content.sellingPolicy);

      // sellingAllowed should be enum if present, not boolean
      if (community.rules.sellingAllowed !== undefined) {
        expect(typeof community.rules.sellingAllowed).toBe('string');
        expect(['allowed', 'limited', 'not_allowed', 'unknown']).toContain(community.rules.sellingAllowed);
      const watermarks = community.rules.content.watermarksAllowed;
      if (watermarks !== null) {
        expect(typeof watermarks).toBe('boolean');
      }

      // Ensure watermarksAllowed stays boolean (not affected by our enum changes)
      if (community.rules.watermarksAllowed !== undefined) {
        expect(typeof community.rules.watermarksAllowed).toBe('boolean');
      const posting = community.rules.posting;
      if (posting.maxPostsPerDay !== null && posting.maxPostsPerDay !== undefined) {
        expect(typeof posting.maxPostsPerDay).toBe('number');
      }
      if (posting.cooldownHours !== null && posting.cooldownHours !== undefined) {
        expect(typeof posting.cooldownHours).toBe('number');
      }
    }
  });

  test('should ensure new schema fields are properly serialized', async () => {
    const { app } = await createApp();
    const { app } = await createApp({ startQueue: false, configureStaticAssets: false });
    const response = await request(app)
      .get('/api/reddit/communities?category=general')
      .expect(200);

    expect(Array.isArray(response.body)).toBe(true);
    
    // Find a community that has some of the new fields
    const communityWithRules = response.body.find((community: any) => 
      community.rules && Object.keys(community.rules).length > 2
    );
    
    const communities = response.body as ApiCommunity[];

    const communityWithRules = communities.find((community) => community.rules.content.linkRestrictions.length > 0);

    if (communityWithRules) {
      const rules = communityWithRules.rules;
      
      // Test that new optional fields are properly handled
      if (rules.minAccountAgeDays !== undefined) {
        expect(typeof rules.minAccountAgeDays).toBe('number');
      }
      if (rules.requiresOriginalContent !== undefined) {
        expect(typeof rules.requiresOriginalContent).toBe('boolean');
      }
      if (rules.bannedContent !== undefined) {
        expect(Array.isArray(rules.bannedContent)).toBe(true);
      }
      if (rules.formattingRequirements !== undefined) {
        expect(Array.isArray(rules.formattingRequirements)).toBe(true);
      }
      if (rules.notes !== undefined) {
        expect(typeof rules.notes).toBe('string');

      expect(Array.isArray(rules.content.linkRestrictions)).toBe(true);
      expect(Array.isArray(rules.content.bannedContent)).toBe(true);
      expect(Array.isArray(rules.content.formattingRequirements)).toBe(true);
      expect(typeof rules.content.requiresOriginalContent).toBe('boolean');
      if (rules.eligibility.minAccountAgeDays !== null) {
        expect(typeof rules.eligibility.minAccountAgeDays).toBe('number');
      }
    }
  });
});
tests/routes/admin-communities.test.ts
+272
-175

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import supertest from 'supertest';
import express from 'express';
import { adminCommunitiesRouter } from '../../server/routes/admin-communities.js';

// Mock dependencies with factory functions
vi.mock('../../server/reddit-communities.js', () => ({
  listCommunities: vi.fn(),
  createCommunity: vi.fn(),
  updateCommunity: vi.fn(),
  deleteCommunity: vi.fn(),
}));

vi.mock('../../server/middleware/auth.js', () => ({
  authenticateToken: vi.fn()
}));

vi.mock('../../server/admin-routes.js', () => ({
  requireAdmin: vi.fn()
}));

vi.mock('@shared/schema', () => ({
  insertRedditCommunitySchema: {
    parse: vi.fn(),
    partial: vi.fn().mockReturnValue({
      parse: vi.fn()
    })
  }
}));

// Import mocked functions
import { listCommunities, createCommunity, updateCommunity, deleteCommunity } from '../../server/reddit-communities.js';
import { authenticateToken } from '../../server/middleware/auth.js';
import { requireAdmin } from '../../server/admin-routes.js';
import { insertRedditCommunitySchema } from '@shared/schema';
import type { InsertRedditCommunity } from '@shared/schema';

const mockListCommunities = vi.mocked(listCommunities);
const mockCreateCommunity = vi.mocked(createCommunity);
const mockUpdateCommunity = vi.mocked(updateCommunity);
const mockDeleteCommunity = vi.mocked(deleteCommunity);
const mockAuthenticateToken = vi.mocked(authenticateToken);
const mockRequireAdmin = vi.mocked(requireAdmin);
const mockSchema = vi.mocked(insertRedditCommunitySchema);

interface TestEligibilityRules {
  minKarma: number | null;
  minAccountAgeDays: number | null;
  verificationRequired: boolean;
  requiresApproval: boolean;
}

interface TestContentRules {
  watermarksAllowed: boolean | null;
  sellingPolicy: 'allowed' | 'limited' | 'not_allowed' | 'unknown';
  promotionalLinks: 'yes' | 'limited' | 'no' | null;
  requiresOriginalContent: boolean;
  nsfwRequired: boolean;
  titleGuidelines: string[];
  contentGuidelines: string[];
  linkRestrictions: string[];
  bannedContent: string[];
  formattingRequirements: string[];
}

interface TestPostingRules {
  maxPostsPerDay: number | null;
  cooldownHours: number | null;
}

interface TestRuleSet {
  eligibility: TestEligibilityRules;
  content: TestContentRules;
  posting: TestPostingRules;
  notes: string | null;
}

const makeRules = (overrides: Partial<TestRuleSet> = {}): TestRuleSet => ({
  eligibility: {
    minKarma: null,
    minAccountAgeDays: null,
    verificationRequired: false,
    requiresApproval: false,
    ...(overrides.eligibility ?? {})
  },
  content: {
    watermarksAllowed: null,
    sellingPolicy: 'unknown',
    promotionalLinks: null,
    requiresOriginalContent: false,
    nsfwRequired: false,
    titleGuidelines: [],
    contentGuidelines: [],
    linkRestrictions: [],
    bannedContent: [],
    formattingRequirements: [],
    ...(overrides.content ?? {})
  },
  posting: {
    maxPostsPerDay: null,
    cooldownHours: null,
    ...(overrides.posting ?? {})
  },
  notes: overrides.notes ?? null
});
const mockRequireAdmin = vi.mocked(requireAdmin);

describe('Admin Communities Routes', () => {
  let app: express.Application;
  let request: supertest.SuperTest<supertest.Test>;

  beforeEach(() => {
    app = express();
    app.use(express.json());
    app.use('/api/admin/communities', adminCommunitiesRouter);
    request = supertest(app);
    
    // Reset mocks and setup default successful auth
    vi.clearAllMocks();
    mockAuthenticateToken.mockImplementation((req: any, res: any, next: any) => {
      req.user = {
        id: 1,
        username: 'admin',
        email: 'admin@test.com',
        isAdmin: true,
        role: 'admin',
        tier: 'pro'
      };
      next();
    mockSchema.parse.mockImplementation(
      (value: InsertRedditCommunity) => value
    );
    mockSchema.partial.mockReturnValue({
      parse: vi.fn((value: Partial<InsertRedditCommunity>) => value)
    });
    mockRequireAdmin.mockImplementation((req: any, res: any, next: any) => {
    mockRequireAdmin.mockImplementation((
      _req: express.Request,
      _res: express.Response,
      next: express.NextFunction
    ) => {
      next();
    });
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  describe('GET /api/admin/communities', () => {
    it('should list all communities', async () => {
      const mockCommunities = [
        {
          id: 'test1',
          name: 'testcommunity',
          displayName: 'Test Community',
          description: 'A test community',
          category: 'photography',
          members: 1000,
          engagementRate: 50,
          verificationRequired: false,
          promotionAllowed: 'yes',
          rules: {
            sellingAllowed: 'allowed',
            minKarma: 100,
            minAccountAge: 30,
            verificationRequired: false,
            watermarksAllowed: true,
            maxPostsPerDay: 5,
            cooldownHours: 24,
            requiresApproval: false,
            titleRules: [],
            contentRules: [],
            linkRestrictions: []
          },
          rules: makeRules({
            eligibility: {
              minKarma: 100,
              minAccountAgeDays: 30,
              verificationRequired: false,
              requiresApproval: false,
            },
            content: {
              sellingPolicy: 'allowed',
              watermarksAllowed: true,
              promotionalLinks: null,
              requiresOriginalContent: false,
              nsfwRequired: false,
              titleGuidelines: [],
              contentGuidelines: [],
              linkRestrictions: [],
              bannedContent: [],
              formattingRequirements: [],
            },
            posting: {
              maxPostsPerDay: 5,
              cooldownHours: 24,
            }
          }),
          postingLimits: null,
          successProbability: 85,
          competitionLevel: 'medium',
          growthTrend: 'up',
          modActivity: 'active',
          modActivity: 'high',
          bestPostingTimes: ['9:00 AM', '6:00 PM'],
          averageUpvotes: 250,
          tags: ['photography', 'art']
        }
      ];

      mockListCommunities.mockResolvedValue(mockCommunities);

      const response = await request
        .get('/api/admin/communities')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveLength(1);
      expect(response.body.data[0]).toMatchObject({
      expect(Array.isArray(response.body)).toBe(true);
      expect(response.body).toHaveLength(1);
      expect(response.body[0]).toMatchObject({
        id: 'test1',
        name: 'testcommunity',
        displayName: 'Test Community'
      });
      expect(response.body[0].rules.content.sellingPolicy).toBe('allowed');
      expect(response.body[0].rules.eligibility.minKarma).toBe(100);

      expect(mockListCommunities).toHaveBeenCalledOnce();
    });

    it('should handle list communities error', async () => {
      mockListCommunities.mockRejectedValue(new Error('Database error'));

      const response = await request
        .get('/api/admin/communities')
        .expect(500);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toBe('Failed to load communities');
      expect(response.body).toEqual({ message: 'Failed to load communities' });
    });
  });

  describe('POST /api/admin/communities', () => {
    it('should create a new community', async () => {
      const newCommunityData = {
        id: 'newtest',
        name: 'newtestcommunity',
        displayName: 'New Test Community',
        description: 'A new test community',
        category: 'general',
        members: 0,
        engagementRate: 0,
        verificationRequired: false,
        promotionAllowed: 'no'
      };

      const createdCommunity = {
        ...newCommunityData,
        rules: {
          sellingAllowed: 'not_allowed',
          minKarma: null,
          minAccountAge: null,
          verificationRequired: false,
          watermarksAllowed: true,
          maxPostsPerDay: null,
          cooldownHours: null,
          requiresApproval: false,
          titleRules: [],
          contentRules: [],
          linkRestrictions: []
        },
        rules: makeRules({
          eligibility: {
            minKarma: null,
            minAccountAgeDays: null,
            verificationRequired: false,
            requiresApproval: false,
          },
          content: {
            sellingPolicy: 'not_allowed',
            watermarksAllowed: true,
            promotionalLinks: null,
            requiresOriginalContent: false,
            nsfwRequired: false,
            titleGuidelines: [],
            contentGuidelines: [],
            linkRestrictions: [],
            bannedContent: [],
            formattingRequirements: [],
          },
          posting: {
            maxPostsPerDay: null,
            cooldownHours: null,
          }
        }),
        postingLimits: null,
        successProbability: null,
        competitionLevel: null,
        growthTrend: null,
        modActivity: null,
        bestPostingTimes: null,
        averageUpvotes: null,
        tags: null
      };

      mockCreateCommunity.mockResolvedValue(createdCommunity);

      const response = await request
        .post('/api/admin/communities')
        .send(newCommunityData)
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toMatchObject({
      expect(response.body).toMatchObject({
        id: 'newtest',
        name: 'newtestcommunity',
        displayName: 'New Test Community'
      });
      expect(response.body.rules.content.sellingPolicy).toBe('not_allowed');

      expect(mockCreateCommunity).toHaveBeenCalledWith(newCommunityData);
      expect(mockCreateCommunity).toHaveBeenCalledWith(expect.objectContaining(newCommunityData));
    });
  });

  describe('PUT /api/admin/communities/:id', () => {
    it('should update an existing community', async () => {
      const updateData = {
        displayName: 'Updated Test Community',
        description: 'An updated test community'
      };

      const updatedCommunity = {
        id: 'test1',
        name: 'testcommunity',
        displayName: 'Updated Test Community',
        description: 'An updated test community',
        category: 'photography',
        members: 1000,
        engagementRate: 50,
        verificationRequired: false,
        promotionAllowed: 'yes',
        rules: {
          sellingAllowed: 'allowed',
          minKarma: 100,
          minAccountAge: 30,
          verificationRequired: false,
          watermarksAllowed: true,
          maxPostsPerDay: 5,
          cooldownHours: 24,
          requiresApproval: false,
          titleRules: [],
          contentRules: [],
          linkRestrictions: []
        },
        rules: makeRules({
          eligibility: {
            minKarma: 100,
            minAccountAgeDays: 30,
            verificationRequired: false,
            requiresApproval: false,
          },
          content: {
            sellingPolicy: 'allowed',
            watermarksAllowed: true,
            promotionalLinks: null,
            requiresOriginalContent: false,
            nsfwRequired: false,
            titleGuidelines: [],
            contentGuidelines: [],
            linkRestrictions: [],
            bannedContent: [],
            formattingRequirements: [],
          },
          posting: {
            maxPostsPerDay: 5,
            cooldownHours: 24,
          }
        }),
        postingLimits: null,
        successProbability: 85,
        competitionLevel: 'medium',
        growthTrend: 'up',
        modActivity: 'active',
        modActivity: 'high',
        bestPostingTimes: ['9:00 AM', '6:00 PM'],
        averageUpvotes: 250,
        tags: ['photography', 'art']
      };

      mockUpdateCommunity.mockResolvedValue(updatedCommunity);

      const response = await request
        .put('/api/admin/communities/test1')
        .send(updateData)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data.displayName).toBe('Updated Test Community');
      expect(response.body.displayName).toBe('Updated Test Community');
      expect(response.body.rules.content.sellingPolicy).toBe('allowed');
      expect(response.body.rules.posting.maxPostsPerDay).toBe(5);

      expect(mockUpdateCommunity).toHaveBeenCalledWith('test1', updateData);
    });

    it('should handle update community not found', async () => {
      mockUpdateCommunity.mockResolvedValue(undefined);

      const response = await request
        .put('/api/admin/communities/nonexistent')
        .send({ displayName: 'Updated' })
        .expect(404);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toBe('Community not found');
      expect(response.body).toEqual({ message: 'Community not found' });
    });
  });

  describe('DELETE /api/admin/communities/:id', () => {
    it('should delete a community', async () => {
      // Mock that community exists
      mockListCommunities.mockResolvedValue([
        { id: 'test1', name: 'testcommunity', displayName: 'Test Community' }
      ]);
      mockDeleteCommunity.mockResolvedValue(undefined);

      const response = await request
        .delete('/api/admin/communities/test1')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toBe('Community deleted successfully');
      expect(response.body).toEqual({ message: 'Community deleted successfully' });

      expect(mockDeleteCommunity).toHaveBeenCalledWith('test1');
    });

    it('should return 404 when deleting non-existent community', async () => {
      mockListCommunities.mockResolvedValue([]);

      const response = await request
        .delete('/api/admin/communities/nonexistent')
        .expect(404);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toBe('Community not found');
      expect(response.body).toEqual({ message: 'Community not found' });
    });

    it('should handle delete community error', async () => {
      mockListCommunities.mockResolvedValue([
        { id: 'test1', name: 'testcommunity', displayName: 'Test Community' }
      ]);
      mockDeleteCommunity.mockRejectedValue(new Error('Database error'));

      const response = await request
        .delete('/api/admin/communities/test1')
        .expect(500);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toBe('Failed to delete community');
      expect(response.body).toEqual({ message: 'Failed to delete community' });
    });
  });

  describe('Authentication and Authorization', () => {
    it('should return 401 when no authentication token is provided', async () => {
      mockAuthenticateToken.mockImplementation((req: any, res: any, next: any) => {
      mockRequireAdmin.mockImplementation((req: express.Request, res: express.Response) => {
        res.status(401).json({ message: 'Access token required' });
      });

      const response = await request
        .get('/api/admin/communities')
        .expect(401);

      expect(response.body.message).toBe('Access token required');
    });

    it('should return 403 when user is not admin', async () => {
      mockAuthenticateToken.mockImplementation((req: any, res: any, next: any) => {
        req.user = {
          id: 2,
          username: 'regular_user',
          email: 'user@test.com',
          isAdmin: false,
          role: 'user',
          tier: 'free'
        };
        next();
      });
      
      mockRequireAdmin.mockImplementation((req: any, res: any, next: any) => {
      mockRequireAdmin.mockImplementation((req: express.Request, res: express.Response) => {
        res.status(403).json({ message: 'Admin access required' });
      });

      const response = await request
        .get('/api/admin/communities')
        .expect(403);

      expect(response.body.message).toBe('Admin access required');
    });

    it('should allow access for authenticated admin user', async () => {
      mockListCommunities.mockResolvedValue([]);

      const response = await request
        .get('/api/admin/communities')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toEqual([]);
      expect(Array.isArray(response.body)).toBe(true);
      expect(response.body).toEqual([]);
    });
  });

  describe('Input Validation and Error Handling', () => {
    it('should return 400 for invalid community data on creation', async () => {
      const invalidData = {
        name: '', // Invalid: empty name
        displayName: 'Test',
        // Missing required fields
      };

      mockCreateCommunity.mockRejectedValue(new Error('Validation failed: name is required'));

      const response = await request
        .post('/api/admin/communities')
        .send(invalidData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Validation failed');
      expect(response.body.message).toContain('Validation failed');
    });

    it('should return 400 for invalid enum values', async () => {
      const invalidEnumData = {
        id: 'test',
        name: 'testcommunity',
        displayName: 'Test Community',
        category: 'general',
        members: 1000,
        engagementRate: 50,
        verificationRequired: false,
        promotionAllowed: 'invalid_promotion', // Invalid enum value
        growthTrend: 'invalid_trend' // Invalid enum value
      };

      mockCreateCommunity.mockRejectedValue(
        new Error('Invalid enum values: promotionAllowed must be one of [yes, no, limited, subtle, strict, unknown]')
      );

      const response = await request
        .post('/api/admin/communities')
        .send(invalidEnumData)
        .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.error).toContain('Invalid enum values');
      expect(response.body.message).toContain('Invalid enum values');
    });
  });

  describe('Enum Variations and Response Shaping', () => {
    it('should handle all canonical selling policy enum variations', async () => {
      const communityWithSellingPolicies = [
        {
          id: 'allowed_selling',
          name: 'allowedcommunity',
          displayName: 'Allowed Community',
          category: 'selling',
          members: 1000,
          engagementRate: 50,
          verificationRequired: false,
          promotionAllowed: 'yes',
          rules: {
            sellingAllowed: 'allowed',
            minKarma: 100,
            minAccountAge: 30,
            verificationRequired: false,
            watermarksAllowed: true,
            titleRules: [],
            contentRules: [],
            linkRestrictions: []
          },
          rules: makeRules({
            eligibility: {
              minKarma: 100,
              minAccountAgeDays: 30,
              verificationRequired: false,
              requiresApproval: false,
            },
            content: {
              sellingPolicy: 'allowed',
              watermarksAllowed: true,
              titleGuidelines: [],
              contentGuidelines: [],
              linkRestrictions: [],
            },
          }),
          growthTrend: 'up',
          modActivity: 'high',
          competitionLevel: 'low'
        },
        {
          id: 'limited_selling',
          name: 'limitedcommunity',
          displayName: 'Limited Community',
          category: 'general',
          members: 2000,
          engagementRate: 40,
          verificationRequired: true,
          promotionAllowed: 'limited',
          rules: {
            sellingAllowed: 'limited',
            minKarma: 500,
            minAccountAge: 90,
            verificationRequired: true,
            watermarksAllowed: false,
            titleRules: ['No spammy titles'],
            contentRules: ['Quality content only'],
            linkRestrictions: ['No direct links']
          },
          rules: makeRules({
            eligibility: {
              minKarma: 500,
              minAccountAgeDays: 90,
              verificationRequired: true,
              requiresApproval: false,
            },
            content: {
              sellingPolicy: 'limited',
              watermarksAllowed: false,
              titleGuidelines: ['No spammy titles'],
              contentGuidelines: ['Quality content only'],
              linkRestrictions: ['No direct links'],
            },
          }),
          growthTrend: 'stable',
          modActivity: 'medium',
          competitionLevel: 'medium'
        },
        {
          id: 'not_allowed_selling',
          name: 'strictcommunity',
          displayName: 'Strict Community',
          category: 'discussion',
          members: 5000,
          engagementRate: 30,
          verificationRequired: true,
          promotionAllowed: 'no',
          rules: {
            sellingAllowed: 'not_allowed',
            minKarma: 1000,
            minAccountAge: 180,
            verificationRequired: true,
            watermarksAllowed: false,
            titleRules: ['Descriptive titles only'],
            contentRules: ['No promotional content'],
            linkRestrictions: ['No external links']
          },
          rules: makeRules({
            eligibility: {
              minKarma: 1000,
              minAccountAgeDays: 180,
              verificationRequired: true,
              requiresApproval: true,
            },
            content: {
              sellingPolicy: 'not_allowed',
              watermarksAllowed: false,
              titleGuidelines: ['Descriptive titles only'],
              contentGuidelines: ['No promotional content'],
              linkRestrictions: ['No external links'],
            },
          }),
          growthTrend: 'down',
          modActivity: 'low',
          competitionLevel: 'high'
        },
        {
          id: 'unknown_selling',
          name: 'unknowncommunity',
          displayName: 'Unknown Community',
          category: 'other',
          members: 500,
          engagementRate: 20,
          verificationRequired: false,
          promotionAllowed: 'unknown',
          rules: {
            sellingAllowed: 'unknown',
            minKarma: null,
            minAccountAge: null,
            verificationRequired: false,
            watermarksAllowed: true,
            titleRules: [],
            contentRules: [],
            linkRestrictions: []
          },
          rules: makeRules({
            content: {
              sellingPolicy: 'unknown',
              watermarksAllowed: true,
            },
          }),
          growthTrend: 'stable',
          modActivity: 'unknown',
          competitionLevel: 'unknown'
          competitionLevel: null
        }
      ];

      mockListCommunities.mockResolvedValue(communityWithSellingPolicies);

      const response = await request
        .get('/api/admin/communities')
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.data).toHaveLength(4);
      
      // Verify response shaping matches AdminCommunity interface
      const responseData = response.body.data;
      
      // Test 'allowed' policy community
      expect(responseData[0].rules.sellingAllowed).toBe('allowed');
      expect(Array.isArray(response.body)).toBe(true);
      expect(response.body).toHaveLength(4);

      const responseData = response.body;

      expect(responseData[0].rules.content.sellingPolicy).toBe('allowed');
      expect(responseData[0].rules.eligibility.minKarma).toBe(100);
      expect(responseData[0].growthTrend).toBe('up');
      expect(responseData[0].competitionLevel).toBe('low');
      
      // Test 'limited' policy community
      expect(responseData[1].rules.sellingAllowed).toBe('limited');

      expect(responseData[1].rules.content.sellingPolicy).toBe('limited');
      expect(responseData[1].rules.content.titleGuidelines).toEqual(['No spammy titles']);
      expect(responseData[1].growthTrend).toBe('stable');
      expect(responseData[1].competitionLevel).toBe('medium');
      
      // Test 'not_allowed' policy community
      expect(responseData[2].rules.sellingAllowed).toBe('not_allowed');

      expect(responseData[2].rules.content.sellingPolicy).toBe('not_allowed');
      expect(responseData[2].rules.eligibility.requiresApproval).toBe(true);
      expect(responseData[2].growthTrend).toBe('down');
      expect(responseData[2].competitionLevel).toBe('high');
      
      // Test 'unknown' policy community
      expect(responseData[3].rules.sellingAllowed).toBe('unknown');

      expect(responseData[3].rules.content.sellingPolicy).toBe('unknown');
      expect(responseData[3].growthTrend).toBe('stable');
      expect(responseData[3].competitionLevel).toBe('unknown');
      expect(responseData[3].competitionLevel).toBeNull();
    });

    it('should properly shape response to match AdminCommunity interface', async () => {
      const communityFromDB = {
        id: 'test-shaping',
        name: 'testshaping',
        displayName: 'Test Shaping Community',
        description: 'Test description',
        category: 'photography',
        members: 1500,
        engagementRate: 65,
        verificationRequired: true,
        promotionAllowed: 'limited',
        rules: {
          sellingAllowed: 'limited',
          minKarma: 200,
          minAccountAge: 60,
          verificationRequired: true,
          watermarksAllowed: false,
          maxPostsPerDay: 3,
          cooldownHours: 12,
          requiresApproval: true,
          titleRules: ['Clear titles only'],
          contentRules: ['High quality content'],
          linkRestrictions: ['Approved links only']
        },
        rules: makeRules({
          eligibility: {
            minKarma: 200,
            minAccountAgeDays: 60,
            verificationRequired: true,
            requiresApproval: true,
          },
          content: {
            sellingPolicy: 'limited',
            watermarksAllowed: false,
            titleGuidelines: ['Clear titles only'],
            contentGuidelines: ['High quality content'],
            linkRestrictions: ['Approved links only'],
          },
          posting: {
            maxPostsPerDay: 3,
            cooldownHours: 12,
          },
        }),
        postingLimits: {
          perDay: 3,
          perWeek: 15,
          cooldownHours: 12
        },
        averageUpvotes: 180,
        successProbability: 72,
        growthTrend: 'up',
        modActivity: 'high',
        competitionLevel: 'medium',
        bestPostingTimes: ['10:00 AM', '7:00 PM'],
        tags: ['photography', 'creative', 'art']
      };

      mockListCommunities.mockResolvedValue([communityFromDB]);

      const response = await request
        .get('/api/admin/communities')
        .expect(200);

      const shapedCommunity = response.body.data[0];
      const shapedCommunity = response.body[0];
      
      // Verify all AdminCommunity interface fields are present and correctly shaped
      expect(shapedCommunity).toHaveProperty('id', 'test-shaping');
      expect(shapedCommunity).toHaveProperty('name', 'testshaping');
      expect(shapedCommunity).toHaveProperty('displayName', 'Test Shaping Community');
      expect(shapedCommunity).toHaveProperty('description', 'Test description');
      expect(shapedCommunity).toHaveProperty('category', 'photography');
      expect(shapedCommunity).toHaveProperty('members', 1500);
      expect(shapedCommunity).toHaveProperty('engagementRate', 65);
      expect(shapedCommunity).toHaveProperty('verificationRequired', true);
      expect(shapedCommunity).toHaveProperty('promotionAllowed', 'limited');
      expect(shapedCommunity).toHaveProperty('rules');
      expect(shapedCommunity).toHaveProperty('postingLimits');
      expect(shapedCommunity).toHaveProperty('averageUpvotes', 180);
      expect(shapedCommunity).toHaveProperty('successProbability', 72);
      expect(shapedCommunity).toHaveProperty('growthTrend', 'up');
      expect(shapedCommunity).toHaveProperty('modActivity', 'high');
      expect(shapedCommunity).toHaveProperty('competitionLevel', 'medium');
      expect(shapedCommunity).toHaveProperty('bestPostingTimes');
      expect(shapedCommunity).toHaveProperty('tags');
      
      // Verify nested objects are properly shaped
      expect(shapedCommunity.rules).toMatchObject({
        sellingAllowed: 'limited',
      expect(shapedCommunity.rules.eligibility).toMatchObject({
        minKarma: 200,
        minAccountAge: 60,
        minAccountAgeDays: 60,
        verificationRequired: true,
        watermarksAllowed: false
        requiresApproval: true,
      });
      
      expect(shapedCommunity.rules.content).toMatchObject({
        sellingPolicy: 'limited',
        watermarksAllowed: false,
        titleGuidelines: ['Clear titles only'],
        contentGuidelines: ['High quality content'],
        linkRestrictions: ['Approved links only'],
      });
      expect(shapedCommunity.rules.posting).toMatchObject({
        maxPostsPerDay: 3,
        cooldownHours: 12,
      });

      expect(shapedCommunity.postingLimits).toMatchObject({
        perDay: 3,
        perWeek: 15,
        cooldownHours: 12
      });
      
      expect(shapedCommunity.tags).toEqual(['photography', 'creative', 'art']);
      expect(shapedCommunity.bestPostingTimes).toEqual(['10:00 AM', '7:00 PM']);
    });
  });
});
tests/unit/server/reddit-communities.rules.test.ts
+153
-118

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { describe, it, expect, beforeEach, afterEach, beforeAll, vi } from 'vitest';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { normalizeRules, inferSellingPolicy } from '../../../server/reddit-communities.js';

// Test interfaces
interface TestCommunityRules {
  sellingAllowed?: string;
  watermarksAllowed?: boolean;
  titleRules?: string[];
  contentRules?: string[];
  verificationRequired?: boolean;
  minKarma?: number;
  minAccountAge?: number;
  requiresApproval?: boolean;
  nsfwRequired?: boolean;
  maxPostsPerDay?: number;
  cooldownHours?: number;
}
import type { RedditCommunityRuleSet } from '@shared/schema';

vi.mock('@shared/schema', async () => {
  const actual = await vi.importActual<typeof import('../../../shared/schema.ts')>('../../../shared/schema.ts');
  return actual;
});

interface TestCommunity {
  id: string;
  name?: string;
  displayName?: string;
  category?: string;
  promotionAllowed?: string;
  successProbability?: number;
  growthTrend?: string;
  competitionLevel?: string;
  competitionLevel?: string | null;
  bestPostingTimes?: string[];
  rules: TestCommunityRules;
  rules: RedditCommunityRuleSet;
  [key: string]: unknown;
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let normalizeRules: typeof import('../../../server/reddit-communities.ts').normalizeRules;
let inferSellingPolicy: typeof import('../../../server/reddit-communities.ts').inferSellingPolicy;

beforeAll(async () => {
  vi.resetModules();
  const module = await import('../../../server/reddit-communities.ts');
  normalizeRules = module.normalizeRules;
  inferSellingPolicy = module.inferSellingPolicy;
});

describe('Reddit Communities Rules Unit Tests', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  describe('Seed data verification', () => {
    it('should load both seed datasets and verify structured rule content', async () => {
      const projectRoot = path.resolve(__dirname, '../../../');
      
      // Load both seed files
      const regularSeedPath = path.join(projectRoot, 'server/seeds/reddit-communities.json');
      const fullSeedPath = path.join(projectRoot, 'server/seeds/reddit-communities-full.json');
      
      expect(fs.existsSync(regularSeedPath)).toBe(true);
      expect(fs.existsSync(fullSeedPath)).toBe(true);
      
      // Parse seed data
      const regularSeed = JSON.parse(fs.readFileSync(regularSeedPath, 'utf8'));
      const fullSeed = JSON.parse(fs.readFileSync(fullSeedPath, 'utf8'));
      
      expect(Array.isArray(regularSeed)).toBe(true);
      expect(Array.isArray(fullSeed)).toBe(true);
      expect(regularSeed.length).toBeGreaterThan(0);
      expect(fullSeed.length).toBeGreaterThan(0);
      
      // Verify structured rule format in regular seed
      regularSeed.forEach((community: TestCommunity) => {
        expect(community).toHaveProperty('rules');
        expect(typeof community.rules).toBe('object');
        expect(community.rules).toHaveProperty('sellingAllowed');
        expect(community.rules).toHaveProperty('watermarksAllowed');
        expect(community.rules).toHaveProperty('titleRules');
        expect(community.rules).toHaveProperty('contentRules');
        expect(Array.isArray(community.rules.titleRules)).toBe(true);
        expect(Array.isArray(community.rules.contentRules)).toBe(true);
        expect(community.rules).toHaveProperty('eligibility');
        expect(community.rules).toHaveProperty('content');
        expect(community.rules).toHaveProperty('posting');
        expect(Array.isArray(community.rules.content.titleGuidelines)).toBe(true);
        expect(Array.isArray(community.rules.content.contentGuidelines)).toBe(true);
      });
      

      // Verify structured rule format in full seed
      fullSeed.forEach((community: TestCommunity) => {
        expect(community).toHaveProperty('rules');
        expect(typeof community.rules).toBe('object');
        expect(community.rules).toHaveProperty('sellingAllowed');
        expect(community.rules).toHaveProperty('watermarksAllowed');
        expect(community.rules).toHaveProperty('titleRules');
        expect(community.rules).toHaveProperty('contentRules');
        expect(Array.isArray(community.rules.titleRules)).toBe(true);
        expect(Array.isArray(community.rules.contentRules)).toBe(true);
        expect(community.rules).toHaveProperty('eligibility');
        expect(community.rules).toHaveProperty('content');
        expect(community.rules).toHaveProperty('posting');
        expect(Array.isArray(community.rules.content.titleGuidelines)).toBe(true);
        expect(Array.isArray(community.rules.content.contentGuidelines)).toBe(true);
      });
      

      // Test specific communities from different seeds
      const gonewild = fullSeed.find((c: TestCommunity) => c.id === 'gonewild');
      expect(gonewild).toBeDefined();
      expect(gonewild.rules.sellingAllowed).toBe('not_allowed');
      expect(gonewild.rules.watermarksAllowed).toBe(false);
      expect(gonewild.rules.verificationRequired).toBe(true);
      
      expect(gonewild?.rules.content.sellingPolicy).toBe('not_allowed');
      expect(gonewild?.rules.content.watermarksAllowed).toBe(false);
      expect(gonewild?.rules.eligibility.verificationRequired).toBe(true);

      const onlyfans = fullSeed.find((c: TestCommunity) => c.id === 'onlyfans');
      expect(onlyfans).toBeDefined();
      expect(onlyfans.rules.sellingAllowed).toBe('allowed');
      expect(onlyfans.rules.watermarksAllowed).toBe(true);
      
      expect(onlyfans?.rules.content.sellingPolicy).toBe('allowed');
      expect(onlyfans?.rules.content.watermarksAllowed).toBe(true);

      const fitness = regularSeed.find((c: TestCommunity) => c.id === 'fitness');
      expect(fitness).toBeDefined();
      expect(fitness.rules.minKarma).toBe(100);
      expect(fitness.rules.minAccountAge).toBe(30);
      expect(fitness.rules.sellingAllowed).toBe('not_allowed');
      expect(fitness.rules.watermarksAllowed).toBe(false);
      expect(fitness?.rules.eligibility.minKarma).toBe(100);
      expect(fitness?.rules.eligibility.minAccountAgeDays).toBe(30);
      expect(fitness?.rules.content.sellingPolicy).toBe('not_allowed');
      expect(fitness?.rules.content.watermarksAllowed).toBe(false);
    });

  });

  describe('Rule processing and normalization', () => {
    it('should handle legacy array-based rules with backward compatibility', async () => {
      // Test legacy array-based rules
      const legacyRules = ['Verification required', 'No selling', 'OC only'];
      const result = normalizeRules(legacyRules, 'no', 'gonewild');
      
      expect(result.contentRules).toEqual(legacyRules);
      expect(result.sellingAllowed).toBe('not_allowed'); // Inferred from promotion='no'
      expect(result.titleRules).toEqual([]);
      expect(result.verificationRequired).toBe(false); // Default value
      

      expect(result.content.contentGuidelines).toEqual(legacyRules);
      expect(result.content.sellingPolicy).toBe('not_allowed'); // Inferred from promotion='no'
      expect(result.content.titleGuidelines).toEqual([]);
      expect(result.eligibility.verificationRequired).toBe(false); // Default value

      // Test empty legacy rules
      const emptyResult = normalizeRules([], 'yes', 'selling');
      expect(emptyResult.contentRules).toEqual([]);
      expect(emptyResult.sellingAllowed).toBe('allowed'); // Inferred from promotion='yes'
      
      expect(emptyResult.content.contentGuidelines).toEqual([]);
      expect(emptyResult.content.sellingPolicy).toBe('allowed'); // Inferred from promotion='yes'

      // Test null rules
      const nullResult = normalizeRules(null, 'limited', 'general');
      expect(nullResult.sellingAllowed).toBe('unknown'); // Default value
      expect(nullResult.contentRules).toEqual([]);
      expect(nullResult.content.sellingPolicy).toBe('limited'); // Inferred from promotion
      expect(nullResult.content.contentGuidelines).toEqual([]);
    });

    it('should properly infer selling policy from promotion flags and category', async () => {
      // Test various promotion/category combinations using inferSellingPolicy directly
      expect(inferSellingPolicy('yes', 'general')).toBe('allowed');
      expect(inferSellingPolicy('no', 'general')).toBe('not_allowed');
      expect(inferSellingPolicy('limited', 'general')).toBe('limited');
      expect(inferSellingPolicy('subtle', 'general')).toBe('limited');
      expect(inferSellingPolicy('unknown', 'selling')).toBe('allowed');
      expect(inferSellingPolicy('unknown', 'gonewild')).toBe(undefined);
      
      expect(inferSellingPolicy('unknown', 'gonewild')).toBe('unknown');

      // Test with normalizeRules to verify integration
      const rules = { sellingAllowed: 'unknown' };
      expect(normalizeRules(rules, 'yes', 'general').sellingAllowed).toBe('unknown'); // Rules already specify policy
      expect(normalizeRules({}, 'yes', 'general').sellingAllowed).toBe('allowed'); // Empty rules, infer from flags
      const rules = { content: { sellingPolicy: 'unknown' } };
      expect(normalizeRules(rules, 'yes', 'general').content.sellingPolicy).toBe('allowed'); // Infer when rules are unknown
      expect(normalizeRules({}, 'yes', 'general').content.sellingPolicy).toBe('allowed'); // Empty rules, infer from flags
    });

    it('should derive insights warnings from structured rules', async () => {
      // Test deriving insights from rule combinations
      const testCommunity = {
        id: 'test_community',
        name: 'test_community',
        displayName: 'Test Community',
        category: 'test',
        promotionAllowed: 'limited',
        successProbability: 60,
        growthTrend: 'stable',
        competitionLevel: 'medium',
        bestPostingTimes: ['morning', 'evening'],
        rules: {
          minKarma: 500,
          minAccountAge: 30,
          watermarksAllowed: false,
          sellingAllowed: 'limited',
          titleRules: ['No clickbait', 'Include category'],
          contentRules: ['High quality only', 'No spam'],
          verificationRequired: true,
          requiresApproval: true,
          nsfwRequired: false,
          maxPostsPerDay: 1,
          cooldownHours: 48
          eligibility: {
            minKarma: 500,
            minAccountAgeDays: 30,
            verificationRequired: true,
            requiresApproval: true,
          },
          content: {
            watermarksAllowed: false,
            sellingPolicy: 'limited',
            titleGuidelines: ['No clickbait', 'Include category'],
            contentGuidelines: ['High quality only', 'No spam'],
            linkRestrictions: [],
            bannedContent: [],
            formattingRequirements: [],
            promotionalLinks: null,
            requiresOriginalContent: false,
            nsfwRequired: false,
          },
          posting: {
            maxPostsPerDay: 1,
            cooldownHours: 48,
          },
          notes: null,
        }
      };

      // Test insights derivation using normalizeRules directly
      const rules = normalizeRules(testCommunity.rules, testCommunity.promotionAllowed, testCommunity.category);
      const warnings: string[] = [];
      

      // Replicate the warning logic from getCommunityInsights
      if (rules.verificationRequired) warnings.push('Verification required - complete r/GetVerified');
      if (rules.sellingAllowed === 'no') warnings.push('No promotion/selling allowed - content only');
      if (rules.sellingAllowed === 'limited') warnings.push('Limited promotion allowed - check specific rules');
      if (rules.watermarksAllowed === false) warnings.push('Watermarks not allowed - use clean images');
      if (rules.minKarma && rules.minKarma > 50) warnings.push(`Requires ${rules.minKarma}+ karma`);
      if (rules.minAccountAge && rules.minAccountAge > 7) warnings.push(`Account must be ${rules.minAccountAge}+ days old`);
      if (rules.maxPostsPerDay && rules.maxPostsPerDay <= 1) warnings.push(`Limited to ${rules.maxPostsPerDay} post${rules.maxPostsPerDay === 1 ? '' : 's'} per day`);
      if (rules.cooldownHours && rules.cooldownHours >= 24) warnings.push(`${rules.cooldownHours}h cooldown between posts`);
      if (rules.requiresApproval) warnings.push('Posts require mod approval - expect delays');
      if (rules.eligibility.verificationRequired) warnings.push('Verification required - complete r/GetVerified');
      if (rules.content.sellingPolicy === 'not_allowed') warnings.push('No promotion/selling allowed - content only');
      if (rules.content.sellingPolicy === 'limited') warnings.push('Limited promotion allowed - check specific rules');
      if (rules.content.watermarksAllowed === false) warnings.push('Watermarks not allowed - use clean images');
      if (rules.eligibility.minKarma && rules.eligibility.minKarma > 50) warnings.push(`Requires ${rules.eligibility.minKarma}+ karma`);
      if (rules.eligibility.minAccountAgeDays && rules.eligibility.minAccountAgeDays > 7) warnings.push(`Account must be ${rules.eligibility.minAccountAgeDays}+ days old`);
      if (rules.posting.maxPostsPerDay && rules.posting.maxPostsPerDay <= 1) warnings.push(`Limited to ${rules.posting.maxPostsPerDay} post${rules.posting.maxPostsPerDay === 1 ? '' : 's'} per day`);
      if (rules.posting.cooldownHours && rules.posting.cooldownHours >= 24) warnings.push(`${rules.posting.cooldownHours}h cooldown between posts`);
      if (rules.eligibility.requiresApproval) warnings.push('Posts require mod approval - expect delays');
      
      // Verify warnings are generated correctly
      expect(warnings).toContain('Verification required - complete r/GetVerified');
      expect(warnings).toContain('Limited promotion allowed - check specific rules');
      expect(warnings).toContain('Watermarks not allowed - use clean images');
      expect(warnings).toContain('Requires 500+ karma');
      expect(warnings).toContain('Account must be 30+ days old');
      expect(warnings).toContain('Limited to 1 post per day');
      expect(warnings).toContain('48h cooldown between posts');
      expect(warnings).toContain('Posts require mod approval - expect delays');
      
      // Verify structured rules are properly normalized
      expect(rules.sellingAllowed).toBe('limited');
      expect(rules.watermarksAllowed).toBe(false);
      expect(rules.verificationRequired).toBe(true);
      expect(rules.content.sellingPolicy).toBe('limited');
      expect(rules.content.watermarksAllowed).toBe(false);
      expect(rules.eligibility.verificationRequired).toBe(true);
    });
  });

  describe('Schema validation', () => {
    it('should validate RedditCommunityRuleSet schema correctly', async () => {
      // Import schema components
      const { redditCommunityRuleSetSchema, createDefaultRules } = await import('../../../shared/schema.ts');
      
      const { redditCommunityRuleSetSchema } = await import('../../../shared/schema.ts');

      // Test valid rule set
      const validRules = {
        minKarma: 100,
        minAccountAge: 30,
        watermarksAllowed: false,
        sellingAllowed: 'not_allowed' as const,
        titleRules: ['No clickbait'],
        contentRules: ['High quality only'],
        verificationRequired: true,
        requiresApproval: false,
        nsfwRequired: true,
        maxPostsPerDay: 2,
        cooldownHours: 24
        eligibility: {
          minKarma: 100,
          minAccountAgeDays: 30,
          verificationRequired: true,
          requiresApproval: false,
        },
        content: {
          sellingPolicy: 'not_allowed' as const,
          watermarksAllowed: false,
          promotionalLinks: 'no',
          requiresOriginalContent: true,
          nsfwRequired: true,
          titleGuidelines: ['No clickbait'],
          contentGuidelines: ['High quality only'],
          linkRestrictions: ['Links allowed once per week'],
          bannedContent: ['Spam'],
          formattingRequirements: ['Use flair'],
        },
        posting: {
          maxPostsPerDay: 2,
          cooldownHours: 24,
        },
        notes: 'Example notes',
      };
      

      const result = redditCommunityRuleSetSchema.parse(validRules);
      expect(result).toMatchObject(validRules);
    });

    it('should create proper default rules', async () => {
      const { createDefaultRules } = await import('../../../shared/schema.ts');
      

      const defaults = createDefaultRules();
      

      expect(defaults).toMatchObject({
        minKarma: null,
        minAccountAge: null,
        watermarksAllowed: null,
        sellingAllowed: 'unknown',
        titleRules: [],
        contentRules: [],
        verificationRequired: false,
        requiresApproval: false,
        nsfwRequired: false,
        maxPostsPerDay: null,
        cooldownHours: null
        eligibility: {
          minKarma: null,
          minAccountAgeDays: null,
          verificationRequired: false,
          requiresApproval: false,
        },
        content: {
          sellingPolicy: 'unknown',
          watermarksAllowed: null,
          promotionalLinks: null,
          requiresOriginalContent: false,
          nsfwRequired: false,
          titleGuidelines: [],
          contentGuidelines: [],
          linkRestrictions: [],
          bannedContent: [],
          formattingRequirements: [],
        },
        posting: {
          maxPostsPerDay: null,
          cooldownHours: null,
        },
        notes: null,
      });
    });

    it('should validate sellingAllowed enum values', async () => {
    it('should validate sellingPolicy enum values', async () => {
      const { redditCommunityRuleSetSchema } = await import('../../../shared/schema.ts');
      

      const validValues = ['allowed', 'limited', 'not_allowed', 'unknown'];
      

      for (const value of validValues) {
        const rules = { sellingAllowed: value };
        const rules = { content: { sellingPolicy: value } };
        const result = redditCommunityRuleSetSchema.parse(rules);
        expect(result?.sellingAllowed).toBe(value);
        expect(result.content.sellingPolicy).toBe(value);
      }
      

      // Test invalid value
      expect(() => {
        redditCommunityRuleSetSchema.parse({ sellingAllowed: 'invalid' });
        redditCommunityRuleSetSchema.parse({ content: { sellingPolicy: 'invalid' } });
      }).toThrow();
    });
  });
});
tests/vitest-setup.ts
+4
-2

import dotenv from 'dotenv';
import { beforeEach } from 'vitest';

// Load .env.test file specifically for vitest tests
dotenv.config({ path: '.env.test' });

// Set default test environment variables if not present
process.env.APP_BASE_URL = process.env.APP_BASE_URL || 'https://thottopilot.com';
process.env.DATABASE_URL = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;
process.env.JWT_SECRET = process.env.JWT_SECRET || 'test-secret-key';
const fallbackDatabaseUrl = 'postgres://test:test@localhost:5432/testdb';
process.env.TEST_DATABASE_URL = process.env.TEST_DATABASE_URL || fallbackDatabaseUrl;
process.env.DATABASE_URL = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL || process.env.TEST_DATABASE_URL || fallbackDatabaseUrl;
process.env.JWT_SECRET = process.env.JWT_SECRET || 'test-secret-key-0123456789abcdef';
process.env.NODE_ENV = 'test';

// Clean up between tests
beforeEach(() => {
  // Reset any global state here if needed
});
