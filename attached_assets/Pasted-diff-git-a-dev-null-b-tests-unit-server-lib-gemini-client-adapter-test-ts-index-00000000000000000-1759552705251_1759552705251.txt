diff --git a//dev/null b/tests/unit/server/lib/gemini-client.adapter.test.ts
index 0000000000000000000000000000000000000000..3d911b2adf9abf822c07ece7944d5da4225d8c1d 100644
--- a//dev/null
+++ b/tests/unit/server/lib/gemini-client.adapter.test.ts
@@ -0,0 +1,77 @@
+import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
+
+import type { GeminiGenerateContentInput } from '../../../../server/lib/gemini-client';
+
+const googleGenAIModels = vi.hoisted(() => ({
+  generateContent: vi.fn()
+}));
+
+const googleGenAIConstructor = vi.hoisted(() =>
+  vi.fn(() => ({
+    models: {
+      generateContent: googleGenAIModels.generateContent
+    }
+  }))
+);
+
+vi.mock('@google/genai', () => ({
+  GoogleGenAI: googleGenAIConstructor
+}));
+
+let originalGeminiKey: string | undefined;
+
+describe('Gemini client model adapter', () => {
+  beforeEach(() => {
+    originalGeminiKey = process.env.GOOGLE_GENAI_API_KEY;
+    vi.clearAllMocks();
+    googleGenAIModels.generateContent.mockReset();
+    googleGenAIConstructor.mockReset();
+    process.env.GOOGLE_GENAI_API_KEY = 'unit-test-gemini-key';
+    vi.resetModules();
+  });
+
+  afterEach(() => {
+    vi.resetModules();
+    if (typeof originalGeminiKey === 'string') {
+      process.env.GOOGLE_GENAI_API_KEY = originalGeminiKey;
+    } else {
+      delete process.env.GOOGLE_GENAI_API_KEY;
+    }
+  });
+
+  it('flattens candidate content parts into the text helpers', async () => {
+    const nestedResponse = {
+      candidates: [
+        {
+          content: {
+            parts: [{ text: 'First' }, { text: ' second' }]
+          }
+        },
+        {
+          content: {
+            parts: [{ text: ' third' }]
+          }
+        }
+      ],
+      usageMetadata: { totalTokenCount: 42 }
+    };
+
+    googleGenAIModels.generateContent.mockResolvedValueOnce(nestedResponse);
+
+    const { getTextModel } = await import('../../../../server/lib/gemini-client.ts');
+    const textModel = getTextModel();
+    const prompt: GeminiGenerateContentInput = [
+      {
+        role: 'user',
+        parts: [{ text: 'Prompt' }]
+      }
+    ];
+
+    const result = await textModel.generateContent(prompt);
+
+    expect(result.text).toBe('First second third');
+    expect(result.response?.text?.()).toBe('First second third');
+    expect(result.candidates).toBe(nestedResponse.candidates);
+    expect(result.usageMetadata).toEqual({ totalTokenCount: 42 });
+  });
+});
