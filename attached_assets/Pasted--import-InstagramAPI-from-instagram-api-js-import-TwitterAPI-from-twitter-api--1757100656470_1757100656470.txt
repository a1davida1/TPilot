@@
-import { InstagramAPI } from './instagram-api.js';
-import { TwitterAPI } from './twitter-api.js';
-import { TikTokAPI } from './tiktok-api.js';
-import { YouTubeAPI } from './youtube-api.js';
-// Removed unused type imports
+import { InstagramAPI } from './instagram-api.js';
+import { TwitterAPI } from './twitter-api.js';
+import { TikTokAPI } from './tiktok-api.js';
+import { YouTubeAPI } from './youtube-api.js';
 
 export type Platform = 'instagram' | 'twitter' | 'tiktok' | 'youtube';
@@
-export class SocialMediaManager {
-  private apis: Map<Platform, any> = new Map();
+export class SocialMediaManager {
+  private apis: Map<Platform, InstagramAPI | TwitterAPI | TikTokAPI | YouTubeAPI> = new Map();
@@
-  connectAccount(platform: Platform, credentials: any) {
+  connectAccount(platform: Platform, credentials: Record<string, string>) {
@@
-        case 'twitter':
-          const twitterApi = api as TwitterAPI;
-          const mediaIds: string[] = [];
+        case 'twitter': {
+          const twitterApi = api as TwitterAPI;
+          const mediaIds: string[] = [];
@@
-          return await twitterApi.createTweet({
+          return await twitterApi.createTweet({
             text: content.hashtags
               ? `${content.text}\n\n${content.hashtags.map(tag => `#${tag}`).join(' ')}`
               : content.text,
             mediaIds: mediaIds.length > 0 ? mediaIds : undefined,
           });
+        }
@@
-            likes: metrics.find((m: any) => m.name === 'likes')?.values[0]?.value || 0,
-            comments: metrics.find((m: any) => m.name === 'comments')?.values[0]?.value || 0,
-            shares: metrics.find((m: any) => m.name === 'shares')?.values[0]?.value || 0,
-            views: metrics.find((m: any) => m.name === 'impressions')?.values[0]?.value || 0,
+            likes: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'likes')?.values[0]?.value || 0,
+            comments: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'comments')?.values[0]?.value || 0,
+            shares: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'shares')?.values[0]?.value || 0,
+            views: metrics.find((m: { name: string; values: { value: number }[] }) => m.name === 'impressions')?.values[0]?.value || 0,
@@
-  async getAccountMetrics(platform: Platform): Promise<any> {
+  async getAccountMetrics(platform: Platform): Promise<unknown> {
