### Review Summary - The parsed helpers for Reddit community mutations use explicit `as` assertions even though the Zod schema already infers `InsertRedditCommunity`/`Partial<InsertRedditCommunity>`. Removing those casts tightens type safety and follows the “no non-null assertions” guideline. - The seeding script also applies an unnecessary cast on the array of communities; the Zod parser’s return type is sufficient. - The `fix-type-errors.cjs` utility injects `any` into transformed code. Replacing these with `unknown` keeps the helper in line with the repository’s ban on `any`. - The CSRF middleware in `server/routes.ts` casts through `unknown` to satisfy Express’ `RequestHandler` type. A direct typed annotation avoids the double cast. ### Suggested Changes #### Remove redundant type assertions in Reddit community helpers :::task-stub{title="Rely on Zod inference instead of `as` casts"} - **File**: `server/reddit-communities.ts` - Replace helper functions so they return the schema’s inferred types directly. - Patch: ```diff diff --git a/server/reddit-communities.ts b/server/reddit-communities.ts @@ -const parseInsertRedditCommunity = (input: unknown): InsertRedditCommunity => { - return insertRedditCommunitySchema.parse(input) as InsertRedditCommunity; -}; - -const parsePartialInsertRedditCommunity = ( - input: unknown -): Partial<InsertRedditCommunity> => { - return insertRedditCommunitySchema.partial().parse(input) as Partial<InsertRedditCommunity>; -}; +const parseInsertRedditCommunity = (input: unknown): InsertRedditCommunity => + insertRedditCommunitySchema.parse(input); + +const parsePartialInsertRedditCommunity = ( + input: unknown +): Partial<InsertRedditCommunity> => + insertRedditCommunitySchema.partial().parse(input); ``` ::: #### Drop array cast in seed script :::task-stub{title="Leverage schema inference for community seeding"} - **File**: `server/seed-reddit-communities.ts` - Remove the manual cast when parsing the JSON payload. - Patch: ```diff diff --git a/server/seed-reddit-communities.ts b/server/seed-reddit-communities.ts @@ - const data = insertRedditCommunitySchema.array().parse(JSON.parse(raw)) as InsertRedditCommunity[]; + const data = insertRedditCommunitySchema.array().parse(JSON.parse(raw)); ``` ::: #### Align type-fix script with `no any` rule :::task-stub{title="Emit `unknown` instead of `any` in type-fix utility"} - **File**: `fix-type-errors.cjs` - Replace injected `any` annotations with `unknown`. - Patch: ```diff diff --git a/fix-type-errors.cjs b/fix-type-errors.cjs @@ - content = content.replace(/\.map\(\(([^,)]+),\s*([^)]+)\)/g, '.map(($1: any, $2: number)'); + content = content.replace(/\.map\(\(([^,)]+),\s*([^)]+)\)/g, '.map(($1: unknown, $2: number)'); @@ - content = content.replace(/function\s+(\w+)\(([^:)]+)\)/g, 'function $1($2: any)'); + content = content.replace(/function\s+(\w+)\(([^:)]+)\)/g, 'function $1($2: unknown)'); ``` ::: #### Simplify CSRF middleware typing :::task-stub{title="Annotate CSRF middleware without double cast"} - **File**: `server/routes.ts` - Give the middleware an explicit `RequestHandler` type and drop the `unknown` intermediary. - Patch: ```diff diff --git a/server/routes.ts b/server/routes.ts @@ - const csrfProtection = csrf({ - cookie: { - httpOnly: true, - secure: IS_PRODUCTION, - sameSite: 'strict' - } - }) as unknown as RequestHandler; + const csrfProtection: RequestHandler = csrf({ + cookie: { + httpOnly: true, + secure: IS_PRODUCTION, + sameSite: 'strict' + } + }); ``` ::: These changes keep the repository aligned with its strict TypeScript standards and streamline middleware typing for easier maintenance and production readiness.