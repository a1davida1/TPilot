diff --git a/client/src/components/reddit-communities.tsx b/client/src/components/reddit-communities.tsx
index 2865b9bf1dda36c042c0e1539de91f0e8bb42843..991279ed2e35df2a521eb0a64e9a2a7aef8ce564 100644
--- a/client/src/components/reddit-communities.tsx
+++ b/client/src/components/reddit-communities.tsx
@@ -56,57 +56,57 @@ interface RedditCommunity {
     watermarksAllowed?: boolean;
     sellingAllowed?: boolean;
     titleRules?: string[];
     contentRules?: string[];
   };
   bestPostingTimes: string[];
   averageUpvotes: number;
   successProbability: number;
   growthTrend: 'up' | 'stable' | 'down';
   modActivity: 'high' | 'medium' | 'low';
   description: string;
   tags: string[];
   competitionLevel: 'low' | 'medium' | 'high';
 }
 
 export function RedditCommunities() {
   const [searchTerm, setSearchTerm] = useState("");
   const [sortBy, setSortBy] = useState<'members' | 'engagement' | 'upvotes' | 'name' | 'success'>('success');
   const [filterCategory, setFilterCategory] = useState<string>('all');
   const [filterPromotion, setFilterPromotion] = useState<string>('all');
   const [filterVerification, setFilterVerification] = useState<string>('all');
   const [expandedRow, setExpandedRow] = useState<string | null>(null);
 
   // Fetch communities data
   const { data: communities = [], isLoading } = useQuery({
-    queryKey: ['/api/reddit-communities', filterCategory, searchTerm],
+    queryKey: ['/api/reddit/communities', filterCategory, searchTerm],
     queryFn: async () => {
       const params = new URLSearchParams();
       if (filterCategory !== 'all') params.append('category', filterCategory);
       if (searchTerm) params.append('search', searchTerm);
-      
-      const response = await apiRequest('GET', `/api/reddit-communities?${params.toString()}`);
+
+      const response = await apiRequest('GET', `/api/reddit/communities?${params.toString()}`);
       return response.json();
     },
     retry: false
   });
 
   const displayCommunities = communities;
 
   // Filter and sort communities
   const filteredCommunities = useMemo(() => {
     let filtered = Array.isArray(displayCommunities) ? [...displayCommunities] : [];
 
     // Search filter
     if (searchTerm) {
       filtered = filtered.filter(c => 
         c.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
         c.displayName.toLowerCase().includes(searchTerm.toLowerCase()) ||
         c.description.toLowerCase().includes(searchTerm.toLowerCase())
       );
     }
 
     // Category filter
     if (filterCategory !== 'all') {
       filtered = filtered.filter(c => c.category === filterCategory);
     }
 
