diff --git a/server/middleware/performance.ts b/server/middleware/performance.ts
index 5e498c9606a32540537621cbe666f974cfd7d323..1c7916eaa8a60b4c9be46b510a5f93e9284f1296 100644
--- a/server/middleware/performance.ts
+++ b/server/middleware/performance.ts
@@ -1,97 +1,87 @@
 import { Request, Response, NextFunction } from 'express';
 
 declare module 'express-serve-static-core' {
   interface Response {
     monitoredEnd?: Response['end'];
   }
 }
 
 interface PerformanceMetric {
   path: string;
   method: string;
   duration: number;
   statusCode: number;
   timestamp: Date;
   memoryUsage: NodeJS.MemoryUsage;
   userAgent?: string;
   userId?: string;
 }
 
 class PerformanceMonitor {
   private metrics: PerformanceMetric[] = [];
   private slowRequestThreshold = 1000; // 1 second
   private criticalThreshold = 3000; // 3 seconds
 
   middleware() {
-    const self = this; // Capture reference to PerformanceMonitor instance
     return (req: Request, res: Response, next: NextFunction) => {
       const start = process.hrtime.bigint();
       const startMemory = process.memoryUsage();
 
-      // Store original end function
       const originalEnd = res.end.bind(res);
-      
-      // Override end function to capture metrics
-      const monitoredEnd: Response['end'] = function (this: Response, ...args: any[]) {
-        // Restore original end function
+
+      const monitoredEnd: Response['end'] = (...args: Parameters<Response['end']>) => {
         res.end = originalEnd;
-        
-        // Calculate duration
+
         const end = process.hrtime.bigint();
-        const duration = Number(end - start) / 1000000; // Convert to milliseconds
-        
-        // Create metric
+        const duration = Number(end - start) / 1000000;
+
         const metric: PerformanceMetric = {
           path: req.path,
           method: req.method,
           duration,
           statusCode: res.statusCode,
           timestamp: new Date(),
           memoryUsage: process.memoryUsage(),
           userAgent: req.get('user-agent'),
           userId: (req as { user?: { id: string } }).user?.id
         };
-        
-        // Store metric
-        self.recordMetric(metric);
-        
-        // Log slow requests
-        if (duration > self.slowRequestThreshold) {
-          self.handleSlowRequest(metric);
+
+        this.recordMetric(metric);
+
+        if (duration > this.slowRequestThreshold) {
+          this.handleSlowRequest(metric);
         }
-        
-        // Alert on critical performance issues
-        if (duration > self.criticalThreshold) {
-          self.handleCriticalPerformance(metric);
+
+        if (duration > this.criticalThreshold) {
+          this.handleCriticalPerformance(metric);
         }
-        
-        // Call original end function
-        return originalEnd(...(args as Parameters<Response['end']>));
+
+        return originalEnd(...args);
       };
       res.end = monitoredEnd;
-      
+
       next();
     };
   }
 
   private recordMetric(metric: PerformanceMetric) {
     // Store metric
     this.metrics.push(metric);
     
     // Keep only last 1000 metrics in memory
     if (this.metrics.length > 1000) {
       this.metrics.shift();
     }
     
     // Log to console in development
     if (process.env.NODE_ENV === 'development' && metric.duration > 500) {
       console.log(`[PERF] ${metric.method} ${metric.path}: ${metric.duration.toFixed(2)}ms`);
     }
   }
 
   private handleSlowRequest(metric: PerformanceMetric) {
     console.warn('[SLOW REQUEST]', {
       path: metric.path,
       method: metric.method,
       duration: `${metric.duration.toFixed(2)}ms`,
       statusCode: metric.statusCode,
