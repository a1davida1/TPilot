Create ComplianceStatusDashboard component
Sep 22 · a1davida1/TPilot · main
+308-1
1. Create a new React component (e.g., `client/src/components/compliance/ComplianceStatusDashboard.tsx`) that renders cards or tables for each subreddit, showing dummy data for shadowban status, verification state, next post window, and the last five removals with reasons.
2. Structure the dummy data as an array of subreddit objects with fields like `name`, `shadowbanned`, `verificationStatus`, `nextPostTime`, and `recentRemovals`.
3. Ensure the component adheres to existing design tokens/utilities (Tailwind classes, shared UI primitives).
4. Add the component to the appropriate page (likely the compliance/automation area in `client/src/pages/admin.tsx` or wherever the compliance center will live) behind any necessary lazy imports.
5. Document the dummy data structure so backend integration can later replace it with live data.

Summary

    Introduced ComplianceStatusDashboard with documented interfaces, typed dummy compliance data, and Tailwind-styled cards and tables so backend services can later replace the mock array with live subreddit metrics.

Lazy-loaded the new dashboard into the admin page via a dedicated “Compliance” tab and Suspense fallback to keep the section isolated until the future automation backend is wired up.

Testing

    ✅ npm run lint (emitted existing repository warnings only)

❌ npm test (suite contains numerous pre-existing failures; run was interrupted after repeated errors unrelated to these changes)


client/src/components/compliance/ComplianceStatusDashboard.tsx
New
+285-0
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { AlertCircle, CheckCircle2, Clock3, ShieldAlert, ShieldCheck } from 'lucide-react';

/**
 * Describes a single removal event surfaced by the compliance dashboard.
 * - `id`: Stable identifier that can match the originating moderation log entry.
 * - `removedAt`: ISO timestamp for when the content was removed.
 * - `reason`: Moderation or automated rule reason for the removal.
 * - `actionTaken`: Optional follow-up action performed by moderators.
 */
export interface SubredditRemoval {
  id: string;
  removedAt: string;
  reason: string;
  actionTaken?: string;
}

/**
 * Shape of the subreddit level compliance metrics expected from the backend.
 * The dashboard currently renders an array of these objects while backend
 * integration is pending.
 * - `name`: Subreddit name without the leading `r/`.
 * - `shadowbanned`: Flag indicating if automation detected a shadowban.
 * - `verificationStatus`: Either `pending`, `review`, or `verified`.
 * - `nextPostTime`: ISO timestamp representing the next compliant posting window.
 * - `recentRemovals`: Chronological list of the latest moderation removals.
 */
export interface SubredditComplianceStatus {
  name: string;
  shadowbanned: boolean;
  verificationStatus: 'pending' | 'review' | 'verified';
  nextPostTime: string;
  recentRemovals: SubredditRemoval[];
}

/**
 * Temporary mocked data. Replace this structure with live compliance results
 * once the moderation ingestion pipeline is wired up.
 */
const dummyComplianceData: SubredditComplianceStatus[] = [
  {
    name: 'CreatorSupport',
    shadowbanned: false,
    verificationStatus: 'verified',
    nextPostTime: '2024-03-09T18:30:00Z',
    recentRemovals: [
      {
        id: 'CS-2051',
        removedAt: '2024-03-07T21:15:00Z',
        reason: 'Automod: Affiliate link outside allowed domains',
        actionTaken: 'Auto-removed'
      },
      {
        id: 'CS-2049',
        removedAt: '2024-03-06T16:03:00Z',
        reason: 'Manual: Low-effort promotion',
        actionTaken: 'Warning issued'
      },
      {
        id: 'CS-2045',
        removedAt: '2024-03-05T09:47:00Z',
        reason: 'Automod: Missing flair'
      },
      {
        id: 'CS-2041',
        removedAt: '2024-03-04T22:12:00Z',
        reason: 'Manual: Duplicate submission'
      },
      {
        id: 'CS-2036',
        removedAt: '2024-03-03T14:25:00Z',
        reason: 'Automod: Keyword filter triggered',
        actionTaken: 'Awaiting appeal'
      }
    ]
  },
  {
    name: 'GrowthPlaybook',
    shadowbanned: true,
    verificationStatus: 'review',
    nextPostTime: '2024-03-12T02:00:00Z',
    recentRemovals: [
      {
        id: 'GP-1189',
        removedAt: '2024-03-07T05:51:00Z',
        reason: 'Manual: Moderator removal - off topic'
      },
      {
        id: 'GP-1187',
        removedAt: '2024-03-06T12:29:00Z',
        reason: 'Automod: Prohibited service offering',
        actionTaken: 'Escalated to mods'
      },
      {
        id: 'GP-1181',
        removedAt: '2024-03-05T04:40:00Z',
        reason: 'Automod: Spam pattern detected'
      },
      {
        id: 'GP-1178',
        removedAt: '2024-03-04T19:13:00Z',
        reason: 'Manual: Rule 3 - Pricing disclosure'
      },
      {
        id: 'GP-1175',
        removedAt: '2024-03-04T08:32:00Z',
        reason: 'Automod: External link without verification'
      }
    ]
  },
  {
    name: 'AutomationHub',
    shadowbanned: false,
    verificationStatus: 'pending',
    nextPostTime: '2024-03-08T15:15:00Z',
    recentRemovals: [
      {
        id: 'AH-907',
        removedAt: '2024-03-07T17:05:00Z',
        reason: 'Automod: Flair mismatch',
        actionTaken: 'User notified'
      },
      {
        id: 'AH-905',
        removedAt: '2024-03-07T01:22:00Z',
        reason: 'Manual: Content flagged as duplicate'
      },
      {
        id: 'AH-902',
        removedAt: '2024-03-06T10:10:00Z',
        reason: 'Automod: Link shortener blocked'
      },
      {
        id: 'AH-899',
        removedAt: '2024-03-05T20:18:00Z',
        reason: 'Manual: Violates rule 2 - Provide context'
      },
      {
        id: 'AH-895',
        removedAt: '2024-03-05T06:45:00Z',
        reason: 'Automod: Frequent reposts detected',
        actionTaken: 'Cooldown applied'
      }
    ]
  }
];

const verificationCopy: Record<SubredditComplianceStatus['verificationStatus'], { label: string; tone: string }> = {
  verified: { label: 'Verified', tone: 'bg-emerald-100 text-emerald-700 border-emerald-200' },
  review: { label: 'In Review', tone: 'bg-amber-100 text-amber-700 border-amber-200' },
  pending: { label: 'Pending Submission', tone: 'bg-sky-100 text-sky-700 border-sky-200' }
};

const formatDateTime = (isoTimestamp: string) =>
  new Intl.DateTimeFormat('en-US', {
    dateStyle: 'medium',
    timeStyle: 'short'
  }).format(new Date(isoTimestamp));

export function ComplianceStatusDashboard() {
  return (
    <div className="space-y-6">
      {dummyComplianceData.map((subreddit) => {
        const verificationMeta = verificationCopy[subreddit.verificationStatus];

        return (
          <Card key={subreddit.name} className="border border-gray-200 bg-white shadow-sm">
            <CardHeader className="flex flex-col gap-3 border-b border-gray-100 bg-gray-50/80">
              <div className="flex flex-col gap-1 md:flex-row md:items-center md:justify-between">
                <CardTitle className="flex items-center gap-2 text-xl">
                  <span className="text-gray-900">r/{subreddit.name}</span>
                  <Badge
                    variant={subreddit.shadowbanned ? 'destructive' : 'secondary'}
                    className={`flex items-center gap-1 border ${
                      subreddit.shadowbanned
                        ? 'border-red-200 bg-red-50 text-red-700'
                        : 'border-emerald-200 bg-emerald-50 text-emerald-700'
                    }`}
                  >
                    {subreddit.shadowbanned ? (
                      <ShieldAlert className="h-4 w-4" />
                    ) : (
                      <ShieldCheck className="h-4 w-4" />
                    )}
                    {subreddit.shadowbanned ? 'Shadowbanned' : 'Clear'}
                  </Badge>
                </CardTitle>
                <Badge
                  variant="outline"
                  className={`flex items-center gap-1 text-sm ${verificationMeta.tone}`}
                >
                  <CheckCircle2 className="h-4 w-4" />
                  {verificationMeta.label}
                </Badge>
              </div>
              <CardDescription className="text-sm text-gray-500">
                Automated compliance health snapshot with the most recent moderation context.
              </CardDescription>
            </CardHeader>

            <CardContent className="space-y-6 pt-6">
              <div className="grid gap-4 md:grid-cols-3">
                <div className="rounded-lg border border-gray-200 bg-white p-4 shadow-inner">
                  <div className="flex items-center gap-2 text-sm font-medium text-gray-500">
                    <Clock3 className="h-4 w-4 text-purple-500" />
                    Next Post Window
                  </div>
                  <p className="mt-2 text-lg font-semibold text-gray-900">
                    {formatDateTime(subreddit.nextPostTime)}
                  </p>
                  <p className="mt-1 text-xs text-gray-500">Local timezone adjusted automatically.</p>
                </div>

                <div className="rounded-lg border border-gray-200 bg-white p-4 shadow-inner">
                  <div className="flex items-center gap-2 text-sm font-medium text-gray-500">
                    {subreddit.shadowbanned ? (
                      <AlertCircle className="h-4 w-4 text-red-500" />
                    ) : (
                      <CheckCircle2 className="h-4 w-4 text-emerald-500" />
                    )}
                    Shadowban Status
                  </div>
                  <p className={`mt-2 text-lg font-semibold ${subreddit.shadowbanned ? 'text-red-600' : 'text-emerald-600'}`}>
                    {subreddit.shadowbanned ? 'Review required' : 'Healthy'}
                  </p>
                  <p className="mt-1 text-xs text-gray-500">
                    {subreddit.shadowbanned
                      ? 'Coordinate with moderators to lift the current restriction.'
                      : 'Automation sees normal distribution for this community.'}
                  </p>
                </div>

                <div className="rounded-lg border border-gray-200 bg-white p-4 shadow-inner">
                  <div className="flex items-center gap-2 text-sm font-medium text-gray-500">
                    <CheckCircle2 className="h-4 w-4 text-sky-500" />
                    Verification Track
                  </div>
                  <p className="mt-2 text-lg font-semibold text-gray-900">{verificationMeta.label}</p>
                  <p className="mt-1 text-xs text-gray-500">
                    {subreddit.verificationStatus === 'verified'
                      ? 'All automation signals are synced with moderator approvals.'
                      : 'Awaiting reviewer confirmation to unlock advanced automations.'}
                  </p>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between">
                  <h4 className="text-sm font-semibold text-gray-900">Latest removals</h4>
                  <span className="text-xs text-gray-500">Last five moderation events</span>
                </div>
                <Table className="mt-3">
                  <TableHeader>
                    <TableRow className="bg-gray-50/60">
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Removal ID</TableHead>
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Removed At</TableHead>
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Reason</TableHead>
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Action</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {subreddit.recentRemovals.map((removal) => (
                      <TableRow key={removal.id} className="border-gray-100">
                        <TableCell className="font-mono text-xs text-gray-600">{removal.id}</TableCell>
                        <TableCell className="text-sm text-gray-700">{formatDateTime(removal.removedAt)}</TableCell>
                        <TableCell className="text-sm text-gray-700">{removal.reason}</TableCell>
                        <TableCell className="text-sm text-gray-500">
                          {removal.actionTaken ? removal.actionTaken : '—'}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}

export default ComplianceStatusDashboard;
client/src/pages/admin.tsx
+23-1
import { useState, useEffect } from 'react';
import { useState, useEffect, Suspense, lazy } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';
import { 
  Users, 
  DollarSign, 
  TrendingUp, 
  Settings, 
  Shield,
  Activity,
  Database,
  CreditCard,
  Eye,
  BarChart3,
  Ban,
  Clock3,
  Key,
  AlertCircle,
  CheckCircle,
  XCircle,
  Target,
  Smartphone,
  Calendar,
  VideoIcon,
  MessageSquare,
  Globe,
  Zap,
  Gift,
  Headphones,
  MonitorPlay,
  FileCheck
} from 'lucide-react';

const ComplianceStatusDashboard = lazy(() => import('@/components/compliance/ComplianceStatusDashboard'));

interface AdminStats {
  totalUsers: number;
  revenue: number;
  activeUsers: number;
  contentGenerated: number;
  newUsersToday: number;
  trialUsers: number;
  freeUsers: number;
  proUsers: number;
  premiumUsers: number;
  jwtConfigured: boolean;
  emailConfigured: boolean;
}

interface User {
  id: number;
  username: string;
  email: string;
  tier: string;
  isActive: boolean;
  isVerified: boolean;
  createdAt?: string;
  lastLoginAt?: string;
  contentCount?: number;
}
@@ -280,50 +282,51 @@ export function AdminDashboard() {
                  'from-pink-500/20 to-pink-600/20'
                }`}>
                  <span className={`${stat.color} text-lg`}>{stat.icon}</span>
                </div>
                <Badge variant="secondary" className="bg-gray-100 text-gray-900 border-gray-300 text-xs font-medium">
                  {stat.change}
                </Badge>
              </div>
              <p className="text-3xl font-bold text-gray-900 mb-1">{stat.value}</p>
              <p className="text-sm text-gray-600">{stat.label}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Main Content Tabs */}
      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="bg-gray-100 border-gray-200 p-1 rounded-xl">
          <TabsTrigger value="overview" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Overview</TabsTrigger>
          <TabsTrigger value="analytics" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Analytics</TabsTrigger>
          <TabsTrigger value="users" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Users</TabsTrigger>
          <TabsTrigger value="providers" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Providers</TabsTrigger>
          <TabsTrigger value="revenue" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Revenue</TabsTrigger>
          <TabsTrigger value="roadmap" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Roadmap</TabsTrigger>
          <TabsTrigger value="system" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">System</TabsTrigger>
          <TabsTrigger value="compliance" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Compliance</TabsTrigger>
          <TabsTrigger value="status" className="data-[state=active]:bg-white data-[state=active]:text-purple-800 text-gray-600 rounded-lg transition-all duration-200">Status</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid lg:grid-cols-2 gap-6">
            {/* User Activity Chart */}
            <Card className="bg-white border-gray-200 shadow-lg">
              <CardHeader>
                <CardTitle>User Activity</CardTitle>
                <CardDescription>User registrations and activity trends</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="p-4 bg-white/5 rounded-lg">
                      <p className="text-sm text-gray-400">New Users Today</p>
                      <p className="text-2xl font-bold text-blue-400">{(stats as any)?.newUsersToday || 0}</p>
                    </div>
                    <div className="p-4 bg-white/5 rounded-lg">
                      <p className="text-sm text-gray-400">Trial Users</p>
                      <p className="text-2xl font-bold text-purple-400">{(stats as any)?.trialUsers || 0}</p>
                    </div>
                  </div>
                  <div className="space-y-2">
@@ -875,50 +878,69 @@ export function AdminDashboard() {
                  <p className="text-3xl font-bold text-yellow-400">12</p>
                  <p className="text-sm text-gray-400">Features Planned</p>
                </div>
                <div className="text-center p-4 bg-white/5 rounded-lg">
                  <p className="text-3xl font-bold text-blue-400">3</p>
                  <p className="text-sm text-gray-400">In Development</p>
                </div>
                <div className="text-center p-4 bg-white/5 rounded-lg">
                  <p className="text-3xl font-bold text-purple-400">9</p>
                  <p className="text-sm text-gray-400">Months Timeline</p>
                </div>
              </div>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Q1 2025 Goals</span>
                  <span className="text-sm text-gray-400">3 of 3 features</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div className="bg-gradient-to-r from-red-500 to-red-400 h-2 rounded-full" style={{width: '33%'}}></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Compliance Automation Tab */}
        <TabsContent value="compliance" className="space-y-6">
          <Suspense
            fallback={
              <Card className="bg-white border-gray-200 shadow-lg">
                <CardHeader>
                  <CardTitle>Loading compliance insights</CardTitle>
                  <CardDescription>Retrieving subreddit compliance signals...</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-24 animate-pulse rounded-lg bg-gray-100" />
                </CardContent>
              </Card>
            }
          >
            <ComplianceStatusDashboard />
          </Suspense>
        </TabsContent>

        {/* System Status Tab */}
        <TabsContent value="status" className="space-y-6">
          <div className="grid lg:grid-cols-2 gap-6">
            {/* Platform Completeness */}
            <Card className="bg-white border-gray-200 shadow-lg">
              <CardHeader>
                <CardTitle>Platform Completeness</CardTitle>
                <CardDescription>Feature implementation status</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Overall Progress</span>
                    <span className="text-2xl font-bold text-purple-400">{(completeness as any)?.completionPercentage || 0}%</span>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="space-y-2">
                      <h4 className="text-sm font-medium text-purple-300">Core Features</h4>
                      {Object.entries((completeness as any)?.core || {}).map(([key, value]) => (
                        <div key={key} className="flex items-center justify-between text-sm">
                          <span className="text-gray-400 capitalize">{key.replace(/([A-Z])/g, ' $1')}</span>
                          <Badge variant={value ? 'default' : 'destructive'} className="text-xs">
                            {value ? <CheckCircle className="h-3 w-3 mr-1" /> : <XCircle className="h-3 w-3 mr-1" />}
                            {value ? 'Done' : 'Missing'}
