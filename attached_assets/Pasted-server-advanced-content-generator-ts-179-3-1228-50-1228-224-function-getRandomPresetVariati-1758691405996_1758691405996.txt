server/advanced-content-generator.ts
+179-3
@@ -1228,50 +1228,224 @@ function getRandomPresetVariation(presetId: string): PresetVariation | null {
}

function generateTitles(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string[] {
  const titles: string[] = [];
  const themes = photoConfig.themes;
  const starters = toneStyle.starters;
  const emojis = toneStyle.emojis;
  
  // Generate 3-5 varied titles
  titles.push(`${starters[0]} what happened during my ${themes[0]} session ${emojis[0]}`);
  titles.push(`${starters[1]} ${themes[1]} content just dropped ${emojis[1]}`);
  titles.push(`${themes[2]} vibes hit different today ${emojis[2]}`);
  
  if (params.photoType === 'all-xs') {
    titles.push(`Warning: ${themes[3] || 'exclusive'} content ahead - not for everyone ${emojis[3] || 'ðŸ”ž'}`);
    titles.push(`${starters[2]} the limits have been removed ${emojis[4] || 'ðŸ’Ž'}`);
  } else if (params.photoType === 'very-spicy') {
    titles.push(`${starters[3] || starters[0]} intense ${themes[3] || 'exclusive'} content ${emojis[3]}`);
  } else if (params.photoType === 'spicy') {
    titles.push(`${themes[3] || 'Spicy'} mood activated ${emojis[3]}`);
  }
  
  return titles.slice(0, Math.random() > 0.5 ? 3 : 4);
}

type HashtagLayout = 'inline' | 'blankLine' | 'dotLadder';

interface HashtagToken {
  type: 'tag' | 'connector';
  value: string;
}

const PLATFORM_LAYOUT_MAP: Record<string, HashtagLayout> = {
  instagram: 'blankLine',
  'instagram-stories': 'blankLine',
  threads: 'blankLine',
  twitter: 'inline',
  x: 'inline',
  bluesky: 'inline',
  tiktok: 'dotLadder',
  onlyfans: 'dotLadder'
};

const HASHTAG_CONNECTORS: readonly string[] = ['âœ¨', 'ðŸ”¥', 'mood check', 'energy boost', 'vibes', 'glow up', 'â€¢', 'spark'];

const HASHTAG_CASE_FORMATTERS: readonly ((tag: string) => string)[] = [
  (value: string) => `#${value.replace(/\s+/g, '').toLowerCase()}`,
  (value: string) => `#${toPascalCase(value)}`,
  (value: string) => `#${value.replace(/\s+/g, '').toUpperCase()}`
];

function toPascalCase(value: string): string {
  const segments = value.match(/[A-Za-z0-9]+/g);
  if (!segments) {
    return '';
  }
  return segments
    .map(segment => segment.charAt(0).toUpperCase() + segment.slice(1).toLowerCase())
    .join('');
}

function isHashtagLayout(value: string): value is HashtagLayout {
  return value === 'inline' || value === 'blankLine' || value === 'dotLadder';
}

function extractLayoutOverride(platform: string): HashtagLayout | null {
  const hint = platform.split(':').pop();
  if (!hint) {
    return null;
  }
  return isHashtagLayout(hint) ? hint : null;
}

function resolveHashtagLayout(platform: string): HashtagLayout {
  const normalized = platform.trim().toLowerCase();
  const override = extractLayoutOverride(normalized);
  if (override) {
    return override;
  }
  if (normalized in PLATFORM_LAYOUT_MAP) {
    return PLATFORM_LAYOUT_MAP[normalized];
  }
  if (normalized.includes('instagram')) {
    return 'blankLine';
  }
  if (normalized.includes('twitter') || normalized.includes('x')) {
    return 'inline';
  }
  if (normalized.includes('tiktok')) {
    return 'dotLadder';
  }
  return 'dotLadder';
}

function normalizeHashtag(rawTag: string): string {
  return rawTag.replace(/^#+/, '').trim();
}

function applyRandomCasing(tag: string, random: () => number): string {
  const formatterIndex = Math.floor(random() * HASHTAG_CASE_FORMATTERS.length);
  const formatter = HASHTAG_CASE_FORMATTERS[formatterIndex];
  const formatted = formatter(tag);
  if (formatted.length <= 1) {
    return `#${tag.replace(/\s+/g, '')}`;
  }
  return formatted;
}

function selectConnector(random: () => number, connectorPool: readonly string[]): string | null {
  if (random() < 0.5) {
    return null;
  }
  const index = Math.floor(random() * connectorPool.length);
  return connectorPool[index];
}

function buildHashtagTokens(
  hashtags: string[],
  toneEmojis: readonly string[],
  random: () => number
): HashtagToken[] {
  const tokens: HashtagToken[] = [];
  const connectorPool: readonly string[] = toneEmojis.length > 0
    ? [...HASHTAG_CONNECTORS, ...toneEmojis]
    : HASHTAG_CONNECTORS;
  hashtags.forEach((rawTag, index) => {
    const normalized = normalizeHashtag(rawTag);
    if (!normalized) {
      return;
    }
    tokens.push({
      type: 'tag',
      value: applyRandomCasing(normalized, random)
    });
    if (index < hashtags.length - 1) {
      const connector = selectConnector(random, connectorPool);
      if (connector) {
        tokens.push({ type: 'connector', value: connector });
      }
    }
  });
  return tokens;
}

function inlineHashtagText(tokens: HashtagToken[]): string {
  const parts = tokens.map(token => token.value);
  return parts.join(' ').replace(/\s+/g, ' ').trim();
}

function applyInlineHashtags(content: string, tokens: HashtagToken[]): string {
  const inlineText = inlineHashtagText(tokens);
  if (!inlineText) {
    return content.trimEnd();
  }
  const trimmed = content.trimEnd();
  const punctuationMatch = trimmed.match(/([.!?â€¦]+)$/u);
  if (!punctuationMatch) {
    return `${trimmed} ${inlineText}`;
  }
  return `${trimmed.slice(0, -punctuationMatch[0].length)} ${inlineText}${punctuationMatch[0]}`;
}

function applyBlankLineHashtags(content: string, tokens: HashtagToken[]): string {
  const trimmed = content.trimEnd();
  const blockEntries = tokens.map(token => token.value);
  if (blockEntries.length === 0) {
    return trimmed;
  }
  return `${trimmed}\n\n${blockEntries.join('\n\n')}`;
}

function applyDotLadderHashtags(content: string, tokens: HashtagToken[], random: () => number): string {
  const trimmed = content.trimEnd();
  const blockEntries = tokens.map(token => token.value);
  if (blockEntries.length === 0) {
    return trimmed;
  }
  const ladderHeight = 4 + Math.floor(random() * 3); // 4-6 lines to hide hashtags
  const ladder = Array.from({ length: ladderHeight }, () => '.').join('\n');
  return `${trimmed}\n\n${ladder}\n${blockEntries.join('\n')}`;
}

function applyHashtagLayout(
  content: string,
  tokens: HashtagToken[],
  layout: HashtagLayout,
  random: () => number
): string {
  switch (layout) {
    case 'inline':
      return applyInlineHashtags(content, tokens);
    case 'blankLine':
      return applyBlankLineHashtags(content, tokens);
    case 'dotLadder':
    default:
      return applyDotLadderHashtags(content, tokens, random);
  }
}

function generateMainContent(params: ContentParameters, photoConfig: PhotoConfig, toneStyle: ToneStyle): string {
  let content = "";
  const themes = photoConfig.themes;
  const settings = photoConfig.settings;
  const mood = photoConfig.mood;
  const descriptors = toneStyle.descriptors;
  const endings = toneStyle.endings;
  const emojis = toneStyle.emojis;
  
  // Opening based on tone and photo type
  if (params.textTone === 'confident') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} ${descriptors[0]} content I just created. `;
  } else if (params.textTone === 'playful') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} I had the most ${descriptors[0]} photoshoot in my ${settings[0]} today! `;
  } else if (params.textTone === 'mysterious') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter} in my ${settings[0]}... `;
  } else if (params.textTone === 'sassy') {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter}, your girl just dropped some ${descriptors[0]} content. `;
  } else {
    const randomStarter = toneStyle.starters[Math.floor(Math.random() * toneStyle.starters.length)];
    content = `${randomStarter}, this ${themes[0]} session was ${descriptors[0]}. `;
@@ -1294,55 +1468,57 @@ function generateMainContent(params: ContentParameters, photoConfig: PhotoConfig
    content += `Complete creative freedom unleashed. No limits, no boundaries, just pure artistic expression in its rawest form. `;
  }
  
  // Add custom prompt integration
  if (params.customPrompt) {
    content += `${params.customPrompt} `;
  }
  
  // Promotion integration
  if (params.includePromotion) {
    if (params.textTone === 'confident') {
      content += `This exclusive content is available for my VIP subscribers who appreciate quality. `;
    } else if (params.textTone === 'playful') {
      content += `The full collection is waiting for my special subscribers! `;
    } else if (params.textTone === 'mysterious') {
      content += `But that's all you see here... the rest remains in the shadows for those who seek it. `;
    } else if (params.textTone === 'sassy') {
      content += `If you want the full experience, you know where to find me. `;
    } else {
      content += `The complete series is available for subscribers who want the authentic experience. `;
    }
  }
  
  // Ending with hashtags if selected
  content += endings[Math.floor(Math.random() * endings.length)];
  

  if (params.selectedHashtags.length > 0) {
    content += ` ${params.selectedHashtags.join(' ')}`;
    const layout = resolveHashtagLayout(params.platform);
    const tokens = buildHashtagTokens(params.selectedHashtags, emojis, Math.random);
    content = applyHashtagLayout(content, tokens, layout, Math.random);
  }
  

  return content;
}

function generatePhotoInstructions(params: ContentParameters, photoConfig: PhotoConfig): GeneratedContent['photoInstructions'] {
  return {
    lighting: photoConfig.lighting + (params.photoType === 'shower' ? ', emphasis on steam and water reflections' : 
               params.photoType === 'workout' ? ', bright and energetic to show determination' :
               params.photoType === 'very-spicy' || params.photoType === 'all-xs' ? ', dramatic contrasts and artistic shadows' : ''),
    angles: photoConfig.angles + (params.textTone === 'confident' ? ', powerful perspective shots' :
            params.textTone === 'playful' ? ', fun candid angles' :
            params.textTone === 'mysterious' ? ', shadowy artistic angles' : ''),
    composition: `${photoConfig.mood} composition with ${params.photoType === 'casual' ? 'natural framing' :
                 params.photoType === 'workout' ? 'dynamic action elements' :
                 params.photoType === 'shower' ? 'steam and water elements' :
                 params.photoType === 'showing-skin' ? 'artistic tasteful framing' :
                 params.photoType === 'spicy' ? 'seductive elegant framing' :
                 params.photoType === 'very-spicy' ? 'bold intimate framing' :
                 'unlimited creative framing'}`,
    styling: `${photoConfig.clothing.join(' or ')}, ${photoConfig.mood} aesthetic`,
    technical: `High resolution, sharp focus, professional quality${params.photoType === 'very-spicy' || params.photoType === 'all-xs' ? ', studio-grade equipment recommended' : ''}`,
    sceneSetup: `${photoConfig.settings.join(' or ')}, ${params.photoType} theme environment`
  };
}

function generateTags(params: ContentParameters, photoConfig: PhotoConfig): string[] {
tests/unit/server/advanced-content-generator.hashtags.test.ts
New
+91-0
import { afterEach, describe, expect, it, vi } from 'vitest';

import { generateAdvancedContent, type ContentParameters } from '../../../server/advanced-content-generator';

function createSeededRandom(seed: number): () => number {
  let state = seed >>> 0;
  return () => {
    state += 0x6D2B79F5;
    let result = Math.imul(state ^ (state >>> 15), state | 1);
    result ^= result + Math.imul(result ^ (result >>> 7), result | 61);
    return ((result ^ (result >>> 14)) >>> 0) / 4294967296;
  };
}

const BASE_PARAMS: ContentParameters = {
  photoType: 'casual',
  textTone: 'confident',
  style: 'custom-style',
  includePromotion: false,
  selectedHashtags: [],
  customPrompt: 'Custom prompt synergy check.',
  platform: 'twitter'
};

const HASHTAGS = ['MorningLight', '#BehindTheScenes', 'ConfidenceGoals'];

describe('generateMainContent hashtag formatting', () => {
  afterEach(() => {
    vi.restoreAllMocks();
  });

  it('embeds inline hashtags for twitter-style content', () => {
    const random = createSeededRandom(1337);
    vi.spyOn(Math, 'random').mockImplementation(random);

    const result = generateAdvancedContent({
      ...BASE_PARAMS,
      platform: 'twitter',
      selectedHashtags: HASHTAGS
    });

    expect(result.content).toMatchInlineSnapshot(`"I know exactly bold content I just created. Just me being my natural self - coffee in hand, messy hair, and that perfect morning light streaming through the window. Custom prompt synergy check. excellence is standard #Morninglight #Behindthescenes spark #Confidencegoals"`);
  });

  it('places hashtags below blank lines for instagram layouts', () => {
    const random = createSeededRandom(2024);
    vi.spyOn(Math, 'random').mockImplementation(random);

    const result = generateAdvancedContent({
      ...BASE_PARAMS,
      platform: 'instagram',
      selectedHashtags: HASHTAGS
    });

    expect(result.content).toMatchInlineSnapshot(`
      "You wanted bold content I just created. Just me being my natural self - coffee in hand, messy hair, and that perfect morning light streaming through the window. Custom prompt synergy check. no compromises here

      #MORNINGLIGHT

      ðŸ’ª

      #Behindthescenes

      #Confidencegoals"
    `);
  });

  it('hides hashtags behind a dot ladder for tiktok style', () => {
    const random = createSeededRandom(99);
    vi.spyOn(Math, 'random').mockImplementation(random);

    const result = generateAdvancedContent({
      ...BASE_PARAMS,
      platform: 'tiktok',
      selectedHashtags: HASHTAGS
    });

    expect(result.content).toMatchInlineSnapshot(`
      "Time for bold content I just created. Just me being my natural self - coffee in hand, messy hair, and that perfect morning light streaming through the window. Custom prompt synergy check. no compromises here

      .
      .
      .
      .
      .
      #MORNINGLIGHT
      #BEHINDTHESCENES
      #confidencegoals"
    `);
  });
});
