#!/bin/bash

# =========================================
# ThottoPilot Auth System Cleanup Script
# =========================================
# This script will clean up your duplicate auth systems
# Run this in your Replit Shell: bash cleanup-auth.sh

echo "🔧 Starting ThottoPilot Authentication System Cleanup..."
echo "=================================================="
echo ""

# Create backup directory
echo "📦 Creating backup directory..."
mkdir -p backups/auth-cleanup-$(date +%Y%m%d-%H%M%S)
BACKUP_DIR="backups/auth-cleanup-$(date +%Y%m%d-%H%M%S)"

# =========================================
# STEP 1: Backup existing files
# =========================================
echo "📋 Step 1: Backing up existing auth files..."

# Backup server files
if [ -f "server/routes/auth.ts" ]; then
    cp server/routes/auth.ts "$BACKUP_DIR/auth.routes.backup.ts"
    echo "  ✅ Backed up server/routes/auth.ts"
fi

if [ -f "server/auth.ts" ]; then
    cp server/auth.ts "$BACKUP_DIR/auth.main.backup.ts"
    echo "  ✅ Backed up server/auth.ts"
fi

if [ -f "server/index.ts" ]; then
    cp server/index.ts "$BACKUP_DIR/index.backup.ts"
    echo "  ✅ Backed up server/index.ts"
fi

# Backup client files
if [ -f "client/src/components/password-reset.tsx" ]; then
    cp client/src/components/password-reset.tsx "$BACKUP_DIR/password-reset.component.backup.tsx"
    echo "  ✅ Backed up password-reset component"
fi

echo ""

# =========================================
# STEP 2: Remove duplicate auth routes file
# =========================================
echo "🗑️  Step 2: Removing duplicate auth routes..."

# Comment out the import in server/routes/index.ts if it exists
if [ -f "server/routes/index.ts" ]; then
    sed -i.bak 's/^import.*auth\.ts.*$/\/\/ &/' server/routes/index.ts
    sed -i.bak 's/^.*authRoutes.*$/\/\/ &/' server/routes/index.ts
    echo "  ✅ Commented out auth routes imports in server/routes/index.ts"
fi

# Delete the duplicate auth routes file
if [ -f "server/routes/auth.ts" ]; then
    rm server/routes/auth.ts
    echo "  ✅ Deleted server/routes/auth.ts (duplicate file)"
else
    echo "  ℹ️  server/routes/auth.ts not found (already deleted?)"
fi

echo ""

# =========================================
# STEP 3: Update server/index.ts
# =========================================
echo "📝 Step 3: Updating server/index.ts to remove auth route conflicts..."

cat > /tmp/update_server_index.js << 'EOF'
const fs = require('fs');

const serverIndexPath = 'server/index.ts';
let content = fs.readFileSync(serverIndexPath, 'utf8');

// Remove or comment out any imports from routes/auth
content = content.replace(/^import.*from.*routes\/auth.*$/gm, '// $&');
content = content.replace(/^.*authRoutes.*$/gm, '// $&');

// Ensure setupAuth is called before registerRoutes
if (!content.includes('setupAuth(app)')) {
    console.log('  ⚠️  setupAuth(app) not found - make sure it\'s called before registerRoutes!');
} else {
    console.log('  ✅ setupAuth(app) is already being called');
}

fs.writeFileSync(serverIndexPath, content);
EOF

node /tmp/update_server_index.js
rm /tmp/update_server_index.js

echo ""

# =========================================
# STEP 4: Clean up client components
# =========================================
echo "🧹 Step 4: Cleaning up client-side components..."

# Remove duplicate password-reset dialog component
if [ -f "client/src/components/password-reset.tsx" ]; then
    rm client/src/components/password-reset.tsx
    echo "  ✅ Deleted duplicate password-reset.tsx component"
    
    # Update any imports of this component
    find client/src -type f -name "*.tsx" -o -name "*.ts" | while read file; do
        if grep -q "password-reset" "$file"; then
            sed -i.bak '/import.*password-reset/d' "$file"
            echo "  ✅ Removed password-reset import from $file"
        fi
    done
fi

echo ""

# =========================================
# STEP 5: Fix the main auth.ts file
# =========================================
echo "🔧 Step 5: Fixing the main auth.ts file..."

cat > /tmp/fix_auth.js << 'EOF'
const fs = require('fs');
const path = require('path');

const authPath = 'server/auth.ts';
if (!fs.existsSync(authPath)) {
    console.log('  ❌ server/auth.ts not found!');
    process.exit(1);
}

let content = fs.readFileSync(authPath, 'utf8');

// Check for duplicate endpoint definitions
const endpoints = [
    '/api/auth/signup',
    '/api/auth/login', 
    '/api/auth/forgot-password',
    '/api/auth/reset-password',
    '/api/auth/change-password',
    '/api/auth/verify-email',
    '/api/auth/user'
];

console.log('  Checking for duplicate endpoints...');
endpoints.forEach(endpoint => {
    const regex = new RegExp(`app\\.(post|get)\\(['"\`]${endpoint.replace(/\//g, '\\/')}`, 'g');
    const matches = content.match(regex);
    if (matches && matches.length > 1) {
        console.log(`  ⚠️  WARNING: Found ${matches.length} definitions of ${endpoint}`);
    } else if (matches && matches.length === 1) {
        console.log(`  ✅ ${endpoint} defined once`);
    } else {
        console.log(`  ❌ ${endpoint} not found`);
    }
});

// Ensure consistent token approach (database tokens, not JWT for reset)
if (content.includes('jwt.sign') && content.includes('password-reset')) {
    console.log('\n  ⚠️  WARNING: Found JWT tokens being used for password reset.');
    console.log('     Consider using database tokens for better security.');
}

console.log('\n  ✅ Auth file analysis complete');
EOF

node /tmp/fix_auth.js
rm /tmp/fix_auth.js

echo ""

# =========================================
# STEP 6: Update storage interface
# =========================================
echo "📚 Step 6: Checking storage interface for token methods..."

cat > /tmp/check_storage.js << 'EOF'
const fs = require('fs');

// Check if storage has the required methods
const storagePaths = ['server/storage.ts', 'server/storage.js', 'server/storage/index.ts'];
let storageFound = false;

for (const storagePath of storagePaths) {
    if (fs.existsSync(storagePath)) {
        storageFound = true;
        const content = fs.readFileSync(storagePath, 'utf8');
        
        const requiredMethods = [
            'createVerificationToken',
            'getVerificationToken',
            'deleteVerificationToken',
            'getUserByEmail',
            'updateUserPassword',
            'updateUserEmailVerified'
        ];
        
        console.log(`  Checking ${storagePath} for required methods:`);
        requiredMethods.forEach(method => {
            if (content.includes(method)) {
                console.log(`    ✅ ${method} found`);
            } else {
                console.log(`    ❌ ${method} NOT FOUND - needs implementation`);
            }
        });
        break;
    }
}

if (!storageFound) {
    console.log('  ⚠️  Storage file not found - check your storage implementation');
}
EOF

node /tmp/check_storage.js
rm /tmp/check_storage.js

echo ""

# =========================================
# STEP 7: Check environment variables
# =========================================
echo "🔑 Step 7: Checking environment variables..."

cat > /tmp/check_env.js << 'EOF'
const requiredEnvVars = [
    'JWT_SECRET',
    'SENDGRID_API_KEY',
    'FROM_EMAIL',
    'FRONTEND_URL',
    'ADMIN_EMAIL',
    'ADMIN_PASSWORD'
];

console.log('  Required environment variables:');
requiredEnvVars.forEach(envVar => {
    if (process.env[envVar]) {
        console.log(`    ✅ ${envVar} is set`);
    } else {
        console.log(`    ❌ ${envVar} is NOT SET`);
    }
});
EOF

node /tmp/check_env.js
rm /tmp/check_env.js

echo ""

# =========================================
# STEP 8: Fix client-side API calls
# =========================================
echo "🔄 Step 8: Checking client-side API endpoint consistency..."

cat > /tmp/check_client_endpoints.js << 'EOF'
const fs = require('fs');
const path = require('path');

function checkFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    const issues = [];
    
    // Check for old endpoints that should be updated
    const oldEndpoints = [
        { old: '/api/auth/request-reset', new: '/api/auth/forgot-password' },
        { old: '/api/auth/complete-reset', new: '/api/auth/reset-password' },
        { old: '/api/auth/verify-reset-token', new: 'REMOVE - not needed' }
    ];
    
    oldEndpoints.forEach(({old, new: newEndpoint}) => {
        if (content.includes(old)) {
            issues.push(`    ⚠️  Found old endpoint: ${old} → should be: ${newEndpoint}`);
        }
    });
    
    // Check for correct endpoints
    const correctEndpoints = [
        '/api/auth/login',
        '/api/auth/signup',
        '/api/auth/forgot-password',
        '/api/auth/reset-password',
        '/api/auth/change-password'
    ];
    
    correctEndpoints.forEach(endpoint => {
        if (content.includes(endpoint)) {
            console.log(`    ✅ Uses ${endpoint}`);
        }
    });
    
    if (issues.length > 0) {
        console.log(`  ${filePath}:`);
        issues.forEach(issue => console.log(issue));
    }
}

// Check all TypeScript/React files
const clientDir = 'client/src';
const files = [
    'pages/forgot-password.tsx',
    'pages/reset-password.tsx', 
    'pages/change-password.tsx',
    'components/auth-modal.tsx',
    'components/PasswordChangeForm.tsx'
];

console.log('  Checking client files for endpoint consistency:');
files.forEach(file => {
    const fullPath = path.join(clientDir, file);
    if (fs.existsSync(fullPath)) {
        checkFile(fullPath);
    }
});
EOF

node /tmp/check_client_endpoints.js
rm /tmp/check_client_endpoints.js

echo ""

# =========================================
# STEP 9: Generate cleanup report
# =========================================
echo "📊 Step 9: Generating cleanup report..."

cat > /tmp/generate_report.js << 'EOF'
const fs = require('fs');

const report = {
    timestamp: new Date().toISOString(),
    backupLocation: process.argv[2],
    filesDeleted: [],
    filesModified: [],
    warnings: [],
    recommendations: []
};

// Check what was deleted
if (!fs.existsSync('server/routes/auth.ts')) {
    report.filesDeleted.push('server/routes/auth.ts');
}
if (!fs.existsSync('client/src/components/password-reset.tsx')) {
    report.filesDeleted.push('client/src/components/password-reset.tsx');
}

// Check current state
if (fs.existsSync('server/auth.ts')) {
    const authContent = fs.readFileSync('server/auth.ts', 'utf8');
    
    // Count endpoints
    const endpoints = [
        '/api/auth/signup',
        '/api/auth/login',
        '/api/auth/logout',
        '/api/auth/user',
        '/api/auth/forgot-password',
        '/api/auth/reset-password',
        '/api/auth/change-password',
        '/api/auth/verify-email',
        '/api/auth/resend-verification'
    ];
    
    const foundEndpoints = endpoints.filter(ep => 
        authContent.includes(`'${ep}'`) || authContent.includes(`"${ep}"`) || authContent.includes(`\`${ep}\``)
    );
    
    report.currentEndpoints = foundEndpoints;
    
    // Check for issues
    if (authContent.includes('jwt.sign') && authContent.includes('password-reset')) {
        report.warnings.push('Still using JWT tokens for password reset - consider database tokens');
    }
    
    if (!authContent.includes('passwordResetLimiter')) {
        report.warnings.push('No rate limiting found for password reset');
    }
}

// Add recommendations
report.recommendations = [
    'Test all three password flows: forgot password, change password, temporary password',
    'Ensure email service is properly configured with SendGrid',
    'Add rate limiting to prevent abuse',
    'Consider implementing password strength validation',
    'Add logging for security events',
    'Set up monitoring for failed login attempts'
];

// Generate report
const reportContent = `
# AUTH SYSTEM CLEANUP REPORT
Generated: ${report.timestamp}
Backup Location: ${report.backupLocation}

## FILES CLEANED UP
${report.filesDeleted.map(f => `- ✅ Deleted: ${f}`).join('\n') || '- No files deleted'}

## CURRENT AUTH ENDPOINTS
${report.currentEndpoints?.map(ep => `- ${ep}`).join('\n') || 'Could not determine endpoints'}

## WARNINGS
${report.warnings.map(w => `- ⚠️  ${w}`).join('\n') || '- ✅ No warnings'}

## NEXT STEPS
${report.recommendations.map((r, i) => `${i + 1}. ${r}`).join('\n')}

## TESTING CHECKLIST
- [ ] Test user signup with email verification
- [ ] Test user login
- [ ] Test forgot password flow
- [ ] Test password reset with token
- [ ] Test logged-in password change
- [ ] Test temporary password change
- [ ] Test email verification resend
- [ ] Verify all emails are being sent
- [ ] Check rate limiting is working
- [ ] Verify tokens expire correctly

## ROLLBACK
If you need to rollback these changes:
1. Restore files from: ${report.backupLocation}
2. Uncomment imports in server/routes/index.ts
3. Restart the server
`;

fs.writeFileSync('AUTH_CLEANUP_REPORT.md', reportContent);
console.log('\n✅ Report generated: AUTH_CLEANUP_REPORT.md');
console.log(reportContent);
EOF

node /tmp/generate_report.js "$BACKUP_DIR"
rm /tmp/generate_report.js

echo ""
echo "=================================================="
echo "🎉 AUTH SYSTEM CLEANUP COMPLETE!"
echo "=================================================="
echo ""
echo "📋 What was done:"
echo "  1. Backed up all auth files to $BACKUP_DIR"
echo "  2. Removed duplicate server/routes/auth.ts"
echo "  3. Cleaned up duplicate client components"
echo "  4. Updated imports and references"
echo "  5. Generated cleanup report"
echo ""
echo "📝 IMPORTANT NEXT STEPS:"
echo "  1. Review AUTH_CLEANUP_REPORT.md for details"
echo "  2. Restart your server: npm run dev"
echo "  3. Test all authentication flows"
echo "  4. Check for any TypeScript errors"
echo ""
echo "🔄 To rollback if needed:"
echo "  cp $BACKUP_DIR/* ."
echo ""
echo "Run this command to see the full report:"
echo "  cat AUTH_CLEANUP_REPORT.md"