diff --git a/server/routes.ts b/server/routes.ts
@@
   app.use(session({
     store,
     secret: SESSION_SECRET,
-    resave: true, // Changed to true for OAuth state persistence
-    saveUninitialized: true, // Required for OAuth flows
+    resave: false, // Prevent session fixation
+    saveUninitialized: false, // Only create sessions when needed
     cookie: {
-      secure: false, // Always false for development OAuth to work
+      secure: IS_PRODUCTION, // HTTPS-only in production
       httpOnly: true,
       maxAge: 24 * 60 * 60 * 1000, // 24 hours
       sameSite: 'lax' // Allows OAuth redirects
     },
diff --git a/server/index.ts b/server/index.ts
@@
-import express, { type Request, Response, NextFunction } from "express";
-import cookieParser from "cookie-parser";
+import express, { type Request, Response, NextFunction } from "express";
+import cors from "cors";
+import cookieParser from "cookie-parser";
@@
 const app = express();
 
+const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(",").map(o => o.trim());
+app.use(cors({ origin: allowedOrigins, credentials: true }));
+
 // Initialize Sentry with proper validation
diff --git a/server/auth.ts b/server/auth.ts
@@
-      const ADMIN_EMAIL = process.env.ADMIN_EMAIL;
-      const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;
-
-      if (ADMIN_EMAIL && ADMIN_PASSWORD &&
-          loginIdentifier === ADMIN_EMAIL &&
-          password === ADMIN_PASSWORD) {
+      const ADMIN_EMAIL = process.env.ADMIN_EMAIL;
+      const ADMIN_PASSWORD_HASH = process.env.ADMIN_PASSWORD_HASH;
+
+      if (ADMIN_EMAIL && ADMIN_PASSWORD_HASH &&
+          loginIdentifier === ADMIN_EMAIL &&
+          await bcrypt.compare(password, ADMIN_PASSWORD_HASH)) {
@@
-          return res.json({
-            token,
+          return res.json({
             user: {
               id: 999,
               username: 'admin',
               email: ADMIN_EMAIL,
               tier: 'premium',
               isAdmin: true,
               role: 'admin'
             }
           });
@@
-          res.status(201).json({
-            message: 'User created successfully',
-            token,
-            user: {
+          res.status(201).json({
+            message: 'User created successfully',
+            user: {
               id: user.id,
               username: user.username,
               email: user.email,
               tier: user.tier,
               isAdmin: user.isAdmin,
               role: user.role,
               emailVerified: true
             }
           });
@@
-          res.status(201).json({
-            message: 'User created successfully. Please check your email to verify your account.',
-            token,
-            user: {
+          res.status(201).json({
+            message: 'User created successfully. Please check your email to verify your account.',
+            user: {
               id: user.id,
               username: user.username,
               email: user.email,
               tier: user.tier,
               isAdmin: user.isAdmin,
               role: user.role,
               emailVerified: false
             }
           });
@@
-      res.json({
-        token,
-        user: {
+      res.json({
+        user: {
           id: user.id,
           username: user.username,
           email: user.email,
           tier: user.tier,
           isAdmin: user.isAdmin,
           role: user.role
         }
       });
