 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/caption/rankingGuards.ts b/server/caption/rankingGuards.ts
index 16b8876a85a4ac43138e40dc3fc7ea5693cacae8..3e449b5ae0615872ca465db707d9c0f1b2ba981d 100644
--- a/server/caption/rankingGuards.ts
+++ b/server/caption/rankingGuards.ts
@@ -120,52 +120,81 @@ export function sanitizeVariantForRanking(variant: CaptionVariant): CaptionVaria
   const cta = variant.cta || safeFallbackCta;
   const hashtags = sanitizeHashtags(variant.hashtags || []);
 
   return {
     ...variant,
     caption,
     cta,
     hashtags: hashtags.slice(0, 30)
   };
 }
 
 /**
  * Format violations for display
  */
 export function formatViolations(violations: readonly string[]): string {
   if (violations.length === 0) return '';
   if (violations.length === 1) return violations[0];
   
   return violations.slice(0, -1).join(', ') + ` and ${violations[violations.length - 1]}`;
 }
 
 /**
  * Normalize unknown objects to ranking variants
  */
 export function normalizeVariantForRanking(final: Record<string, unknown>): CaptionVariant {
-  const safetyLevel = normalizeSafetyLevel(String(final.safetyLevel ?? 'normal'));
-  
+  const safetyLevelInput =
+    typeof final.safety_level === 'string' && final.safety_level.trim().length > 0
+      ? final.safety_level
+      : 'normal';
+  const safetyLevel = normalizeSafetyLevel(safetyLevelInput);
+
+  const caption =
+    typeof final.caption === 'string' && final.caption.trim().length > 0
+      ? final.caption
+      : safeFallbackCaption;
+
+  const alt =
+    typeof final.alt === 'string' && final.alt.trim().length >= 20
+      ? final.alt
+      : 'Engaging social media content';
+
+  const mood =
+    typeof final.mood === 'string' && final.mood.trim().length >= 2
+      ? final.mood
+      : 'engaging';
+
+  const style =
+    typeof final.style === 'string' && final.style.trim().length >= 2
+      ? final.style
+      : 'authentic';
+
   return {
-    caption: typeof final.caption === 'string' ? final.caption : safeFallbackCaption,
-    alt: typeof final.alt === 'string' ? final.alt : 'Generated image content',
-    cta: typeof final.cta === 'string' ? final.cta : safeFallbackCta,
-    hashtags: Array.isArray(final.hashtags) 
-      ? final.hashtags.filter((tag): tag is string => typeof tag === 'string')
+    caption,
+    alt,
+    cta:
+      typeof final.cta === 'string' && final.cta.trim().length >= 2
+        ? final.cta
+        : safeFallbackCta,
+    hashtags: Array.isArray(final.hashtags)
+      ? final.hashtags.filter(
+          (tag): tag is string => typeof tag === 'string' && tag.trim().length > 0
+        )
       : [...safeFallbackHashtags],
-    mood: typeof final.mood === 'string' ? final.mood : 'neutral',
-    style: typeof final.style === 'string' ? final.style : 'casual',
+    mood,
+    style,
     safety_level: safetyLevel,
-    nsfw: Boolean(final.nsfw)
+    nsfw: typeof final.nsfw === 'boolean' ? final.nsfw : false
   };
 }
 
 /**
  * Truncate text while preserving meaning
  */
 export function truncateReason(reason: string, limit = 240): string {
   if (reason.length <= limit) return reason;
   
   const truncated = reason.slice(0, limit - 3);
   const lastSpace = truncated.lastIndexOf(' ');
   
   return (lastSpace > limit * 0.8 ? truncated.slice(0, lastSpace) : truncated) + '...';
 }
 
EOF
)