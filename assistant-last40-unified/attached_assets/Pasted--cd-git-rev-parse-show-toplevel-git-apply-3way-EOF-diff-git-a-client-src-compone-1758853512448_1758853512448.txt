 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/admin-portal.tsx b/client/src/components/admin-portal.tsx
index d3088c029ab469f0329156fd3191d24733ab3df8..c922b2b41e97b184259aa2afd0b2056b8aec65dd 100644
--- a/client/src/components/admin-portal.tsx
+++ b/client/src/components/admin-portal.tsx
@@ -170,51 +170,51 @@ export function AdminPortal() {
     });
     
     if (!response.ok) {
       const errorText = await response.text();
       let errorMessage;
       try {
         const errorJson = JSON.parse(errorText);
         errorMessage = errorJson.message || errorText;
       } catch {
         errorMessage = errorText || response.statusText;
       }
       throw new Error(errorMessage);
     }
     
     return response.json();
   };
 
   // Fetch user statistics
   const { data: stats, isLoading: _statsLoading } = useQuery<AdminStats>({
     queryKey: ['/api/admin/stats'],
     refetchInterval: 30000, // Refresh every 30 seconds
     enabled: !!currentUser
   });
 
   // Fetch all users
-  const { data: users, isLoading: usersLoading, error: _usersError } = useQuery<UserData[]>({
+  const { data: users, isLoading: usersLoading, error: usersError } = useQuery<UserData[]>({
     queryKey: ['/api/admin/users'],
     enabled: !!currentUser
   });
   
   const typedUsers: UserData[] = users || [];
 
   // Create trial user mutation
   const createTrialMutation = useMutation({
     mutationFn: (data: TrialRequest) => authenticatedRequest('/api/admin/create-trial', 'POST', data),
     onSuccess: () => {
       toast({
         title: "Trial Created Successfully",
         description: `A ${trialForm.duration}-day ${trialForm.tier} trial has been created`,
         action: <CheckCircle className="h-4 w-4 text-green-500" />
       });
       setTrialForm({ email: '', username: '', duration: 30, tier: 'starter' });
       queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });
       queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });
     },
     onError: (error: unknown) => {
       toast({
         title: "Failed to Create Trial",
         description: getErrorMessage(error) || "An error occurred",
         variant: "destructive"
       });
diff --git a/client/src/components/admin-portal.tsx b/client/src/components/admin-portal.tsx
index d3088c029ab469f0329156fd3191d24733ab3df8..c922b2b41e97b184259aa2afd0b2056b8aec65dd 100644
--- a/client/src/components/admin-portal.tsx
+++ b/client/src/components/admin-portal.tsx
@@ -747,50 +747,54 @@ export function AdminPortal() {
                         </Badge>
                       </div>
                     </div>
                   )) || (
                     <p className="text-center text-muted-foreground py-4">No active trials</p>
                   )}
               </div>
             </CardContent>
           </Card>
         </TabsContent>
 
         {/* User Management Tab */}
         <TabsContent value="users" className="space-y-4">
           <Card>
             <CardHeader>
               <CardTitle>All Users</CardTitle>
               <CardDescription>Manage user accounts and subscriptions</CardDescription>
             </CardHeader>
             <CardContent>
               <div className="space-y-3">
                 {usersLoading ? (
                   <div className="text-center py-8">
                     <RefreshCw className="h-8 w-8 animate-spin mx-auto text-muted-foreground" />
                     <p className="text-muted-foreground mt-2">Loading users...</p>
                   </div>
+                ) : usersError ? (
+                  <Alert variant="destructive">
+                    <AlertDescription>{getErrorMessage(usersError)}</AlertDescription>
+                  </Alert>
                 ) : (
                   typedUsers.slice(0, 10).map((user) => (
                     <div key={user.id} className="flex items-center justify-between p-4 rounded-lg bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                       <div className="flex items-center gap-3">
                         <div className="h-12 w-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold text-lg">
                           {user.username.charAt(0).toUpperCase()}
                         </div>
                         <div>
                           <p className="font-medium text-lg">{user.username}</p>
                           <p className="text-sm text-muted-foreground">{user.email || 'No email'}</p>
                           <p className="text-xs text-muted-foreground">Joined {new Date(user.createdAt).toLocaleDateString()}</p>
                         </div>
                       </div>
                       <div className="flex items-center gap-3">
                         <Badge className={getTierColor(user.tier)}>
                           {user.tier.toUpperCase()}
                         </Badge>
                         <Select 
                           value={user.tier}
                           onValueChange={(value) => upgradeUserMutation.mutate({ userId: user.id, tier: value })}
                         >
                           <SelectTrigger className="w-32">
                             <SelectValue />
                           </SelectTrigger>
                           <SelectContent>
 
EOF
)