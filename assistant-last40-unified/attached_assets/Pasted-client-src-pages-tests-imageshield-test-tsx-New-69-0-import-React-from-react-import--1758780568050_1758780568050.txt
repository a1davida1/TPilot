client/src/pages/__tests__/imageshield.test.tsx
New
+69
-0

import React from 'react';
import { act } from 'react';
import { createRoot, Root } from 'react-dom/client';
import { describe, expect, it, beforeEach, afterEach, vi } from 'vitest';

const imageShieldPropsSpy = vi.fn();

vi.mock('@/hooks/useAuth', () => ({
  useAuth: () => ({
    user: { tier: 'pro_plus' },
  }) as unknown,
}));

vi.mock('@/components/image-shield', () => ({
  ImageShield: (props: { userTier?: 'free' | 'starter' | 'pro'; isGuestMode?: boolean }) => {
    imageShieldPropsSpy(props);
    return <div data-testid="image-shield-mock" />;
  },
}));

const globalScope = globalThis as typeof globalThis & {
  React?: typeof React;
  IS_REACT_ACT_ENVIRONMENT?: boolean;
};

globalScope.React = React;
globalScope.IS_REACT_ACT_ENVIRONMENT = true;

const renderImageShieldPage = async (ImageShieldPage: React.ComponentType) => {
  const container = document.createElement('div');
  document.body.appendChild(container);
  const root = createRoot(container);

  await act(async () => {
    root.render(<ImageShieldPage />);
  });

  return { container, root };
};

const cleanupRender = async (root: Root, container: HTMLElement) => {
  await act(async () => {
    root.unmount();
  });
  container.remove();
};

describe('ImageShield page', () => {
  beforeEach(() => {
    vi.resetModules();
    imageShieldPropsSpy.mockClear();
  });

  afterEach(() => {
    document.body.innerHTML = '';
  });

  it('normalizes pro_plus tier to pro for ImageShield component', async () => {
    const { default: ImageShieldPage } = await import('../imageshield');

    const { container, root } = await renderImageShieldPage(ImageShieldPage);

    expect(imageShieldPropsSpy).toHaveBeenCalledTimes(1);
    const props = imageShieldPropsSpy.mock.calls[0]?.[0];
    expect(props?.userTier).toBe('pro');

    await cleanupRender(root, container);
  });
});
client/src/pages/imageshield.tsx
+3
-1

import { ImageShield } from "@/components/image-shield";
import { useAuth } from "@/hooks/useAuth";

export default function ImageShieldPage() {
  const { user } = useAuth();
  const baseTier = user?.tier || 'free';
  // Map tiers for ImageShield component compatibility  
  const getUserTier = (): "free" | "starter" | "pro" => {
    // Handle legacy tier values
    const tierMap: Record<string, "free" | "starter" | "pro"> = {
      'admin': 'pro',
      'guest': 'free', 
      'guest': 'free',
      'basic': 'starter',
      'premium': 'pro',
      'pro_plus': 'pro',
      'founder': 'pro',
      'free': 'free',
      'starter': 'starter',
      'pro': 'pro'
    };
    return tierMap[baseTier] || 'free';
  };
  const userTier = getUserTier();
  const isGuestMode = !user;

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-purple-50 to-indigo-50 dark:from-gray-900 dark:via-purple-950 dark:to-indigo-950">
      <div className="container mx-auto p-4 max-w-6xl">
        <ImageShield 
          isGuestMode={isGuestMode} 
          userTier={userTier}
        />
      </div>
    </div>
  );
}