 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/lib/analytics-tracker.ts b/client/src/lib/analytics-tracker.ts
index c20a6022ce88cddd8cfa63d4c9c14aabd0468b6d..eb6f4ca535613d0903bf1e6ccd5efd317256e914 100644
--- a/client/src/lib/analytics-tracker.ts
+++ b/client/src/lib/analytics-tracker.ts
@@ -1,35 +1,37 @@
 // PHASE 1: Client-Side Analytics & Event Tracking System
 // Comprehensive user behavior tracking for real analytics
 
 import { v4 as uuidv4 } from 'uuid';
 
+type AnalyticsMetadata = Record<string, string | number | boolean | undefined>;
+
 interface AnalyticsEvent {
   type: string;
   element?: string;
   page: string;
-  metadata?: Record<string, unknown>;
+  metadata?: AnalyticsMetadata;
   value?: number;
 }
 
 interface PageViewData {
   path: string;
   title?: string;
   referrer?: string;
   timeOnPage?: number;
   scrollDepth?: number;
   exitPage?: boolean;
 }
 
 interface SessionData {
   sessionId: string;
   startTime: number;
   lastActivity: number;
   pageCount: number;
   events: AnalyticsEvent[];
 }
 
 class AnalyticsTracker {
   private sessionId: string;
   private userId?: string;
   private currentPage: string = '';
   private pageStartTime: number = 0;
diff --git a/client/src/lib/analytics-tracker.ts b/client/src/lib/analytics-tracker.ts
index c20a6022ce88cddd8cfa63d4c9c14aabd0468b6d..eb6f4ca535613d0903bf1e6ccd5efd317256e914 100644
--- a/client/src/lib/analytics-tracker.ts
+++ b/client/src/lib/analytics-tracker.ts
@@ -132,106 +134,106 @@ class AnalyticsTracker {
 
   private trackScrollDepth() {
     const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
     const docHeight = Math.max(
       document.body.scrollHeight,
       document.documentElement.scrollHeight
     );
     const windowHeight = window.innerHeight;
     const scrollPercent = Math.round((scrollTop / (docHeight - windowHeight)) * 100);
 
     if (scrollPercent > this.maxScrollDepth) {
       this.maxScrollDepth = Math.min(scrollPercent, 100);
       
       // Track milestone scroll depths
       if (this.maxScrollDepth >= 75 && this.maxScrollDepth % 25 === 0) {
         this.trackEvent('scroll_depth', { depth: this.maxScrollDepth });
       }
     }
   }
 
   private trackClick(e: MouseEvent) {
     const target = e.target as HTMLElement;
     if (!target) return;
 
     let element = '';
-    const metadata: Record<string, string | number | boolean | undefined> = {};
+    const metadata: AnalyticsMetadata = {};
 
     // Get element identifier
     if (target.id) {
       element = `#${target.id}`;
     } else if (target.getAttribute('data-testid')) {
       element = `[data-testid="${target.getAttribute('data-testid')}"]`;
     } else if (target.className && typeof target.className === 'string' && target.className.trim()) {
       element = `.${target.className.split(' ')[0]}`;
     } else {
       element = target.tagName.toLowerCase();
     }
 
     // Add context metadata
     if (target.tagName === 'A') {
       metadata.href = (target as HTMLAnchorElement).href;
       metadata.text = target.textContent?.trim();
     } else if (target.tagName === 'BUTTON') {
       metadata.text = target.textContent?.trim();
       metadata.type = (target as HTMLButtonElement).type;
     }
 
     this.trackEvent('click', { element, ...metadata });
   }
 
-  public trackEvent(type: string, metadata?: Record<string, string | number | boolean | undefined>, value?: number) {
+  public trackEvent(type: string, metadata?: AnalyticsMetadata, value?: number) {
     const event: AnalyticsEvent = {
       type,
       page: this.currentPage,
       metadata,
       value
     };
 
     this.session.events.push(event);
     this.sendEvent('engagement_event', event);
     this.updateActivity();
   }
 
   public trackContentView(contentId: number, platform: string, subreddit?: string) {
     this.sendEvent('content_view', {
       contentId,
       platform,
       subreddit,
       viewType: 'internal'
     });
   }
 
-  public trackContentGeneration(success: boolean, platform: string, metadata?: Record<string, unknown>) {
+  public trackContentGeneration(success: boolean, platform: string, metadata?: AnalyticsMetadata) {
     this.trackEvent('content_generation', {
       success,
       platform,
       ...metadata
     });
   }
 
-  public trackFeatureUsage(feature: string, action: string, metadata?: Record<string, unknown>) {
+  public trackFeatureUsage(feature: string, action: string, metadata?: AnalyticsMetadata) {
     this.trackEvent('feature_usage', {
       feature,
       action,
       ...metadata
     });
   }
 
   private async sendEvent(eventType: string, data: unknown) {
     if (!this.isTracking) return;
 
     const eventData = {
       type: 'page_view' as const,
       page: window.location.pathname,
       eventType,
       sessionId: this.sessionId,
       userId: this.userId,
       timestamp: new Date().toISOString(),
       userAgent: navigator.userAgent,
       url: window.location.href,
       referrer: document.referrer,
       ...(data as Record<string, unknown>)
     };
 
     this.eventQueue.push(eventData);
 
diff --git a/client/src/lib/analytics-tracker.ts b/client/src/lib/analytics-tracker.ts
index c20a6022ce88cddd8cfa63d4c9c14aabd0468b6d..eb6f4ca535613d0903bf1e6ccd5efd317256e914 100644
--- a/client/src/lib/analytics-tracker.ts
+++ b/client/src/lib/analytics-tracker.ts
@@ -307,30 +309,30 @@ class AnalyticsTracker {
           func.apply(this, args);
           lastExecTime = Date.now();
         }, delay - (currentTime - lastExecTime));
       }
     };
   }
 
   public disable() {
     this.isTracking = false;
     if (this.heartbeatInterval) {
       clearInterval(this.heartbeatInterval);
     }
   }
 
   public enable() {
     this.isTracking = true;
     this.startHeartbeat();
   }
 }
 
 // Global analytics instance
 export const analytics = new AnalyticsTracker();
 
 // Convenience methods for common tracking
 export const trackPageView = (path: string, title?: string) => analytics.trackPageView(path, title);
-export const trackEvent = (type: string, metadata?: Record<string, unknown>, value?: number) => analytics.trackEvent(type, metadata, value);
+export const trackEvent = (type: string, metadata?: AnalyticsMetadata, value?: number) => analytics.trackEvent(type, metadata, value);
 export const trackContentView = (contentId: number, platform: string, subreddit?: string) => analytics.trackContentView(contentId, platform, subreddit);
-export const trackContentGeneration = (success: boolean, platform: string, metadata?: Record<string, unknown>) => analytics.trackContentGeneration(success, platform, metadata);
-export const trackFeatureUsage = (feature: string, action: string, metadata?: Record<string, unknown>) => analytics.trackFeatureUsage(feature, action, metadata);
+export const trackContentGeneration = (success: boolean, platform: string, metadata?: AnalyticsMetadata) => analytics.trackContentGeneration(success, platform, metadata);
+export const trackFeatureUsage = (feature: string, action: string, metadata?: AnalyticsMetadata) => analytics.trackFeatureUsage(feature, action, metadata);
 export const setUserId = (userId: string) => analytics.setUserId(userId);
 
EOF
)