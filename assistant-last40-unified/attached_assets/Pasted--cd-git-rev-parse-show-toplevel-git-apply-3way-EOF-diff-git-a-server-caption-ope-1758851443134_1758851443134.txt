 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/caption/openaiFallback.ts b/server/caption/openaiFallback.ts
index ac39908e588eaeca6b030d515bd6d670c6ea42c9..bba6be2e6ecba3f00e638c894b46a4faebcd051d 100644
--- a/server/caption/openaiFallback.ts
+++ b/server/caption/openaiFallback.ts
@@ -1,26 +1,27 @@
 import OpenAI from 'openai';
+import type { ChatCompletionMessageParam } from 'openai/resources/chat/completions';
 import { z } from 'zod';
 import { ensureFallbackCompliance, type FallbackInferenceInput } from './inferFallbackFromFacts';
 import { CaptionItem } from './schema';
 import { serializePromptField } from './promptUtils';
 import { formatVoiceContext } from './voiceTraits';
 
 const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY || '' });
 
 export interface FallbackParams {
   platform: 'instagram' | 'x' | 'reddit' | 'tiktok';
   voice?: string;
   imageUrl?: string;
   theme?: string;
   context?: string;
   existingCaption?: string;
 }
 
 export async function openAICaptionFallback({
   platform,
   voice = "flirty_playful",
   imageUrl,
   existingCaption,
   context,
   theme,
 }: FallbackParams): Promise<z.infer<typeof CaptionItem>> {
diff --git a/server/caption/openaiFallback.ts b/server/caption/openaiFallback.ts
index ac39908e588eaeca6b030d515bd6d670c6ea42c9..bba6be2e6ecba3f00e638c894b46a4faebcd051d 100644
--- a/server/caption/openaiFallback.ts
+++ b/server/caption/openaiFallback.ts
@@ -36,51 +37,51 @@ export async function openAICaptionFallback({
       alt: "Test fallback alt text for deterministic testing",
       nsfw: false
     };
     const compliance = ensureFallbackCompliance(
       {
         caption: base.caption,
         hashtags: base.hashtags,
         cta: base.cta,
         alt: base.alt,
       },
       {
         platform,
         context: context ?? existingCaption,
         existingCaption,
         theme,
       }
     );
 
     return CaptionItem.parse({
       ...base,
       hashtags: compliance.hashtags,
       cta: compliance.cta,
       alt: compliance.alt,
     });
   }
-  let messages: { role: "system" | "user" | "assistant"; content: string | { type: string; image_url?: { url: string }; text?: string }[] }[] = [];
+  let messages: ChatCompletionMessageParam[] = [];
   const sanitizedExistingCaption = existingCaption ? serializePromptField(existingCaption) : undefined;
   const voiceContext = formatVoiceContext(voice);
   const systemVoiceSuffix = voiceContext ? `\n${voiceContext}` : '';
 
   const fallbackContext = context ?? existingCaption ?? sanitizedExistingCaption;
   const fallbackParamsForCompliance: FallbackInferenceInput = {
     platform,
     context: fallbackContext,
     existingCaption,
     theme,
   };
 
   if (imageUrl && openai) {
     try {
       console.log('OpenAI fallback: Analyzing image for accurate captions');
 
       if (imageUrl.startsWith('data:')) {
         // For data URLs, we can send directly to OpenAI vision
         messages = [
           {
             role: "system",
             content: `You are an expert social media caption writer. Analyze the image carefully and create engaging ${voice} content for ${platform} that directly relates to what you see.${systemVoiceSuffix}
 
 Return ONLY a JSON object with this structure:
 {
 
EOF
)