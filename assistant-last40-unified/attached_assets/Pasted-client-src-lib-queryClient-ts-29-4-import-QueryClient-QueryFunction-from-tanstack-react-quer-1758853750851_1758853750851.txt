client/src/lib/queryClient.ts
+29-4
import { QueryClient, QueryFunction } from "@tanstack/react-query";

// Enhanced error interface for better error handling
export interface ApiError extends Error {
  status: number;
  statusText: string;
  isAuthError?: boolean;
  isForbidden?: boolean;
  userMessage?: string;
}

// Helper function to get an error message based on status and error data
function getErrorMessage(status: number, errorData: Record<string, unknown>): string | undefined {
  if (errorData.message && typeof errorData.message === 'string') {
    return errorData.message;
  const rawMessage =
    typeof errorData.message === "string"
      ? errorData.message
      : typeof errorData.error === "string"
        ? errorData.error
        : undefined;

  if (status === 403 && rawMessage) {
    const normalizedMessage = rawMessage.toLowerCase();
    const upgradeSignals = [
      "insufficient tier",
      "upgrade",
      "plan required",
      "premium feature",
      "pro feature",
    ];

    if (upgradeSignals.some((signal) => normalizedMessage.includes(signal))) {
      return rawMessage;
    }
  }

  if (rawMessage) {
    return rawMessage;
  }

  switch (status) {
    case 401:
      return "Authentication failed. Please log in again.";
    case 403:
      return "You do not have permission to access this resource.";
    case 404:
      return "The requested resource was not found.";
    default:
      return `An error occurred: ${status}`;
  }
}

// Helper function to get the auth token from cookies
function getAuthToken(): string | null {
  const nameEQ = "authToken=";
  const ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') c = c.substring(1, c.length);
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
  }
  return null;
}

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    console.error(`❌ API Error: ${res.status} ${res.statusText} - ${text}`);

    // Create enhanced error object
    const error = new Error(`${res.status}: ${text}`) as ApiError;
    error.status = res.status;
    error.statusText = res.statusText;

    // Enhanced error messages for common auth scenarios
    if (res.status === 401) {
      error.isAuthError = true;
      if (text.includes("Access token required")) {
        error.userMessage = "Please log in to continue. Creating an account takes just 30 seconds!";
      } else if (text.includes("Invalid credentials")) {
        error.userMessage = "Invalid login credentials. Please check your username/email and password.";
      } else if (text.includes("Email not verified")) {
        error.userMessage = "Please verify your email before logging in. Check your inbox for the verification link.";
      } else {
        error.userMessage = "Authentication required. Please log in to access this feature.";
      }
    } else if (res.status === 403) {
      error.isAuthError = true;
      error.isForbidden = true;
      if (text.includes("Insufficient permissions")) {
        error.userMessage = "You don't have permission to perform this action. Please contact support if you think this is an error.";
      } else {
        error.userMessage = "Access denied. Please ensure you're logged in with the correct account.";
      }
    } else if (res.status === 404) {
      error.userMessage = "The requested resource was not found. Please check the URL or try again.";
    } else if (res.status >= 500) {
      error.userMessage = "Server error occurred. Please try again in a few moments.";
    } else {
      error.userMessage = `Request failed: ${text}`;
    }

    throw error;
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown,
): Promise<Response> {
  const headers: Record<string, string> = {};
  let body: BodyInit | undefined;

@@ -126,51 +150,52 @@ export const getQueryFn: <T = unknown>(options: {
    try {
      // Get auth token from cookies
      const authToken = getAuthToken();

      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };

      // Include Authorization header if we have a token
      if (authToken) {
        headers['Authorization'] = `Bearer ${authToken}`;
      }

      const response = await fetch(url, {
        signal,
        credentials: 'include', // Always include cookies
        headers
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({})) as Record<string, unknown>;
        const errorMessage = typeof errorData.message === 'string' ? errorData.message : response.statusText;
        const error: ApiError = new Error(errorMessage) as ApiError;
        error.status = response.status;
        error.statusText = response.statusText;
        error.isAuthError = response.status === 401 || response.status === 403;
        error.isAuthError = response.status === 401;
        error.isForbidden = response.status === 403;
        error.userMessage = getErrorMessage(response.status, errorData);

        // If it's an auth error, clear any stale tokens and redirect to login
        if (error.isAuthError) {
          document.cookie = 'authToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
          if (window.location.pathname !== '/' && window.location.pathname !== '/login') {
            window.location.href = '/';
          }
        }

        throw error;
      }

      const contentType = response.headers.get('content-type');
      if (contentType?.includes('application/json')) {
        return response.json();
      }

      return response.text();
    } catch (error) {
      if (error instanceof Error && error.name === 'AbortError') {
        throw error;
      }

      // Enhanced error handling for network issues
client/src/pages/reddit-posting.tsx
+38-2
@@ -28,51 +28,52 @@ import {
  Send,
  Calendar,
  User,
  Eye,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Link as LinkIcon,
  Globe,
  Settings,
  Clock,
  BarChart3,
  Users,
  TrendingUp,
  Zap,
  Shield,
  FileText,
  TestTube,
  ExternalLink,
  ImageIcon,
  Images,
  LogIn,
  UserCheck,
  ChevronsUpDown,
  RefreshCcw,
  Loader2
  Loader2,
  Lock
} from 'lucide-react';
import { MediaLibrarySelector } from '@/components/MediaLibrarySelector';
import type { 
  ShadowbanStatusType, 
  ShadowbanCheckApiResponse,
  ShadowbanSubmissionSummary,
  RedditCommunitySellingPolicy 
} from '@shared/schema';
import type { SubredditCommunity } from '@/types/reddit';

function isApiError(error: unknown): error is ApiError {
  return error instanceof Error && 'status' in error && typeof (error as { status?: unknown }).status === 'number';
}

interface RedditAccount {
  id: number;
  username: string;
  isActive: boolean;
  connectedAt: string;
  karma: number;
  verified: boolean;
  accountAgeDays?: number;
}

// SubredditCommunity type now imported from @/types/reddit
@@ -243,55 +244,66 @@ export default function RedditPostingPage() {
    const file = e.target.files?.[0];
    if (file) {
      setImageFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const toggleMediaSelection = (assetId: number) => {
    setSelectedMediaIds((prev) => {
      if (prev.includes(assetId)) {
        return prev.filter((id) => id !== assetId);
      }
      return [...prev, assetId];
    });
  };

  const handleCaptionChange = (assetId: number, caption: string) => {
    setMediaCaptions((prev) => ({ ...prev, [assetId]: caption }));
  };

  // Fetch Reddit accounts
  const { data: accounts = [], isLoading: accountsLoading } = useQuery<RedditAccount[]>({
  const {
    data: accounts = [],
    isLoading: accountsLoading,
    error: accountsError,
  } = useQuery<RedditAccount[], ApiError>({
    queryKey: ['/api/reddit/accounts'],
    retry: false,
  });

  const requiresUpgrade = isApiError(accountsError) && accountsError.status === 403;
  const accountsErrorMessage = isApiError(accountsError)
    ? accountsError.userMessage ?? accountsError.message
    : accountsError instanceof Error
      ? accountsError.message
      : undefined;

  // Fetch subreddit communities data
  const { data: communities = [] } = useQuery<SubredditCommunity[]>({
    queryKey: ['/api/reddit/communities'],
    retry: false,
  });

  // Fetch media assets
  const { data: mediaAssets = [], isLoading: mediaLoading } = useQuery<MediaAsset[]>({
    queryKey: ['/api/media'],
    retry: false,
  });

  const activeAccount = useMemo(
    () => accounts.find((account) => account.isActive) ?? null,
    [accounts]
  );

  const hasActiveAccount = Boolean(activeAccount);

  // Fetch shadowban status for authenticated users with Reddit accounts
  const {
    data: shadowbanStatus,
    isLoading: shadowbanLoading,
    isFetching: shadowbanFetching,
    error: shadowbanError,
@@ -658,50 +670,74 @@ export default function RedditPostingPage() {
              </div>
            </div>
          </CardHeader>
        </Card>

        <div className="grid lg:grid-cols-3 gap-6">

          {/* Main Posting Interface */}
          <div className="lg:col-span-2 space-y-6">

            {/* Account Status */}
            <Card className="bg-white/90 backdrop-blur-sm border-pink-200 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5" />
                  Reddit Account Status
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {accountsLoading ? (
                    <div className="flex items-center gap-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-orange-500 border-t-transparent" />
                      <span className="text-sm text-gray-600">Loading accounts...</span>
                    </div>
                  ) : requiresUpgrade ? (
                    <div className="text-center p-6 bg-gradient-to-br from-orange-50 to-rose-50 rounded-lg border border-orange-200 shadow-sm">
                      <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-orange-100 text-orange-600">
                        <Lock className="h-8 w-8" />
                      </div>
                      <h3 className="font-semibold text-orange-900 mb-2">Upgrade Required</h3>
                      <p className="text-sm text-orange-700 mb-4">
                        {accountsErrorMessage ?? 'Reddit automations are part of a premium plan. Upgrade your account to unlock posting tools.'}
                      </p>
                      <div className="flex justify-center">
                        <Button asChild className="bg-orange-500 hover:bg-orange-600 text-white">
                          <a href="/pricing">View Plans</a>
                        </Button>
                      </div>
                      <p className="mt-4 text-xs text-orange-600">
                        Need help upgrading? <button type="button" className="underline" onClick={() => setShowAuthModal(true)}>Talk to support</button>.
                      </p>
                    </div>
                  ) : accountsError ? (
                    <Alert variant="destructive">
                      <AlertDescription>
                        {accountsErrorMessage ?? 'Unable to load Reddit accounts. Please try again later.'}
                      </AlertDescription>
                    </Alert>
                  ) : accounts?.length > 0 ? (
                    <div className="space-y-3">
                      {accounts.map((account) => {
                        const isActive = account.isActive;
                        const rowAccent = isActive ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200';
                        const indicatorAccent = isActive ? 'bg-green-500' : 'bg-gray-400';
                        const nameAccent = isActive ? 'text-green-800' : 'text-gray-700';
                        const metaAccent = isActive ? 'text-green-600' : 'text-gray-500';
                        const badgeAccent = isActive ? 'text-green-700 border-green-300' : 'text-gray-600 border-gray-300';
                        const testButtonAccent = isActive
                          ? 'border-green-300 text-green-700 hover:bg-green-50'
                          : 'border-gray-300 text-gray-500 cursor-not-allowed opacity-60';

                        return (
                          <div
                            key={account.id}
                            data-testid={`reddit-account-${account.id}`}
                            className={`flex items-center justify-between p-3 rounded-lg border ${rowAccent}`}
                          >
                            <div className="flex items-center gap-3">
                              <div className={`w-3 h-3 rounded-full ${indicatorAccent}`} />
                              <div>
                                <p className={`font-medium ${nameAccent}`}>u/{account.username}</p>
                                <p className={`text-sm ${metaAccent}`}>
                                  {account.karma} karma • Connected {new Date(account.connectedAt).toLocaleDateString()}
