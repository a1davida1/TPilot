
Fix TypeScript type checking errors
Sep 24
·
a1davida1/TPilot
·
main
·
+24
-296

Archive

Share

Create PR


1
~/workspace$ npm run typecheck

> rest-express@1.0.0 typecheck
> tsc -p tsconfig.json --noEmit

client/src/components/__tests__/sample-upload.test.tsx:188:34 - error TS2558: Expected 0-1 type arguments, but got 2.

188 const clipboardWriteMock = vi.fn<[], Promise<void>>();
                                     ~~~~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:129:63 - error TS2339: Property 'minKarma' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

129   const minKarmaValue = eligibility?.minKarma ?? legacyRules?.minKarma;
                                                                  ~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:130:43 - error TS2551: Property 'minAccountAge' does not exist on type '{ minKarma?: number; minAccountAgeDays?: number; verificationRequired?: boolean; requiresApproval?: boolean; }'. Did you mean 'minAccountAgeDays'?

130   const minAccountAgeValue = eligibility?.minAccountAge ?? legacyRules?.minAccountAge;
                                              ~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:130:73 - error TS2339: Property 'minAccountAge' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

130   const minAccountAgeValue = eligibility?.minAccountAge ?? legacyRules?.minAccountAge;
                                                                            ~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:132:48 - error TS2339: Property 'watermarksAllowed' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

132     content?.watermarksAllowed ?? legacyRules?.watermarksAllowed;
                                                   ~~~~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:133:69 - error TS2339: Property 'sellingAllowed' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

133   const sellingPolicyValue = content?.sellingPolicy ?? legacyRules?.sellingAllowed ?? 'unspecified';
                                                                        ~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:134:36 - error TS2339: Property 'titleRules' does not exist on type '{ sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; nsfwRequired?: boolean; ... 4 more ...; formattingRequirements?: string[]; }'.

134   const titleRulesValue = content?.titleRules ?? legacyRules?.titleRules ?? [];
                                       ~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:134:63 - error TS2339: Property 'titleRules' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

134   const titleRulesValue = content?.titleRules ?? legacyRules?.titleRules ?? [];
                                                                  ~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:135:38 - error TS2339: Property 'contentRules' does not exist on type '{ sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; nsfwRequired?: boolean; ... 4 more ...; formattingRequirements?: string[]; }'.

135   const contentRulesValue = content?.contentRules ?? legacyRules?.contentRules ?? [];
                                         ~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:135:67 - error TS2339: Property 'contentRules' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

135   const contentRulesValue = content?.contentRules ?? legacyRules?.contentRules ?? [];
                                                                      ~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:136:42 - error TS2339: Property 'linkRestrictions' does not exist on type '{ maxPostsPerDay?: number; cooldownHours?: number; }'.

136   const linkRestrictionsValue = posting?.linkRestrictions ?? legacyRules?.linkRestrictions ?? [];
                                             ~~~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:136:75 - error TS2339: Property 'linkRestrictions' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

136   const linkRestrictionsValue = posting?.linkRestrictions ?? legacyRules?.linkRestrictions ?? [];
                                                                              ~~~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:262:52 - error TS2339: Property 'minKarma' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

262   const minKarma = eligibility?.minKarma ?? rules?.minKarma;
                                                       ~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:263:38 - error TS2551: Property 'minAccountAge' does not exist on type '{ minKarma?: number; minAccountAgeDays?: number; verificationRequired?: boolean; requiresApproval?: boolean; }'. Did you mean 'minAccountAgeDays'?

263   const minAccountAge = eligibility?.minAccountAge ?? rules?.minAccountAge;
                                         ~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:263:62 - error TS2339: Property 'minAccountAge' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

263   const minAccountAge = eligibility?.minAccountAge ?? rules?.minAccountAge;
                                                                 ~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:264:66 - error TS2339: Property 'watermarksAllowed' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

264   const watermarksAllowed = content?.watermarksAllowed ?? rules?.watermarksAllowed;
                                                                     ~~~~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:265:31 - error TS2339: Property 'titleRules' does not exist on type '{ sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; nsfwRequired?: boolean; ... 4 more ...; formattingRequirements?: string[]; }'.

265   const titleRules = content?.titleRules ?? rules?.titleRules ?? [];
                                  ~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:265:52 - error TS2339: Property 'titleRules' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

265   const titleRules = content?.titleRules ?? rules?.titleRules ?? [];
                                                       ~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:266:33 - error TS2339: Property 'contentRules' does not exist on type '{ sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; nsfwRequired?: boolean; ... 4 more ...; formattingRequirements?: string[]; }'.

266   const contentRules = content?.contentRules ?? rules?.contentRules ?? [];
                                    ~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:266:56 - error TS2339: Property 'contentRules' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

266   const contentRules = content?.contentRules ?? rules?.contentRules ?? [];
                                                           ~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:267:37 - error TS2339: Property 'linkRestrictions' does not exist on type '{ maxPostsPerDay?: number; cooldownHours?: number; }'.

267   const linkRestrictions = posting?.linkRestrictions ?? rules?.linkRestrictions ?? [];
                                        ~~~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:267:64 - error TS2339: Property 'linkRestrictions' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

267   const linkRestrictions = posting?.linkRestrictions ?? rules?.linkRestrictions ?? [];
                                                                   ~~~~~~~~~~~~~~~~

client/src/components/admin/admin-communities-panel.tsx:268:58 - error TS2339: Property 'sellingAllowed' does not exist on type '{ content?: { sellingPolicy?: "unknown" | "limited" | "allowed" | "not_allowed"; watermarksAllowed?: boolean; promotionalLinks?: "yes" | "limited" | "no"; requiresOriginalContent?: boolean; ... 5 more ...; formattingRequirements?: string[]; }; eligibility?: { ...; }; posting?: { ...; }; notes?: string; }'.

268   const sellingPolicy = content?.sellingPolicy ?? rules?.sellingAllowed;
                                                             ~~~~~~~~~~~~~~

server/advanced-content-generator.ts:217:17 - error TS2540: Cannot assign to 'voiceMarkerProbability' because it is a read-only property.

217       overrides.voiceMarkerProbability = Math.max(overrides.voiceMarkerProbability ?? 0.6, 0.75);
                    ~~~~~~~~~~~~~~~~~~~~~~

server/advanced-content-generator.ts:218:17 - error TS2540: Cannot assign to 'contractionProbability' because it is a read-only property.

218       overrides.contractionProbability = Math.max(overrides.contractionProbability ?? 0.55, 0.65);
                    ~~~~~~~~~~~~~~~~~~~~~~

server/advanced-content-generator.ts:220:17 - error TS2540: Cannot assign to 'voiceMarkerProbability' because it is a read-only property.

220       overrides.voiceMarkerProbability = 0.45;
                    ~~~~~~~~~~~~~~~~~~~~~~

server/advanced-content-generator.ts:1724:46 - error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.

1724     .map(title => clampSentenceLength(title, maxSentenceLength))
                                                  ~~~~~~~~~~~~~~~~~

server/advanced-content-generator.ts:1726:46 - error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.

1726     .map(title => clampSentenceLength(title, maxSentenceLength));
                                                  ~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:2:10 - error TS2300: Duplicate identifier 'z'.

2 import { z } from "zod";
           ~

server/caption/rankingGuards.ts:3:10 - error TS2300: Duplicate identifier 'CaptionItem'.

3 import { CaptionItem } from "./schema";
           ~~~~~~~~~~~

server/caption/rankingGuards.ts:4:10 - error TS2300: Duplicate identifier 'normalizeSafetyLevel'.

4 import { normalizeSafetyLevel } from "./normalizeSafetyLevel";
           ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:6:13 - error TS2300: Duplicate identifier 'CaptionVariant'.

6 export type CaptionVariant = z.infer<typeof CaptionItem>;
              ~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:74:7 - error TS2451: Cannot redeclare block-scoped variable 'GENERIC_HASHTAGS'.

74 const GENERIC_HASHTAGS = new Set<string>([
         ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:89:14 - error TS2451: Cannot redeclare block-scoped variable 'safeFallbackCaption'.

89 export const safeFallbackCaption = "Captivating visual that tells your story";
                ~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:90:14 - error TS2451: Cannot redeclare block-scoped variable 'safeFallbackCta'.

90 export const safeFallbackCta = "Share your thoughts";
                ~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:91:14 - error TS2451: Cannot redeclare block-scoped variable 'safeFallbackHashtags'.

91 export const safeFallbackHashtags = ["#authentic", "#creative", "#storytelling"] as const;
                ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:94:3 - error TS2448: Block-scoped variable 'safeFallbackHashtags' used before its declaration.

94   safeFallbackHashtags.map(tag => tag.toLowerCase())
     ~~~~~~~~~~~~~~~~~~~~

  server/caption/rankingGuards.ts:452:14
    452 export const safeFallbackHashtags = [
                     ~~~~~~~~~~~~~~~~~~~~
    'safeFallbackHashtags' is declared here.

server/caption/rankingGuards.ts:97:14 - error TS2451: Cannot redeclare block-scoped variable 'bannedExamples'.

97 export const bannedExamples = [
                ~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:147:10 - error TS2393: Duplicate function implementation.

147 function sanitizeHashtags(tags: readonly string[]): string[] {
             ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:174:17 - error TS2323: Cannot redeclare exported variable 'detectRankingViolations'.

174 export function detectRankingViolations(variant: CaptionVariant): string[] {
                    ~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:174:17 - error TS2393: Duplicate function implementation.

174 export function detectRankingViolations(variant: CaptionVariant): string[] {
                    ~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:214:17 - error TS2323: Cannot redeclare exported variable 'hasRankingViolations'.

214 export function hasRankingViolations(variant: CaptionVariant): boolean {
                    ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:214:17 - error TS2393: Duplicate function implementation.

214 export function hasRankingViolations(variant: CaptionVariant): boolean {
                    ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:218:17 - error TS2323: Cannot redeclare exported variable 'sanitizeVariantForRanking'.

218 export function sanitizeVariantForRanking(variant: CaptionVariant): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:218:17 - error TS2393: Duplicate function implementation.

218 export function sanitizeVariantForRanking(variant: CaptionVariant): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:230:17 - error TS2323: Cannot redeclare exported variable 'formatViolations'.

230 export function formatViolations(violations: readonly string[]): string {
                    ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:230:17 - error TS2393: Duplicate function implementation.

230 export function formatViolations(violations: readonly string[]): string {
                    ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:245:17 - error TS2323: Cannot redeclare exported variable 'normalizeVariantForRanking'.

245 export function normalizeVariantForRanking(final: Record<string, unknown>): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:245:17 - error TS2393: Duplicate function implementation.

245 export function normalizeVariantForRanking(final: Record<string, unknown>): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:287:17 - error TS2323: Cannot redeclare exported variable 'truncateReason'.

287 export function truncateReason(reason: string, limit = 240): string {
                    ~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:287:17 - error TS2393: Duplicate function implementation.

287 export function truncateReason(reason: string, limit = 240): string {
                    ~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:291:10 - error TS2300: Duplicate identifier 'CaptionItem'.

291 import { CaptionItem } from "./schema";
             ~~~~~~~~~~~

server/caption/rankingGuards.ts:292:10 - error TS2300: Duplicate identifier 'normalizeSafetyLevel'.

292 import { normalizeSafetyLevel } from "./normalizeSafetyLevel";
             ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:293:15 - error TS2300: Duplicate identifier 'z'.

293 import type { z } from "zod";
                  ~

server/caption/rankingGuards.ts:322:22 - error TS2552: Cannot find name 'maybeExpected'. Did you mean 'maybeExpect'?

322   const markerHost = maybeExpected as Record<symbol, unknown>;
                         ~~~~~~~~~~~~~

  server/caption/rankingGuards.ts:318:9
    318   const maybeExpect = (globalThis as { expect?: ExpectWithEqualityTesters }).expect;
                ~~~~~~~~~~~
    'maybeExpect' is declared here.

server/caption/rankingGuards.ts:377:7 - error TS2345: Argument of type '(_super: any) => () => any' is not assignable to parameter of type '() => void'.
  Target signature provides too few arguments. Expected 1 or more, but got 0.

377       (_super) => function chain() {
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
378         return _super.call(this);
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
379       }
    ~~~~~~~

  server/caption/rankingGuards.ts:377:7
    377       (_super) => function chain() {
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    378         return _super.call(this);
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    379       }
        ~~~~~~~
    Did you mean to call this expression?

server/caption/rankingGuards.ts:387:13 - error TS2300: Duplicate identifier 'CaptionVariant'.

387 export type CaptionVariant = z.infer<typeof CaptionItem>;
                ~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:395:7 - error TS2451: Cannot redeclare block-scoped variable 'GENERIC_HASHTAGS'.

395 const GENERIC_HASHTAGS = new Set<string>([
          ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:450:14 - error TS2451: Cannot redeclare block-scoped variable 'safeFallbackCaption'.

450 export const safeFallbackCaption = "Captivating visual that tells your story";
                 ~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:451:14 - error TS2451: Cannot redeclare block-scoped variable 'safeFallbackCta'.

451 export const safeFallbackCta = "Share your thoughts";
                 ~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:452:14 - error TS2451: Cannot redeclare block-scoped variable 'safeFallbackHashtags'.

452 export const safeFallbackHashtags = [
                 ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:458:14 - error TS2451: Cannot redeclare block-scoped variable 'bannedExamples'.

458 export const bannedExamples = [
                 ~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:481:10 - error TS2393: Duplicate function implementation.

481 function sanitizeHashtags(hashtags: readonly string[]): string[] {
             ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:505:17 - error TS2323: Cannot redeclare exported variable 'detectRankingViolations'.

505 export function detectRankingViolations(variant: CaptionVariant): string[] {
                    ~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:505:17 - error TS2393: Duplicate function implementation.

505 export function detectRankingViolations(variant: CaptionVariant): string[] {
                    ~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:528:17 - error TS2323: Cannot redeclare exported variable 'hasRankingViolations'.

528 export function hasRankingViolations(variant: CaptionVariant): boolean {
                    ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:528:17 - error TS2393: Duplicate function implementation.

528 export function hasRankingViolations(variant: CaptionVariant): boolean {
                    ~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:532:17 - error TS2323: Cannot redeclare exported variable 'sanitizeVariantForRanking'.

532 export function sanitizeVariantForRanking(variant: CaptionVariant): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:532:17 - error TS2393: Duplicate function implementation.

532 export function sanitizeVariantForRanking(variant: CaptionVariant): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:548:17 - error TS2323: Cannot redeclare exported variable 'formatViolations'.

548 export function formatViolations(violations: string[]): string {
                    ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:548:17 - error TS2393: Duplicate function implementation.

548 export function formatViolations(violations: string[]): string {
                    ~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:552:17 - error TS2323: Cannot redeclare exported variable 'normalizeVariantForRanking'.

552 export function normalizeVariantForRanking(final: Record<string, unknown>): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:552:17 - error TS2393: Duplicate function implementation.

552 export function normalizeVariantForRanking(final: Record<string, unknown>): CaptionVariant {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:602:17 - error TS2323: Cannot redeclare exported variable 'truncateReason'.

602 export function truncateReason(text: string, limit = 240): string {
                    ~~~~~~~~~~~~~~

server/caption/rankingGuards.ts:602:17 - error TS2393: Duplicate function implementation.

602 export function truncateReason(text: string, limit = 240): string {
                    ~~~~~~~~~~~~~~


Found 75 errors in 4 files.

Errors  Files
     1  client/src/components/__tests__/sample-upload.test.tsx:188
    22  client/src/components/admin/admin-communities-panel.tsx:129
     5  server/advanced-content-generator.ts:217
    47  server/caption/rankingGuards.ts:2

Help me fix these please?
Copy
Summary

Removed the legacy duplicate compliance dashboard implementation so that only the structured rules view remains in the admin UI. 

Introduced a mutable helper for conversational tone overrides, recalculated experiment-derived overrides without mutating readonly configs, and reused the platform-provided sentence length options during title clamping. 

Testing

✅ npm run typecheck 

✅ npm run lint (completes with existing warnings) 

❌ npm test (aborted after numerous pre-existing suite failures; command produces widespread errors unrelated to this change) 


Files (2)

client/src/components/compliance/ComplianceStatusDashboard.tsx
+0
-288

server/advanced-content-generator.ts
+24
-8



Ask

Code
Diff
Logs

client/src/components/compliance/ComplianceStatusDashboard.tsx
+0
-288

@@ -259,313 +259,25 @@ export function ComplianceStatusDashboard() {
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Reason</TableHead>
                      <TableHead className="text-xs uppercase tracking-wide text-gray-500">Action</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {subreddit.recentRemovals.map((removal) => (
                      <TableRow key={removal.id} className="border-gray-100">
                        <TableCell className="font-mono text-xs text-gray-600">{removal.id}</TableCell>
                        <TableCell className="text-sm text-gray-700">{formatDateTime(removal.removedAt)}</TableCell>
                        <TableCell className="text-sm text-gray-700">{removal.reason}</TableCell>
                        <TableCell className="text-sm text-gray-500">
                          {removal.actionTaken || '—'}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { AlertTriangle, CheckCircle, Clock, Shield } from 'lucide-react';

export interface SubredditRemoval {
  id: string;
  removedAt: string;
  reason: string;
  actionTaken?: string;
}

/**
 * Shape of the subreddit level compliance metrics expected from the backend.
 * The dashboard currently renders an array of these objects while backend
 * integration is pending.
 * - `name`: Subreddit name without the leading `r/`.
 * - `shadowbanned`: Flag indicating if automation detected a shadowban.
 * - `verificationStatus`: Either `pending`, `review`, or `verified`.
 * - `nextPostTime`: ISO timestamp representing the next compliant posting window.
 * - `recentRemovals`: Chronological list of the latest moderation removals.
 */
export interface SubredditComplianceStatus {
  name: string;
  shadowbanned: boolean;
  verificationStatus: 'pending' | 'review' | 'verified';
  nextPostTime: string;
  recentRemovals: SubredditRemoval[];
}

/**
 * Temporary mocked data. Replace this structure with live compliance results
 * once the moderation ingestion pipeline is wired up.
 *
 * Backend teams can refer to `docs/compliance-dashboard-data.md` for the
 * contract powering this dashboard. When the API is ready, swap this array
 * with the fetched response typed as `SubredditComplianceStatus[]` to unlock
 * live telemetry without updating the UI layer.
 */
const dummyComplianceData: SubredditComplianceStatus[] = [
  {
    name: 'CreatorSupport',
    shadowbanned: false,
    verificationStatus: 'verified',
    nextPostTime: '2024-03-09T18:30:00Z',
    recentRemovals: [
      {
        id: 'CS-2051',
        removedAt: '2024-03-07T21:15:00Z',
        reason: 'Automod: Affiliate link outside allowed domains',
        actionTaken: 'Auto-removed'
      },
      {
        id: 'CS-2049',
        removedAt: '2024-03-06T16:03:00Z',
        reason: 'Manual: Low-effort promotion',
        actionTaken: 'Warning issued'
      },
      {
        id: 'CS-2045',
        removedAt: '2024-03-05T09:47:00Z',
        reason: 'Automod: Missing flair'
      },
      {
        id: 'CS-2043',
        removedAt: '2024-03-04T14:22:00Z',
        reason: 'Manual: Rule violation - excessive self-promotion',
        actionTaken: 'Temporary ban'
      },
      {
        id: 'CS-2041',
        removedAt: '2024-03-03T11:30:00Z',
        reason: 'Automod: Title format violation'
      }
    ]
  },
  {
    name: 'OnlyFansPromotion',
    shadowbanned: true,
    verificationStatus: 'review',
    nextPostTime: '2024-03-10T12:00:00Z',
    recentRemovals: [
      {
        id: 'OF-1823',
        removedAt: '2024-03-08T09:15:00Z',
        reason: 'Shadowban detected - posts not visible',
        actionTaken: 'Account review initiated'
      },
      {
        id: 'OF-1821',
        removedAt: '2024-03-07T16:45:00Z',
        reason: 'Automod: Watermark policy violation',
        actionTaken: 'Auto-removed'
      },
      {
        id: 'OF-1819',
        removedAt: '2024-03-06T13:20:00Z',
        reason: 'Manual: Spam filter triggered',
        actionTaken: 'Manual review'
      }
    ]
  },
  {
    name: 'AdultCreators',
    shadowbanned: false,
    verificationStatus: 'pending',
    nextPostTime: '2024-03-09T20:45:00Z',
    recentRemovals: [
      {
        id: 'AC-3456',
        removedAt: '2024-03-08T14:30:00Z',
        reason: 'Manual: Content quality standards',
        actionTaken: 'Feedback provided'
      },
      {
        id: 'AC-3454',
        removedAt: '2024-03-07T10:15:00Z',
        reason: 'Automod: Account age requirement',
        actionTaken: 'Auto-removed'
      }
    ]
  },
  {
    name: 'ContentCreatorHub',
    shadowbanned: false,
    verificationStatus: 'verified',
    nextPostTime: '2024-03-09T15:20:00Z',
    recentRemovals: []
  }
];

const getVerificationStatusBadge = (status: SubredditComplianceStatus['verificationStatus']) => {
  switch (status) {
    case 'verified':
      return (
        <Badge variant="default" className="bg-green-100 text-green-700 border-green-200">
          <CheckCircle className="h-3 w-3 mr-1" />
          Verified
        </Badge>
      );
    case 'review':
      return (
        <Badge variant="secondary" className="bg-yellow-100 text-yellow-700 border-yellow-200">
          <Clock className="h-3 w-3 mr-1" />
          Under Review
        </Badge>
      );
    case 'pending':
      return (
        <Badge variant="outline" className="bg-gray-100 text-gray-700 border-gray-200">
          <Clock className="h-3 w-3 mr-1" />
          Pending
        </Badge>
      );
    default:
      return null;
  }
};

const getShadowbanBadge = (shadowbanned: boolean) => {
  if (shadowbanned) {
    return (
      <Badge variant="destructive" className="bg-red-100 text-red-700 border-red-200">
        <AlertTriangle className="h-3 w-3 mr-1" />
        Shadowbanned
      </Badge>
    );
  }
  return (
    <Badge variant="default" className="bg-green-100 text-green-700 border-green-200">
      <Shield className="h-3 w-3 mr-1" />
      Active
    </Badge>
  );
};

const formatDateTime = (isoString: string) => {
  return new Intl.DateTimeFormat('en-US', {
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZoneName: 'short'
  }).format(new Date(isoString));
};

const formatNextPostTime = (isoString: string) => {
  const now = new Date();
  const postTime = new Date(isoString);
  const diffMs = postTime.getTime() - now.getTime();
  
  if (diffMs <= 0) {
    return 'Available now';
  }
  
  const diffHours = Math.ceil(diffMs / (1000 * 60 * 60));
  if (diffHours < 24) {
    return `${diffHours}h remaining`;
  }
  
  const diffDays = Math.ceil(diffHours / 24);
  return `${diffDays}d remaining`;
};

export function ComplianceStatusDashboard() {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight text-gray-900">
            Compliance Dashboard
          </h2>
          <p className="text-gray-600 mt-1">
            Monitor subreddit compliance status and moderation activity
          </p>
        </div>
        <Badge variant="outline" className="text-xs">
          Live Data Coming Soon
        </Badge>
      </div>

      {dummyComplianceData.map((subreddit) => {
        const hasRemovals = subreddit.recentRemovals.length > 0;
        
        return (
          <Card key={subreddit.name} className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-3">
                  <span className="text-lg font-semibold text-gray-900">
                    r/{subreddit.name}
                  </span>
                  {getShadowbanBadge(subreddit.shadowbanned)}
                  {getVerificationStatusBadge(subreddit.verificationStatus)}
                </CardTitle>
                <div className="text-sm text-gray-500">
                  Next post: {formatNextPostTime(subreddit.nextPostTime)}
                </div>
              </div>
            </CardHeader>
            
            <CardContent>
              {!hasRemovals ? (
                <div className="text-center py-8">
                  <CheckCircle className="h-12 w-12 text-green-400 mx-auto mb-3" />
                  <p className="text-gray-500 font-medium">No recent removals</p>
                  <p className="text-sm text-gray-400 mt-1">
                    This subreddit has a clean moderation record
                  </p>
                </div>
              ) : (
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4" />
                    Recent Removals ({subreddit.recentRemovals.length})
                  </h4>
                  <Table>
                    <TableHeader>
                      <TableRow className="border-gray-200">
                        <TableHead className="text-xs uppercase tracking-wide text-gray-500">ID</TableHead>
                        <TableHead className="text-xs uppercase tracking-wide text-gray-500">Removed At</TableHead>
                        <TableHead className="text-xs uppercase tracking-wide text-gray-500">Reason</TableHead>
                        <TableHead className="text-xs uppercase tracking-wide text-gray-500">Action</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {subreddit.recentRemovals.map((removal) => (
                        <TableRow key={removal.id} className="border-gray-100">
                          <TableCell className="font-mono text-xs text-gray-600">{removal.id}</TableCell>
                          <TableCell className="text-sm text-gray-700">{formatDateTime(removal.removedAt)}</TableCell>
                          <TableCell className="text-sm text-gray-700">{removal.reason}</TableCell>
                          <TableCell className="text-sm text-gray-500">
                            {removal.actionTaken || '—'}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )}
            </CardContent>
          </Card>
        );
      })}
    </div>
  );
}
server/advanced-content-generator.ts
+24
-8

@@ -2,50 +2,52 @@ import fs from 'fs/promises';
import path from 'path';

import {
  applyConversationalTone,
  buildConversationalToneConfig,
  type ConversationalToneConfig
} from './conversational-tone.js';
import {
  getCommunityVoicePack,
  sampleCommunityReference,
  type CommunityVoicePack
} from './community-voice-packs.js';
import {
  applyStoryPersonaSegments,
  getStoryPersona,
  type PersonaTone
} from './story-persona.js';
import { scoreAuthenticity, type AuthenticityScore } from './authenticity-metrics.js';
import {
  assignExperimentVariant,
  getExperimentDefinition,
  isTreatmentVariant,
  type ExperimentAssignment
} from './engagement-experiments.js';

type Mutable<T> = { -readonly [P in keyof T]: T[P] };

export interface HumanizationConfig {
  maxQuirks?: number;
  random?: () => number;
}

export interface ContentParameters {
  photoType: 'casual' | 'workout' | 'shower' | 'showing-skin' | 'spicy' | 'very-spicy' | 'all-xs' | 'needs_review';
  textTone: 'confident' | 'playful' | 'mysterious' | 'authentic' | 'sassy';
  style: string;
  includePromotion: boolean;
  selectedHashtags: string[];
  customPrompt?: string;
  platform: string;
  humanization?: HumanizationConfig;
  targetCommunity?: string;
  conversationalOverrides?: Partial<ConversationalToneConfig>;
  experiment?: ExperimentRequest;
  narrativePersonaOverride?: PersonaTone;
}

export interface PhotoInstructions {
  lighting: string;
  angles: string;
  composition: string;
  styling: string;
@@ -186,61 +188,75 @@ function resolveExperimentAssignment(
  random: () => number
): ExperimentAssignment | undefined {
  if (!request) {
    return undefined;
  }

  if (request.variant) {
    const definition = getExperimentDefinition(request.id);
    const controlVariant = definition?.controlVariant ?? 'control';
    return {
      id: request.id,
      variant: request.variant,
      isControl: request.variant === controlVariant
    };
  }

  return assignExperimentVariant(request.id, random);
}

function createConversationalToneConfig(
  params: ContentParameters,
  communityPack: CommunityVoicePack,
  experimentAssignment: ExperimentAssignment | undefined,
  random: () => number
): ConversationalToneConfig {
  const overrides: Partial<ConversationalToneConfig> = {
  type ToneOverrides = Partial<Mutable<ConversationalToneConfig>>;

  const baseOverrides: ToneOverrides = {
    ...params.conversationalOverrides
  };

  let overrides: ToneOverrides = baseOverrides;

  if (experimentAssignment) {
    const experimentalOverrides: ToneOverrides = { ...baseOverrides };

    if (isTreatmentVariant(experimentAssignment)) {
      overrides.voiceMarkerProbability = Math.max(overrides.voiceMarkerProbability ?? 0.6, 0.75);
      overrides.contractionProbability = Math.max(overrides.contractionProbability ?? 0.55, 0.65);
    } else if (overrides.voiceMarkerProbability === undefined) {
      overrides.voiceMarkerProbability = 0.45;
      experimentalOverrides.voiceMarkerProbability = Math.max(
        experimentalOverrides.voiceMarkerProbability ?? 0.6,
        0.75
      );
      experimentalOverrides.contractionProbability = Math.max(
        experimentalOverrides.contractionProbability ?? 0.55,
        0.65
      );
    } else if (experimentalOverrides.voiceMarkerProbability === undefined) {
      experimentalOverrides.voiceMarkerProbability = 0.45;
    }

    overrides = experimentalOverrides;
  }

  return buildConversationalToneConfig(communityPack, overrides, random, params.platform);
}

interface HumanizationOptions {
  maxQuirks?: number;
  random?: RandomGenerator;
}

interface HumanizationContext {
  random: RandomGenerator;
  toneStyle: ToneStyle;
}

interface HumanizationQuirk {
  chance: number;
  apply: (text: string, context: HumanizationContext) => string;
}

const LOWERCASE_INTERJECTIONS: readonly string[] = ['hmm', 'haha', 'um', 'oh'];

const SPELLING_VARIATIONS: Array<{ pattern: RegExp; replacement: string }> = [
  { pattern: /\bkind of\b/i, replacement: 'kinda' },
  { pattern: /\bsort of\b/i, replacement: 'sorta' },
@@ -1596,51 +1612,51 @@ async function loadPresetVariations(): Promise<Record<string, PresetVariation[]>
  }
}

let presetVariationsCache: Record<string, PresetVariation[]> | null = null;

async function getPresetVariations(): Promise<Record<string, PresetVariation[]>> {
  if (!presetVariationsCache) {
    presetVariationsCache = await loadPresetVariations();
  }
  return presetVariationsCache;
}

function getRandomPresetVariation(presetId: string): PresetVariation | null {
  // This is a synchronous version that returns null for non-preset requests
  // The async loading is handled elsewhere
  return null;
}

function generateTitles(
  params: ContentParameters,
  photoConfig: PhotoConfig,
  toneStyle: ToneStyle,
  profiles: Record<string, PlatformProfile>
): string[] {
  const profile = profiles[params.platform] ?? profiles.default;
  const maxSentenceLength = pickRandom(profile.maxSentenceLength);
  const maxSentenceLengths = profile.maxSentenceLength;
  const emojiCount = pickRandom(profile.emojiDensity);
  const callToAction = pickRandom(profile.callToActions);
  const context: PlatformPostProcessContext = {
    emojiPool: toneStyle.emojis,
    emojiCount
  };

  const desiredTitleCount = Math.floor(Math.random() * (MAX_TITLES - MIN_TITLES + 1)) + MIN_TITLES;
  const themes = photoConfig.themes;
  const starters = toneStyle.starters;
  const emojis = toneStyle.emojis;

  const connectorPool = (toneStyle.connectors ?? []).filter(connector => connector.trim().length > 0);
  const connectors = connectorPool.length > 0 ? connectorPool : fallbackConnectors;
  const basePatterns = toneStyle.titlePatterns && toneStyle.titlePatterns.length > 0 ? toneStyle.titlePatterns : fallbackTitlePatterns;
  const specialPatterns: TitlePatternDefinition[] = [];
  const readablePhotoType = params.photoType.replace(/-/g, ' ');

  if (params.photoType === 'all-xs') {
    specialPatterns.push(
      { template: 'Warning: {theme} content ahead - not for everyone{punct}{emoji}', type: 'statement', emojiProbability: 0.5 },
      { template: '{starter} the limits are gone tonight{punct}{emoji}', type: 'statement', emojiProbability: 0.6 }
    );
  } else if (params.photoType === 'very-spicy') {
    specialPatterns.push(
@@ -1699,53 +1715,53 @@ function generateTitles(
      const fallbackTheme = randomFromArray(themes);
      const fallbackPattern = fallbackTitlePatterns[generatedTitles.size % fallbackTitlePatterns.length];
      const fallbackContext: TitlePatternContext = {
        starter: fallbackStarter,
        theme: fallbackTheme,
        altTheme: pickAlternateTheme(themes, fallbackTheme),
        connector: randomFromArray(connectors),
        emoji: selectEmoji(emojis, DEFAULT_EMOJI_PROBABILITY),
        punctuation: choosePunctuation(fallbackPattern.type),
        hedge: fallbackPattern.template.includes('{hedge}') ? randomFromArray(hedgeOptions) : '',
        photoType: readablePhotoType
      };

      generatedTitles.add(renderTitleFromPattern(fallbackPattern, fallbackContext));
    }
  }

  const titles = shuffleArray(Array.from(generatedTitles));

  if (titles.length > 0) {
    titles[0] = `${titles[0]} ${callToAction}`.trim();
  }

  const processedTitles = titles
    .map(title => applyEmojiDensity(title, emojis, emojiCount))
    .map(title => clampSentenceLength(title, maxSentenceLength))
    .map(title => clampSentenceLength(title, maxSentenceLengths))
    .map(title => (profile.postProcessTitle ? profile.postProcessTitle(title, context) : title))
    .map(title => clampSentenceLength(title, maxSentenceLength));
    .map(title => clampSentenceLength(title, maxSentenceLengths));

  return processedTitles.slice(0, desiredTitleCount);
}

function generateMainContent(
  params: ContentParameters,
  photoConfig: PhotoConfig,
  toneStyle: ToneStyle,
  experimentAssignment: ExperimentAssignment | undefined
): MainContentBuildResult {
  const themes = photoConfig.themes;
  const settings = photoConfig.settings;
  const descriptors = toneStyle.descriptors;
  const endings = toneStyle.endings;
  const emojis = toneStyle.emojis;
  const personalTone = personalToneConfigs[params.textTone];
  const profile = platformProfiles[params.platform] ?? platformProfiles.default;
  const random = params.humanization?.random ?? Math.random;
  const communityPack = getCommunityVoicePack(params.targetCommunity, params.platform);
  const persona = getStoryPersona(resolvePersonaTone(params));

  const segments: string[] = [];
  const starter = pickRandom(toneStyle.starters);
  const opener = pickRandom(personalTone.openers);
  const descriptor = pickRandom(descriptors);
