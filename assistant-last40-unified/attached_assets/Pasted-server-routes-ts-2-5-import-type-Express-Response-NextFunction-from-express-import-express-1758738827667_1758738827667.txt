server/routes.ts
+2-5
import type { Express, Response, NextFunction } from "express";
import express from "express";
import { createServer, type Server } from "http";
import session from 'express-session';
import path from 'path';
import connectPgSimple from 'connect-pg-simple';
import * as connectRedis from 'connect-redis';
import { Pool } from 'pg';
import Redis from 'ioredis';
import Stripe from 'stripe';
import passport from 'passport';

// Security and middleware
import { validateEnvironment, securityMiddleware, ipLoggingMiddleware, errorHandler, logger, generationLimiter } from "./middleware/security.js";
import { AppError, CircuitBreaker } from "./lib/errors.js";
import { authenticateToken } from "./middleware/auth.js";

// Route modules
// import { authRoutes } from "./routes/auth.js"; // Removed - using server/auth.ts instead
import { uploadRoutes, applyImageShieldProtection, protectionPresets } from "./routes/upload.js";
import { mediaRoutes } from "./routes/media.js";
import { analyticsRouter } from "./routes/analytics.js";
import { referralRouter } from "./routes/referrals.js";
import { registerExpenseRoutes } from "./expense-routes.js";
import { adminCommunitiesRouter } from "./routes/admin-communities.js";
import { dashboardRouter } from "./routes/dashboard.js";

// Core imports
import { storage } from "./storage.js";
import { setupAuth } from "./auth.js";
import { setupAdminRoutes } from "./admin-routes.js";
import { configureSocialAuth, socialAuthRoutes } from "./social-auth-config.js";
import { visitorAnalytics } from "./visitor-analytics.js";
import { makePaxum, makeCoinbase, makeStripe } from "./payments/payment-providers.js";
import { deriveStripeConfig } from "./payments/stripe-config.js";
// Analytics request type
interface AnalyticsRequest extends express.Request {
  sessionID: string;
}

// Import users table for type inference
import { users, type ContentGeneration } from "@shared/schema";

// AuthUser interface for passport serialization
interface AuthUser {
  id: number;
  username?: string;
  isAdmin?: boolean;
}

// Auth request interface that includes user  
@@ -912,55 +913,51 @@ export async function registerRoutes(app: Express, apiPrefix: string = '/api'):
  // Register new enterprise API routes
  registerApiRoutes(app);

  // Register Policy Routes
  registerPolicyRoutes(app);

  // Register Reddit Routes  
  registerRedditRoutes(app);

  // Register Analytics Routes
  registerAnalyticsRoutes(app);

  // Register Social Media Routes
  registerSocialMediaRoutes(app);

  // Register Expense Routes (Tax Tracker API)
  registerExpenseRoutes(app);

  // Register Pro Resources Routes
  registerProResourcesRoutes(app);

  // Register Caption Routes (2-pass Gemini pipeline) - MOVED UP to get routing priority
  app.use('/api/caption', captionRouter);

  // Register Dashboard Routes
  import('./routes/dashboard.js').then(({ dashboardRouter }) => {
    app.use('/api/dashboard', dashboardRouter);
  }).catch(err => {
    logger.error('Failed to load dashboard routes:', err);
  });
  app.use('/api/dashboard', dashboardRouter);

  // ==========================================
  // CONTENT GENERATIONS HISTORY API
  // ==========================================

  // Get user's content generation history
  app.get('/api/content-generations', authenticateToken, async (req: AuthRequest, res) => {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ message: "Authentication required" });
      }

      const generations = await storage.getGenerationsByUserId(req.user.id);
      res.json(generations);
    } catch (error: unknown) {
      logger.error("Failed to get content generations:", error);
      res.status(500).json({ message: "Failed to retrieve content history" });
    }
  });

  // Delete a content generation
  app.delete('/api/content-generations/:id', authenticateToken, async (req: AuthRequest, res) => {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ message: "Authentication required" });
tests/integration/dashboard-api.test.ts
+41-0
import { describe, it, expect, beforeAll, afterAll, beforeEach } from 'vitest';
import request from 'supertest';
import type { Express } from 'express';
import jwt from 'jsonwebtoken';
import { createApp } from '../../server/index.js';
import { storage } from '../../server/storage.js';

describe('Dashboard API readiness', () => {
  it('registers dashboard endpoints before the server starts handling traffic', async () => {
    const uniqueSuffix = Date.now();
    const username = `dashboardready${uniqueSuffix}`;
    const email = `${username}@test.com`;

    const testUser = await storage.createUser({
      username,
      email,
      password: 'hashedpassword',
      subscriptionTier: 'free'
    });

    const token = jwt.sign({
      userId: testUser.id,
      username,
      email
    }, process.env.JWT_SECRET || 'test-secret');

    const { app } = await createApp({
      startQueue: false,
      configureStaticAssets: false,
      enableVite: false
    });

    try {
      await request(app)
        .get('/api/dashboard/stats')
        .set('Authorization', `Bearer ${token}`)
        .expect(200);

      await request(app)
        .get('/api/dashboard/activity')
        .set('Authorization', `Bearer ${token}`)
        .expect(200);
    } finally {
      await storage.deleteUser(testUser.id).catch(() => {});
    }
  });
});

describe('Dashboard API', () => {
  let app: Express;
  let testUserId: number;
  let testUserToken: string;
  let adminUserId: number;
  let adminToken: string;

  beforeAll(async () => {
    const result = await createApp({
      startQueue: false,
      configureStaticAssets: false,
      enableVite: false
    });
    app = result.app;
    
    // Create test users
    const testUser = await storage.createUser({
      username: 'dashboardtest',
      email: 'dashboard@test.com',
      password: 'hashedpassword',
      subscriptionTier: 'free'
    });
    testUserId = testUser.id;
    
    const adminUser = await storage.createUser({
