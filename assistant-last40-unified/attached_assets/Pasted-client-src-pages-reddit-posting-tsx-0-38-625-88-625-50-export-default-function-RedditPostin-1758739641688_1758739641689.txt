client/src/pages/reddit-posting.tsx
+0-38
@@ -625,88 +625,50 @@ export default function RedditPostingPage() {
                          <img 
                            src={imagePreview} 
                            alt="Preview" 
                            className="max-w-full h-auto max-h-64 mx-auto rounded" 
                            data-testid="img-preview"
                          />
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {postType === 'gallery' && (
                  <MediaLibrarySelector
                    assets={mediaAssets}
                    selectedIds={selectedMediaIds}
                    onToggle={toggleMediaSelection}
                    captions={mediaCaptions}
                    onCaptionChange={handleCaptionChange}
                    maxSelection={20}
                    isLoading={mediaLoading}
                    showCaptions={true}
                  />
                )}

                {postType === 'gallery' && false && (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="gallery">Select Images (Max 20)</Label>
                      <Input
                        id="gallery"
                        type="file"
                        accept="image/*"
                        multiple
                        onChange={handleGallerySelect}
                        className="cursor-pointer"
                        data-testid="input-gallery-upload-old"
                      />
                    </div>
                    {galleryFiles.length > 0 && (
                      <div className="space-y-2">
                        <Label>Preview ({galleryFiles.length} images)</Label>
                        <div className="grid grid-cols-3 gap-2 p-4 border-2 border-dashed border-pink-300 rounded-lg">
                          {galleryFiles.slice(0, 9).map((file, index) => (
                            <div key={index} className="relative">
                              <img
                                src={URL.createObjectURL(file)}
                                alt={`Gallery ${index + 1}`}
                                className="w-full h-20 object-cover rounded"
                                data-testid={`img-gallery-preview-${index}`}
                              />
                              {index === 8 && galleryFiles.length > 9 && (
                                <div className="absolute inset-0 bg-black/50 flex items-center justify-center rounded text-white text-sm">
                                  +{galleryFiles.length - 9} more
                                </div>
                              )}
                            </div>
                          ))}\n                        </div>
                      </div>
                    )}
                  </div>
                )}

                {postType === 'text' && (
                  <div className="space-y-2">
                    <Label htmlFor="body">Content (Optional)</Label>
                    <Textarea
                      id="body"
                      value={body}
                      onChange={(e) => setBody(e.target.value)}
                      rows={6}
                      maxLength={10000}
                      data-testid="textarea-body"
                    />
                    <div className="text-xs text-gray-500 text-right">{body.length}/10,000</div>
                  </div>
                )}

                {postType === 'link' && (
                  <div className="space-y-2">
                    <Label htmlFor="url">URL</Label>
                    <Input
                      id="url"
                      value={url}
                      onChange={(e) => setUrl(e.target.value)}
                      type="url"
                      data-testid="input-url"
                    />
server/caption/rewritePipeline.ts
+1-1
@@ -156,51 +156,51 @@ export async function extractFacts(imageUrl:string){

type RewriteVariantsParams = {
  platform:"instagram"|"x"|"reddit"|"tiktok";
  voice:string;
  existingCaption:string;
  facts?:Record<string, unknown>;
  hint?:string;
  nsfw?:boolean;
  doNotDrop?: string[];
  style?: string;
  mood?: string
};

const VARIANT_TARGET = 5;
const VARIANT_RETRY_LIMIT = 3;

export async function variantsRewrite(params: RewriteVariantsParams) {
  const [sys, guard, prompt] = await Promise.all([
    load("system.txt"),
    load("guard.txt"),
    load("rewrite.txt")
  ]);

  let attempts = 0;
  let currentHint = params.hint;
  let variants: any[] = [];
  const variants: any[] = [];

  while (attempts < VARIANT_RETRY_LIMIT && variants.length < VARIANT_TARGET) {
    attempts += 1;
    
    const voiceContext = formatVoiceContext(params.voice);
    const user = [
      `PLATFORM: ${params.platform}`,
      `VOICE: ${params.voice}`,
      voiceContext,
      params.style ? `STYLE: ${params.style}` : "",
      params.mood ? `MOOD: ${params.mood}` : "",
      `EXISTING_CAPTION: ${serializePromptField(params.existingCaption)}`,
      params.facts ? `IMAGE_FACTS: ${JSON.stringify(params.facts)}` : "",
      `NSFW: ${params.nsfw || false}`,
      currentHint ? `HINT:${serializePromptField(currentHint, { block: true })}` : "",
    ].filter((line): line is string => Boolean(line)).join("\n");
    
    const voiceGuide = buildVoiceGuideBlock(params.voice);
    const promptSections = [sys, guard, prompt, user];
    if (voiceGuide) promptSections.push(voiceGuide);
    
    let res;
    try {
      res = await textModel.generateContent([{ text: promptSections.join("\n") }]);
    } catch (error) {
server/routes.ts
+2-5
import type { Express, Response, NextFunction } from "express";
import express from "express";
import { createServer, type Server } from "http";
import session from 'express-session';
import path from 'path';
import connectPgSimple from 'connect-pg-simple';
import * as connectRedis from 'connect-redis';
import { Pool } from 'pg';
import Redis from 'ioredis';
import Stripe from 'stripe';
import passport from 'passport';

// Security and middleware
import { validateEnvironment, securityMiddleware, ipLoggingMiddleware, errorHandler, logger, generationLimiter } from "./middleware/security.js";
import { AppError, CircuitBreaker } from "./lib/errors.js";
import { authenticateToken } from "./middleware/auth.js";

// Route modules
// import { authRoutes } from "./routes/auth.js"; // Removed - using server/auth.ts instead
import { uploadRoutes, applyImageShieldProtection, protectionPresets } from "./routes/upload.js";
import { mediaRoutes } from "./routes/media.js";
import { analyticsRouter } from "./routes/analytics.js";
import { dashboardRouter } from "./routes/dashboard.js";
import { registerExpenseRoutes } from "./expense-routes.js";

// Core imports
import { storage } from "./storage.js";
import { setupAuth } from "./auth.js";
import { setupAdminRoutes } from "./admin-routes.js";
import { configureSocialAuth, socialAuthRoutes } from "./social-auth-config.js";
import { visitorAnalytics } from "./visitor-analytics.js";
import { makePaxum, makeCoinbase, makeStripe } from "./payments/payment-providers.js";
import { deriveStripeConfig } from "./payments/stripe-config.js";
// Analytics request type
interface AnalyticsRequest extends express.Request {
  sessionID: string;
}

// Import users table for type inference
import { users, type ContentGeneration } from "@shared/schema";

// AuthUser interface for passport serialization
interface AuthUser {
  id: number;
  username?: string;
  isAdmin?: boolean;
}

@@ -863,55 +864,51 @@ export async function registerRoutes(app: Express, apiPrefix: string = '/api'):
  // Register new enterprise API routes
  registerApiRoutes(app);
  
  // Register Policy Routes
  registerPolicyRoutes(app);
  
  // Register Reddit Routes  
  registerRedditRoutes(app);
  
  // Register Analytics Routes
  registerAnalyticsRoutes(app);

  // Register Social Media Routes
  registerSocialMediaRoutes(app);

  // Register Expense Routes (Tax Tracker API)
  registerExpenseRoutes(app);

  // Register Pro Resources Routes
  registerProResourcesRoutes(app);

  // Register Caption Routes (2-pass Gemini pipeline) - MOVED UP to get routing priority
  app.use('/api/caption', captionRouter);

  // Register Dashboard Routes
  import('./routes/dashboard.js').then(({ dashboardRouter }) => {
    app.use('/api/dashboard', dashboardRouter);
  }).catch(err => {
    logger.error('Failed to load dashboard routes:', err);
  });
  app.use('/api/dashboard', dashboardRouter);

  // ==========================================
  // CONTENT GENERATIONS HISTORY API
  // ==========================================
  
  // Get user's content generation history
  app.get('/api/content-generations', authenticateToken, async (req: AuthRequest, res) => {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ message: "Authentication required" });
      }

      const generations = await storage.getGenerationsByUserId(req.user.id);
      res.json(generations);
    } catch (error: unknown) {
      logger.error("Failed to get content generations:", error);
      res.status(500).json({ message: "Failed to retrieve content history" });
    }
  });

  // Delete a content generation
  app.delete('/api/content-generations/:id', authenticateToken, async (req: AuthRequest, res) => {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ message: "Authentication required" });
