 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/integrated-fine-tuning.tsx b/client/src/components/integrated-fine-tuning.tsx
index 8c2f801a108f4fe084ea0ef232aa84ff0a35044a..05aa5c55ccb9536c0423a7f5f8682b90278e4610 100644
--- a/client/src/components/integrated-fine-tuning.tsx
+++ b/client/src/components/integrated-fine-tuning.tsx
@@ -1,90 +1,165 @@
-import { useState } from "react";
+import { useEffect, useState } from "react";
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
 import { Button } from "@/components/ui/button";
 import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
 import { Badge } from "@/components/ui/badge";
 import { Slider } from "@/components/ui/slider";
 import { Label } from "@/components/ui/label";
 import { Textarea } from "@/components/ui/textarea";
 import { useToast } from "@/hooks/use-toast";
 import { 
   Upload, 
   Image, 
   Settings, 
   Save, 
   Sparkles, 
   Camera,
   Palette,
   Type,
   FileText,
   ChevronRight,
   Check,
   X
 } from "lucide-react";
 import { useMutation, useQuery } from "@tanstack/react-query";
 import { apiRequest, queryClient } from "@/lib/queryClient";
 
+type WritingStyle = {
+  tone: number;
+  formality: number;
+  explicitness: number;
+};
+
+type PhotoStyle = {
+  lighting: number;
+  mood: number;
+  composition: number;
+};
+
+type ContentPreferences = {
+  themes: string;
+  avoid: string;
+  prohibitedWords: string[];
+};
+
+interface UserPreferences {
+  writingStyle?: Partial<WritingStyle>;
+  photoStyle?: Partial<PhotoStyle>;
+  contentPreferences?: Partial<ContentPreferences>;
+}
+
+const mergeDefined = <T extends Record<string, unknown>>(
+  target: T,
+  source?: Partial<T>
+): T => {
+  if (!source) {
+    return target;
+  }
+
+  const result: T = { ...target };
+  (Object.keys(source) as Array<keyof T>).forEach((key) => {
+    const value = source[key];
+    if (value !== undefined) {
+      result[key] = value as T[typeof key];
+    }
+  });
+
+  return result;
+};
+
+const isShallowEqual = <T extends Record<string, unknown>>(a: T, b: T): boolean => {
+  const keys = Object.keys(a) as Array<keyof T>;
+  for (const key of keys) {
+    if (a[key] !== b[key]) {
+      return false;
+    }
+  }
+
+  return true;
+};
+
 interface TrainingData {
   id: number;
   type: 'post' | 'image' | 'caption';
   content: string;
   metadata?: {
     platform?: string;
     performance?: number;
     tags?: string[];
   };
 }
 
 export function IntegratedFineTuning() {
   const { toast } = useToast();
   
   // Fine-tuning settings
-  const [writingStyle, setWritingStyle] = useState({
+  const [writingStyle, setWritingStyle] = useState<WritingStyle>({
     tone: 50,
     formality: 50,
     explicitness: 50
   });
-  
-  const [photoStyle, setPhotoStyle] = useState({
+
+  const [photoStyle, setPhotoStyle] = useState<PhotoStyle>({
     lighting: 50,
     mood: 50,
     composition: 50
   });
-  
-  const [contentPreferences, setContentPreferences] = useState({
+
+  const [contentPreferences, setContentPreferences] = useState<ContentPreferences>({
     themes: "",
     avoid: "",
     prohibitedWords: [] as string[]
   });
 
   // Fetch user preferences
-  const { data: userPrefs } = useQuery({
+  const { data: userPrefs } = useQuery<UserPreferences>({
     queryKey: ["/api/user-preferences"],
     retry: false,
   });
 
+  useEffect(() => {
+    if (!userPrefs) {
+      return;
+    }
+
+    setWritingStyle((prev) => {
+      const merged = mergeDefined(prev, userPrefs.writingStyle);
+      return isShallowEqual(prev, merged) ? prev : merged;
+    });
+
+    setPhotoStyle((prev) => {
+      const merged = mergeDefined(prev, userPrefs.photoStyle);
+      return isShallowEqual(prev, merged) ? prev : merged;
+    });
+
+    setContentPreferences((prev) => {
+      const merged = mergeDefined(prev, userPrefs.contentPreferences);
+      return isShallowEqual(prev, merged) ? prev : merged;
+    });
+  }, [userPrefs]);
+
   // Save integrated settings
   const saveMutation = useMutation({
     mutationFn: async (data: unknown) => {
       return await apiRequest("/api/integrated-personalization", "PUT", data);
     },
     onSuccess: () => {
       toast({
         title: "Personalization Updated",
       });
       queryClient.invalidateQueries({ queryKey: ["/api/user-preferences"] });
     }
   });
 
   const handleAddTrainingData = (e: React.FormEvent<HTMLTextAreaElement>) => {
     const content = (e.target as HTMLTextAreaElement).value;
     if (content.trim()) {
       const newData = {
         id: Date.now(),
         type: 'post' as const,
         content: content.trim(),
         metadata: {
           platform: 'reddit',
           performance: Math.floor(Math.random() * 100)
         }
       };
 
EOF
)