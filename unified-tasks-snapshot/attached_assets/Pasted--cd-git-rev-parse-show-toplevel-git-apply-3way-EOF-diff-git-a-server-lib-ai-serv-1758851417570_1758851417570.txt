 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/server/lib/ai-service.ts b/server/lib/ai-service.ts
index f682462e11f2d1ef3b06fba6a105a46a0dad08b7..1db7964655e2387b2f397549886a4a7c817f9cef 100644
--- a/server/lib/ai-service.ts
+++ b/server/lib/ai-service.ts
@@ -317,53 +317,67 @@ Return ONLY the JSON object above with actual content. No other text.`;
       }
 
       // Check if user exists before trying to cache
       const userExists = await db
         .select({ id: users.id })
         .from(users)
         .where(eq(users.id, userId))
         .limit(1);
 
       if (userExists.length === 0) {
         console.warn(`User ID ${userId} not found in database, skipping cache`);
         return;
       }
 
       await db.insert(aiGenerations).values({
         userId,
         provider,
         model: result.model,
         inputHash,
         inputJson: inputData,
         outputJson: result,
       });
     } catch (error: unknown) {
       console.warn('Failed to cache AI result (non-fatal):', (error as Error).message);
       // Check for foreign key constraint violation
-      const err = error as Record<string, unknown>;
-      if (err?.code === '23503' && err?.constraint?.includes('user_id')) {
-        console.warn(`User ID ${userId} not found in database, skipping cache`);
+      if (
+        typeof error === 'object' &&
+        error &&
+        'code' in error &&
+        typeof error.code === 'string' &&
+        error.code === '23503'
+      ) {
+        const err = error;
+        if (
+          typeof err === 'object' &&
+          err &&
+          'constraint' in err &&
+          typeof err.constraint === 'string' &&
+          err.constraint.includes('user_id')
+        ) {
+          console.warn(`User ID ${userId} not found in database, skipping cache`);
+        }
       }
       // Non-fatal error, continue without caching
     }
   }
   
   // Image analysis for context-aware content generation
   static async analyzeImage(imageBuffer: Buffer): Promise<{
     description: string;
     mood: string;
     suggestions: string[];
   }> {
     try {
       if (process.env.OPENAI_API_KEY) {
         const base64Image = imageBuffer.toString('base64');
         
         const response = await openai.chat.completions.create({
           model: "gpt-4o",
           messages: [{
             role: "user",
             content: [
               {
                 type: "text",
                 text: "Analyze this image for social media content creation. Describe the mood, setting, and suggest content themes. Return JSON with description, mood, and suggestions array."
               },
               {
 
EOF
)