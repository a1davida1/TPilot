 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/__tests__/admin-communities-panel.test.tsx b/client/src/components/__tests__/admin-communities-panel.test.tsx
index a2f097d87a048776f44068f346bdbac487db7ac7..35fa9ddf6a2dff6be19e803e2babb0246119d56a 100644
--- a/client/src/components/__tests__/admin-communities-panel.test.tsx
+++ b/client/src/components/__tests__/admin-communities-panel.test.tsx
@@ -40,57 +40,63 @@ vi.mock('@/hooks/use-toast', () => ({
   useToast: () => ({ toast: mockToast }),
 }));
 
 // Helper to create structured rules
 const createStructuredRules = (
   sellingPolicy: RedditCommunitySellingPolicy,
   overrides: Record<string, unknown> = {}
 ) => {
   const baseRules = {
     content: {
       sellingPolicy: sellingPolicy,
       promotionalLinks: 'limited',
       watermarksAllowed: true,
       titleGuidelines: [],
       contentGuidelines: [],
       bannedContent: [],
       formattingRequirements: []
     },
     eligibility: {
       minKarma: 100,
       minAccountAgeDays: 30,
       verificationRequired: false
     }
   };
 
+  const isRecord = (value: unknown): value is Record<string, unknown> =>
+    value !== null && typeof value === 'object';
+
   // Deep merge overrides
-  const mergeDeep = (target: Record<string, unknown>, source: Record<string, unknown>) => {
+  const mergeDeep = (target: Record<string, unknown>, source: Record<string, unknown>): Record<string, unknown> => {
     for (const key in source) {
-      if (source[key] instanceof Object && key in target && target[key] instanceof Object) {
-        mergeDeep(target[key], source[key]);
+      const sourceValue = source[key];
+      const targetValue = target[key];
+
+      if (isRecord(sourceValue) && isRecord(targetValue)) {
+        mergeDeep(targetValue, sourceValue);
       } else {
-        target[key] = source[key];
+        target[key] = sourceValue;
       }
     }
     return target;
   };
 
   return mergeDeep(JSON.parse(JSON.stringify(baseRules)), overrides);
 };
 
 vi.mock('@/hooks/use-admin-communities', () => ({
   useAdminCommunities: (filters?: Record<string, unknown>) => mockUseQuery({ queryKey: ['admin-communities', filters] }),
   useCreateCommunity: () => mockUseMutation(),
   useUpdateCommunity: () => mockUseMutation(),
   useDeleteCommunity: () => mockUseMutation(),
   GROWTH_TRENDS: ['up', 'stable', 'down'],
   GROWTH_TREND_LABELS: {
     up: 'Growing',
     stable: 'Stable',
     down: 'Declining'
   },
   getGrowthTrendLabel: (trend: GrowthTrend | null | undefined) => {
     if (!trend) return 'Unknown';
     const labels = { up: 'Growing', stable: 'Stable', down: 'Declining' };
     return labels[trend];
   }
 }));
 
EOF
)