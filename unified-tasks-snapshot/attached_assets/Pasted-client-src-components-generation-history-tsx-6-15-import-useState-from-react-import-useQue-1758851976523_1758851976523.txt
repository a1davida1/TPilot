client/src/components/generation-history.tsx
+6-15
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Clock, Copy, Check, Sparkles } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import type { ContentGeneration } from "@shared/schema.js";

interface ContentGeneration {
  id: number;
  platform: string;
  style: string;
  theme: string;
  titles: string[];
  content: string;
  photoInstructions: unknown;
  prompt: string;
export type GenerationHistoryEntry = Omit<ContentGeneration, "createdAt" | "photoInstructions"> & {
  createdAt: string;
  allowsPromotion: boolean;
}
  photoInstructions: ContentGeneration["photoInstructions"] | string | null;
};

interface GenerationHistoryProps {
  onSelectGeneration?: (generation: ContentGeneration) => void;
  onSelectGeneration?: (generation: GenerationHistoryEntry) => void;
}

export function GenerationHistory({ onSelectGeneration }: GenerationHistoryProps) {
  const [copiedItem, setCopiedItem] = useState<string | null>(null);
  const { toast } = useToast();

  const { data: history = [], isLoading } = useQuery<ContentGeneration[]>({
  const { data: history = [], isLoading } = useQuery<GenerationHistoryEntry[]>({
    queryKey: ["/api/content-generation-history"],
    staleTime: 1000 * 60 * 5, // 5 minutes
  });

  const copyToClipboard = async (text: string, itemName: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItem(itemName);
      toast({
        description: `${itemName} copied to clipboard`,
      });
      setTimeout(() => setCopiedItem(null), 2000);
    } catch (_err) {
      toast({
        title: "Failed to copy",
        description: "Please try selecting and copying manually",
        variant: "destructive"
      });
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
client/src/components/unified-content-creator.tsx
+45-36
@@ -8,89 +8,85 @@ import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Brain, 
  Camera, 
  FileText, 
  Sparkles, 
  Upload, 
  Zap,
  Lock,
  Crown,
  ArrowRight,
  RefreshCw,
  Copy,
  Check,
  Wand2,
  UserCheck,
  LogIn
} from "lucide-react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import type { ContentGeneration } from "@shared/schema.js";
import { GenerationHistory } from "./generation-history";
import { GenerationHistory, type GenerationHistoryEntry } from "./generation-history";
import { AuthModal } from "./auth-modal";
import { protectImage, protectionPresets, downloadProtectedImage } from "@/lib/image-protection";

// Assuming ThemeToggle and other necessary components/hooks are imported correctly.
// For example: import ThemeToggle from "@/components/ThemeToggle";

// In a real app, these would be imported or defined elsewhere.
const photoTypes = [
  { id: 'realistic', label: 'Realistic', emoji: 'üì∏' },
  { id: 'artistic', label: 'Artistic', emoji: 'üé®' },
];
const textTones = [
  { id: 'playful', label: 'Playful', emoji: 'üòú' },
  { id: 'sensual', label: 'Sensual', emoji: 'üíã' },
  { id: 'elegant', label: 'Elegant', emoji: 'üëë' },
  { id: 'casual', label: 'Casual', emoji: 'üòä' },
];
const availableHashtags = ['#model', '#photography', '#fashion', '#lifestyle', '#beauty', '#art', '#portrait', '#creative', '#outfit', '#style'];

// Extended interface for frontend display with dynamic server properties
interface GeneratedContentDisplay extends Omit<ContentGeneration, 'photoInstructions'> {
type PhotoInstructions = ContentGeneration["photoInstructions"];

interface GeneratedContentDisplay extends Omit<GenerationHistoryEntry, "createdAt" | "photoInstructions"> {
  aiProvider?: string;
  estimatedCost?: number;
  upgradeMessage?: string;
  userTier?: string;
  variationCount?: number;
  apiStatus?: string;
  contentSource?: string;
  quotaExceeded?: boolean;
  titles: string[]; // Ensure titles is always an array
  photoInstructions: {
    lighting: string;
    cameraAngle: string;
    composition: string;
    styling: string;
    mood: string;
    technicalSettings: string;
  }; // Match the exact schema type
  createdAt: Date;
  photoInstructions: PhotoInstructions | string;
}

interface UnifiedContentCreatorProps {
  onContentGenerated: (generation: ContentGeneration) => void;
  isGuestMode?: boolean;
  userTier?: "free" | "starter" | "pro";
}

export function UnifiedContentCreator({ 
  onContentGenerated, 
  isGuestMode = false,
  userTier = "free" 
}: UnifiedContentCreatorProps) {
  const [workflowMode, setWorkflowMode] = useState<'text' | 'image' | 'presets' | 'history'>('presets');
  const [customPrompt, setCustomPrompt] = useState("");
  const [platform, setPlatform] = useState("reddit");
  const [subreddit, setSubreddit] = useState("");
  const [allowsPromotion, setAllowsPromotion] = useState("moderate");
  const [useAdvancedSettings, setUseAdvancedSettings] = useState(false);
  const [selectedProvider, setSelectedProvider] = useState("auto");
  const [showAuthModal, setShowAuthModal] = useState(false);

  // State for photo types and text tones
  const [selectedPhotoType, setSelectedPhotoType] = useState(photoTypes[0].id);
  const [selectedTextTone, setSelectedTextTone] = useState(textTones[0].id);
@@ -754,80 +750,93 @@ export function UnifiedContentCreator({
                            <div className="space-y-2">
                              <p className="text-xs text-muted-foreground text-center">Protected</p>
                              <img
                                src={protectedImageUrl}
                                alt="Protected"
                                className="w-full h-32 object-cover rounded-lg border border-purple-500"
                              />
                            </div>
                          </div>
                          {(isGuestMode || userTier === 'free') && (
                            <p className="text-xs text-orange-600 text-center">
                              ‚ö†Ô∏è Watermark applied - Upgrade to Pro to remove
                            </p>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}
              </div>
            )}
          </TabsContent>

          {/* Generation History */}
          <TabsContent value="history" className="space-y-4">
            <GenerationHistory 
            <GenerationHistory
              onSelectGeneration={(generation) => {
                // Load selected generation as current content
                const {
                  createdAt,
                  photoInstructions,
                  titles,
                  ...rest
                } = generation;

                const parsedCreatedAt = createdAt ? new Date(createdAt) : new Date();
                const normalizedCreatedAt = Number.isNaN(parsedCreatedAt.getTime())
                  ? new Date()
                  : parsedCreatedAt;

                const normalizedPhotoInstructions: GeneratedContentDisplay["photoInstructions"] =
                  typeof photoInstructions === "string"
                    ? photoInstructions
                    : photoInstructions
                      ? {
                          lighting: photoInstructions.lighting,
                          cameraAngle: photoInstructions.cameraAngle,
                          composition: photoInstructions.composition,
                          styling: photoInstructions.styling,
                          mood: photoInstructions.mood,
                          technicalSettings: photoInstructions.technicalSettings,
                        }
                      : {
                          lighting: "",
                          cameraAngle: "",
                          composition: "",
                          styling: "",
                          mood: "",
                          technicalSettings: "",
                        };

                const displayData: GeneratedContentDisplay = {
                  ...generation,
                  userId: (generation as Record<string, unknown>).userId as number || 0,
                  subreddit: (generation as Record<string, unknown>).subreddit as string || null,
                  generationType: (generation as Record<string, unknown>).generationType as string || 'ai',
                  createdAt: typeof generation.createdAt === 'string' 
                    ? new Date(generation.createdAt) 
                    : generation.createdAt || new Date(),
                  titles: generation.titles || [],
                  photoInstructions: (generation.photoInstructions && typeof generation.photoInstructions === 'object' && 'lighting' in generation.photoInstructions) 
                    ? generation.photoInstructions as {
                        lighting: string;
                        cameraAngle: string;
                        composition: string;
                        styling: string;
                        mood: string;
                        technicalSettings: string;
                      }
                    : {
                        lighting: '',
                        cameraAngle: '',
                        composition: '',
                        styling: '',
                        mood: '',
                        technicalSettings: ''
                      }
                  ...rest,
                  createdAt: normalizedCreatedAt,
                  titles: Array.isArray(titles) ? titles : [],
                  photoInstructions: normalizedPhotoInstructions,
                };

                setGeneratedContent(displayData);
                toast({
                  title: "Generation Loaded",
                  description: "Previous content loaded successfully"
                });
              }}
            />
          </TabsContent>
        </Tabs>

        {/* Shared Settings */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label>Platform</Label>
            <Select value={platform} onValueChange={setPlatform}>
              <SelectTrigger>
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="reddit">Reddit</SelectItem>
                <SelectItem value="twitter">Twitter</SelectItem>
                <SelectItem value="instagram">Instagram</SelectItem>
                <SelectItem value="onlyfans">OnlyFans</SelectItem>
              </SelectContent>
            </Select>
          </div>
